
entrega2.elf:     file format elf32-littlenios2
entrega2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020230

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00004e4c memsz 0x00004e4c flags r-x
    LOAD off    0x0000604c vaddr 0x0004004c paddr 0x00024e6c align 2**12
         filesz 0x00000a40 memsz 0x00000ba0 flags rw-
    LOAD off    0x00007000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x0000004c memsz 0x0000004c flags r--

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004c3c  00020230  00020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  00040000  00040000  00007000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000a40  0004004c  00024e6c  0000604c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00040a8c  000258ac  00006a8c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000258ac  000258ac  0000704c  2**0
                  CONTENTS
  7 .onchip_memory2_1 00000000  00040bec  00040bec  0000704c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000009b0  00000000  00000000  00007070  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001520b  00000000  00000000  00007a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000057db  00000000  00000000  0001cc2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006455  00000000  00000000  00022406  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001388  00000000  00000000  0002885c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002558  00000000  00000000  00029be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004ada  00000000  00000000  0002c13c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00030c18  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000650  00000000  00000000  00030c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00033576  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00033579  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00033585  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00033586  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  00033587  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  00033592  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0003359d  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000008  00000000  00000000  000335a8  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000003b  00000000  00000000  000335b0  2**0
                  CONTENTS, READONLY
 27 .jdi          00004e8b  00000000  00000000  000335eb  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00042c56  00000000  00000000  00038476  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020230 l    d  .text	00000000 .text
00040000 l    d  .rodata	00000000 .rodata
0004004c l    d  .rwdata	00000000 .rwdata
00040a8c l    d  .bss	00000000 .bss
000258ac l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00040bec l    d  .onchip_memory2_1	00000000 .onchip_memory2_1
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../entrega2_bsp//obj/HAL/src/crt0.o
00020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
000205dc l     F .text	00000008 __fp_unlock
000205f0 l     F .text	0000019c __sinit.part.1
0002078c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0004005c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
0002327c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00023390 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000233bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00023630 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00023718 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00023804 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000239e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00040a88 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00023c84 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00023dc0 l     F .text	00000034 alt_dev_reg
00040a30 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00024218 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000243d8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00024538 l     F .text	0000003c alt_get_errno
00024574 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00040ac0 g     O .bss	00000004 alt_instruction_exception_handler
0002304c g     F .text	00000054 _isatty_r
0002391c g     F .text	0000007c alt_main
00020470 g     F .text	000000c0 _puts_r
00040aec g     O .bss	00000100 alt_irq
00022d74 g     F .text	00000060 _lseek_r
00024e6c g       *ABS*	00000000 __flash_rwdata_start
00040bec g       *ABS*	00000000 __alt_heap_start
00022328 g     F .text	0000005c __sseek
0002093c g     F .text	00000010 __sinit
00020794 g     F .text	00000078 __sfmoreglue
000239bc g     F .text	00000024 __malloc_unlock
00021a14 g     F .text	0000015c memmove
00020924 g     F .text	00000018 _cleanup
00040a8c g     O .bss	00000004 n
000247bc g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00040a9c g     O .bss	00000004 edge_capture
00020020 g       *ABS*	00000000 __flash_exceptions_start
00022ff0 g     F .text	0000005c _fstat_r
00040aac g     O .bss	00000004 errno
000222a4 g     F .text	00000008 __seofread
00040ab8 g     O .bss	00000004 alt_argv
00048a5c g       *ABS*	00000000 _gp
00023c54 g     F .text	00000030 usleep
000408b0 g     O .rwdata	00000180 alt_fd_list
000247e0 g     F .text	00000090 alt_find_dev
000218cc g     F .text	00000148 memcpy
000205e4 g     F .text	0000000c _cleanup_r
000244bc g     F .text	0000007c alt_io_redirect
00024e6c g       *ABS*	00000000 __DTOR_END__
00020530 g     F .text	00000014 puts
00024a3c g     F .text	0000009c alt_exception_cause_generated_bad_addr
00023f20 g     F .text	000000ec altera_avalon_jtag_uart_read
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00023198 g     F .text	00000064 .hidden __udivsi3
0002366c g     F .text	000000ac isatty
00040aa8 g     O .bss	00000004 __malloc_top_pad
0002098c g     F .text	000004c8 __sfvwrite_r
000221fc g     F .text	00000054 _sbrk_r
00022f90 g     F .text	00000060 _read_r
00040a7c g     O .rwdata	00000004 alt_max_fd
00022594 g     F .text	000000f0 _fclose_r
00022910 g     F .text	00000030 fflush
00040aa4 g     O .bss	00000004 __malloc_max_sbrked_mem
000234b0 g     F .text	00000180 alt_irq_register
00023840 g     F .text	000000dc lseek
00040a5c g     O .rwdata	00000004 _global_impure_ptr
00021c98 g     F .text	00000564 _realloc_r
00040bec g       *ABS*	00000000 __bss_end
0002095c g     F .text	00000018 __fp_lock_all
00040a98 g     O .bss	00000004 vel
00040ab0 g     O .bss	00000004 alt_irq_active
0004004c g     O .rwdata	00000010 velocidade
000200fc g     F .exceptions	000000d4 alt_irq_handler
00040888 g     O .rwdata	00000028 alt_dev_null
000241f8 g     F .text	00000020 alt_dcache_flush_all
00040a8c g       *ABS*	00000000 __ram_rwdata_end
00040a74 g     O .rwdata	00000008 alt_dev_list
00023cc0 g     F .text	00000100 write
0004004c g       *ABS*	00000000 __ram_rodata_end
000233f8 g     F .text	000000b8 fstat
000231fc g     F .text	00000058 .hidden __umodsi3
00040bec g       *ABS*	00000000 end
00040a90 g     O .bss	00000004 en
000201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0002030c g     F .text	00000064 init_pio
00024e6c g       *ABS*	00000000 __CTOR_LIST__
000478f4 g       *ABS*	00000000 __alt_stack_pointer
0002400c g     F .text	00000094 altera_avalon_jtag_uart_write
0002094c g     F .text	00000004 __sfp_lock_acquire
000217e8 g     F .text	000000e4 memchr
00022a64 g     F .text	00000310 _free_r
00024cb8 g     F .text	00000180 __call_exitprocs
00040a64 g     O .rwdata	00000004 __malloc_sbrk_base
00020230 g     F .text	0000003c _start
00023a1c g     F .text	00000104 read
00023e2c g     F .text	00000034 alt_sys_init
00024ba0 g     F .text	00000118 __register_exitproc
00023254 g     F .text	00000028 .hidden __mulsi3
0004004c g       *ABS*	00000000 __ram_rwdata_start
00040000 g       *ABS*	00000000 __ram_rodata_start
00040ac4 g     O .bss	00000028 __malloc_current_mallinfo
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
00023e60 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00024978 g     F .text	000000c4 alt_get_fd
000240a0 g     F .text	00000158 alt_busy_sleep
00022540 g     F .text	00000054 _close_r
00024b24 g     F .text	0000007c memcmp
00040bec g       *ABS*	00000000 __alt_stack_base
000223ec g     F .text	00000154 __swsetup_r
0002080c g     F .text	00000118 __sfp
00040480 g     O .rwdata	00000408 __malloc_av_
00020958 g     F .text	00000004 __sinit_lock_release
00022250 g     F .text	00000054 __sread
00024870 g     F .text	00000108 alt_find_file
00024254 g     F .text	000000a4 alt_dev_llist_insert
00023998 g     F .text	00000024 __malloc_lock
00023ba4 g     F .text	000000b0 sbrk
000228b4 g     F .text	0000005c _fflush_r
00040a8c g       *ABS*	00000000 __bss_start
00021b70 g     F .text	00000128 memset
00020370 g     F .text	00000100 main
00040abc g     O .bss	00000004 alt_envp
00040aa0 g     O .bss	00000004 __malloc_max_total_mem
00023ec0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00022384 g     F .text	00000008 __sclose
000478f4 g       *ABS*	00000000 __alt_heap_limit
00022684 g     F .text	00000014 fclose
00020fdc g     F .text	0000080c _malloc_r
00040a80 g     O .rwdata	00000004 alt_errno
00020e54 g     F .text	000000c4 _fwalk
000230a0 g     F .text	00000084 .hidden __divsi3
00022940 g     F .text	00000124 _malloc_trim_r
00024e6c g       *ABS*	00000000 __CTOR_END__
00040a94 g     O .bss	00000004 dir
00040000 g       *ABS*	00000000 __flash_rodata_start
00024e6c g       *ABS*	00000000 __DTOR_LIST__
00023df4 g     F .text	00000038 alt_irq_init
00023b20 g     F .text	00000084 alt_release_fd
00024ad8 g     F .text	00000014 atexit
0002238c g     F .text	00000060 _write_r
00040a60 g     O .rwdata	00000004 _impure_ptr
00040ab4 g     O .bss	00000004 alt_argc
00022698 g     F .text	0000021c __sflush_r
00024358 g     F .text	00000060 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
00020974 g     F .text	00000018 __fp_unlock_all
00040a6c g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00040a8c g       *ABS*	00000000 _edata
00040bec g       *ABS*	00000000 _end
00020230 g       *ABS*	00000000 __ram_exceptions_end
000222ac g     F .text	0000007c __swrite
00040a68 g     O .rwdata	00000004 __malloc_trim_threshold
00024aec g     F .text	00000038 exit
00020f18 g     F .text	000000c4 _fwalk_reent
00023124 g     F .text	00000074 .hidden __modsi3
000478f4 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00020950 g     F .text	00000004 __sfp_lock_release
00024e38 g     F .text	00000034 _exit
00022dd4 g     F .text	000001bc __smakebuf_r
00020544 g     F .text	00000098 strlen
00024660 g     F .text	0000015c open
000243b8 g     F .text	00000020 alt_icache_flush_all
00040a84 g     O .rwdata	00000004 alt_priority_mask
000242f8 g     F .text	00000060 _do_ctors
0002026c g     F .text	000000a0 handle_button_interrupts
000232b8 g     F .text	000000d8 close
00023780 g     F .text	00000084 alt_load
00020954 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408c14 	ori	at,at,560
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	00800134 	movhi	r2,4
   20140:	1082bb04 	addi	r2,r2,2796
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	00800134 	movhi	r2,4
   20158:	1082bb04 	addi	r2,r2,2796
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201e4:	00bfffc4 	movi	r2,-1
   201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201f0:	d0a01917 	ldw	r2,-32668(gp)
   201f4:	10000726 	beq	r2,zero,20214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201f8:	d0a01917 	ldw	r2,-32668(gp)
   201fc:	e0fffd17 	ldw	r3,-12(fp)
   20200:	e1bffe17 	ldw	r6,-8(fp)
   20204:	e17fff17 	ldw	r5,-4(fp)
   20208:	1809883a 	mov	r4,r3
   2020c:	103ee83a 	callr	r2
   20210:	00000206 	br	2021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20218:	0005883a 	mov	r2,zero
}
   2021c:	e037883a 	mov	sp,fp
   20220:	dfc00117 	ldw	ra,4(sp)
   20224:	df000017 	ldw	fp,0(sp)
   20228:	dec00204 	addi	sp,sp,8
   2022c:	f800283a 	ret

Disassembly of section .text:

00020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20230:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   20234:	dede3d14 	ori	sp,sp,30964
    movhi gp, %hi(_gp)
   20238:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   2023c:	d6a29714 	ori	gp,gp,35420
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20240:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   20244:	1082a314 	ori	r2,r2,2700

    movhi r3, %hi(__bss_end)
   20248:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   2024c:	18c2fb14 	ori	r3,r3,3052

    beq r2, r3, 1f
   20250:	10c00326 	beq	r2,r3,20260 <_start+0x30>

0:
    stw zero, (r2)
   20254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2025c:	10fffd36 	bltu	r2,r3,20254 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20260:	00237800 	call	23780 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20264:	002391c0 	call	2391c <alt_main>

00020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20268:	003fff06 	br	20268 <alt_after_alt_main>

0002026c <handle_button_interrupts>:
int vel = 0;

int velocidade[] ={100000,50000,10000,5000};


void handle_button_interrupts(void* context, alt_u32 id){
   2026c:	defffc04 	addi	sp,sp,-16
   20270:	df000315 	stw	fp,12(sp)
   20274:	df000304 	addi	fp,sp,12
   20278:	e13ffe15 	stw	r4,-8(fp)
   2027c:	e17fff15 	stw	r5,-4(fp)
     /* Cast context to edge_capture's type. It is important that this be
      * declared volatile to avoid unwanted compiler optimization.
      */
     volatile int* edge_capture_ptr = (volatile int*) context;
   20280:	e0bffe17 	ldw	r2,-8(fp)
   20284:	e0bffd15 	stw	r2,-12(fp)
     /* Store the value in the Button's edge capture register in *context. */
     *edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(PIO_1_BASE);
   20288:	00800174 	movhi	r2,5
   2028c:	10a40704 	addi	r2,r2,-28644
   20290:	10c00037 	ldwio	r3,0(r2)
   20294:	e0bffd17 	ldw	r2,-12(fp)
   20298:	10c00015 	stw	r3,0(r2)
     n++;
   2029c:	d0a00c17 	ldw	r2,-32720(gp)
   202a0:	10800044 	addi	r2,r2,1
   202a4:	d0a00c15 	stw	r2,-32720(gp)
     /* Reset the Button's edge capture register. */
     IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_1_BASE, 0);
   202a8:	0007883a 	mov	r3,zero
   202ac:	00800174 	movhi	r2,5
   202b0:	10a40704 	addi	r2,r2,-28644
   202b4:	10c00035 	stwio	r3,0(r2)

     en = (IORD_32DIRECT(PIO_1_BASE,0) & 0x01);
   202b8:	00800174 	movhi	r2,5
   202bc:	10a40404 	addi	r2,r2,-28656
   202c0:	10800037 	ldwio	r2,0(r2)
   202c4:	1080004c 	andi	r2,r2,1
   202c8:	d0a00d15 	stw	r2,-32716(gp)
     dir = (IORD_32DIRECT(PIO_1_BASE,0) & 0x02);
   202cc:	00800174 	movhi	r2,5
   202d0:	10a40404 	addi	r2,r2,-28656
   202d4:	10800037 	ldwio	r2,0(r2)
   202d8:	1080008c 	andi	r2,r2,2
   202dc:	d0a00e15 	stw	r2,-32712(gp)
     vel = (IORD_32DIRECT(PIO_1_BASE,0) & 0x0C) >> 2;
   202e0:	00800174 	movhi	r2,5
   202e4:	10a40404 	addi	r2,r2,-28656
   202e8:	10800037 	ldwio	r2,0(r2)
   202ec:	1080030c 	andi	r2,r2,12
   202f0:	1005d0ba 	srai	r2,r2,2
   202f4:	d0a00f15 	stw	r2,-32708(gp)
     }
   202f8:	0001883a 	nop
   202fc:	e037883a 	mov	sp,fp
   20300:	df000017 	ldw	fp,0(sp)
   20304:	dec00104 	addi	sp,sp,4
   20308:	f800283a 	ret

0002030c <init_pio>:

 void init_pio(){
   2030c:	defffd04 	addi	sp,sp,-12
   20310:	dfc00215 	stw	ra,8(sp)
   20314:	df000115 	stw	fp,4(sp)
   20318:	df000104 	addi	fp,sp,4
	 /* Recast the edge_capture pointer to match the alt_irq_register() function
	  * prototype. */
	 void* edge_capture_ptr = (void*) &edge_capture;
   2031c:	d0a01004 	addi	r2,gp,-32704
   20320:	e0bfff15 	stw	r2,-4(fp)
	 /* Enable first four interrupts. */
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_1_BASE, 0xf);
   20324:	00c003c4 	movi	r3,15
   20328:	00800174 	movhi	r2,5
   2032c:	10a40604 	addi	r2,r2,-28648
   20330:	10c00035 	stwio	r3,0(r2)
	 /* Reset the edge capture register. */
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_1_BASE, 0x0);
   20334:	0007883a 	mov	r3,zero
   20338:	00800174 	movhi	r2,5
   2033c:	10a40704 	addi	r2,r2,-28644
   20340:	10c00035 	stwio	r3,0(r2)
	 /* Register the interrupt handler. */
	 alt_irq_register( PIO_1_IRQ, edge_capture_ptr,
   20344:	018000b4 	movhi	r6,2
   20348:	31809b04 	addi	r6,r6,620
   2034c:	e17fff17 	ldw	r5,-4(fp)
   20350:	01000044 	movi	r4,1
   20354:	00234b00 	call	234b0 <alt_irq_register>
					   handle_button_interrupts );
}
   20358:	0001883a 	nop
   2035c:	e037883a 	mov	sp,fp
   20360:	dfc00117 	ldw	ra,4(sp)
   20364:	df000017 	ldw	fp,0(sp)
   20368:	dec00204 	addi	sp,sp,8
   2036c:	f800283a 	ret

00020370 <main>:

int main(void){
   20370:	defffd04 	addi	sp,sp,-12
   20374:	dfc00215 	stw	ra,8(sp)
   20378:	df000115 	stw	fp,4(sp)
   2037c:	df000104 	addi	fp,sp,4
	n=0;
   20380:	d0200c15 	stw	zero,-32720(gp)
	int step = 0;
   20384:	e03fff15 	stw	zero,-4(fp)

	printf("Embarcados++ \n");
   20388:	01000134 	movhi	r4,4
   2038c:	21000004 	addi	r4,r4,0
   20390:	00205300 	call	20530 <puts>
	init_pio();
   20394:	002030c0 	call	2030c <init_pio>

	while(1){
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_1_BASE, n);
   20398:	d0e00c17 	ldw	r3,-32720(gp)
   2039c:	00800174 	movhi	r2,5
   203a0:	10a40404 	addi	r2,r2,-28656
   203a4:	10c00035 	stwio	r3,0(r2)

		if (en){
   203a8:	d0a00d17 	ldw	r2,-32716(gp)
   203ac:	103ffa26 	beq	r2,zero,20398 <main+0x28>
			if (dir){
   203b0:	d0a00e17 	ldw	r2,-32712(gp)
   203b4:	10001726 	beq	r2,zero,20414 <main+0xa4>

				if (step <= 3){
   203b8:	e0bfff17 	ldw	r2,-4(fp)
   203bc:	10800108 	cmpgei	r2,r2,4
   203c0:	1000121e 	bne	r2,zero,2040c <main+0x9c>
				  IOWR_32DIRECT(PIO_2_BASE, 0, 0x01 << step++);
   203c4:	e0bfff17 	ldw	r2,-4(fp)
   203c8:	10c00044 	addi	r3,r2,1
   203cc:	e0ffff15 	stw	r3,-4(fp)
   203d0:	00c00044 	movi	r3,1
   203d4:	1886983a 	sll	r3,r3,r2
   203d8:	00800174 	movhi	r2,5
   203dc:	10a40004 	addi	r2,r2,-28672
   203e0:	10c00035 	stwio	r3,0(r2)
				  usleep(velocidade[vel]);
   203e4:	d0e00f17 	ldw	r3,-32708(gp)
   203e8:	00800134 	movhi	r2,4
   203ec:	10801304 	addi	r2,r2,76
   203f0:	18c7883a 	add	r3,r3,r3
   203f4:	18c7883a 	add	r3,r3,r3
   203f8:	10c5883a 	add	r2,r2,r3
   203fc:	10800017 	ldw	r2,0(r2)
   20400:	1009883a 	mov	r4,r2
   20404:	0023c540 	call	23c54 <usleep>
   20408:	003fe306 	br	20398 <main+0x28>
			  }
			  else{
				  step = 0;
   2040c:	e03fff15 	stw	zero,-4(fp)
   20410:	003fe106 	br	20398 <main+0x28>
			  }
			}
			else{
			  if (step >= 0){
   20414:	e0bfff17 	ldw	r2,-4(fp)
   20418:	10001216 	blt	r2,zero,20464 <main+0xf4>
				  IOWR_32DIRECT(PIO_2_BASE, 0, 0x01 << step--);
   2041c:	e0bfff17 	ldw	r2,-4(fp)
   20420:	10ffffc4 	addi	r3,r2,-1
   20424:	e0ffff15 	stw	r3,-4(fp)
   20428:	00c00044 	movi	r3,1
   2042c:	1886983a 	sll	r3,r3,r2
   20430:	00800174 	movhi	r2,5
   20434:	10a40004 	addi	r2,r2,-28672
   20438:	10c00035 	stwio	r3,0(r2)
				  usleep(velocidade[vel]);
   2043c:	d0e00f17 	ldw	r3,-32708(gp)
   20440:	00800134 	movhi	r2,4
   20444:	10801304 	addi	r2,r2,76
   20448:	18c7883a 	add	r3,r3,r3
   2044c:	18c7883a 	add	r3,r3,r3
   20450:	10c5883a 	add	r2,r2,r3
   20454:	10800017 	ldw	r2,0(r2)
   20458:	1009883a 	mov	r4,r2
   2045c:	0023c540 	call	23c54 <usleep>
   20460:	003fcd06 	br	20398 <main+0x28>
			  }
			  else{
				  step = 3;
   20464:	008000c4 	movi	r2,3
   20468:	e0bfff15 	stw	r2,-4(fp)
			  }
			}
		}

	};
   2046c:	003fca06 	br	20398 <main+0x28>

00020470 <_puts_r>:
   20470:	defff604 	addi	sp,sp,-40
   20474:	dc000715 	stw	r16,28(sp)
   20478:	2021883a 	mov	r16,r4
   2047c:	2809883a 	mov	r4,r5
   20480:	dc400815 	stw	r17,32(sp)
   20484:	dfc00915 	stw	ra,36(sp)
   20488:	2823883a 	mov	r17,r5
   2048c:	00205440 	call	20544 <strlen>
   20490:	10c00044 	addi	r3,r2,1
   20494:	d8800115 	stw	r2,4(sp)
   20498:	00800134 	movhi	r2,4
   2049c:	10800404 	addi	r2,r2,16
   204a0:	d8800215 	stw	r2,8(sp)
   204a4:	00800044 	movi	r2,1
   204a8:	d8800315 	stw	r2,12(sp)
   204ac:	00800084 	movi	r2,2
   204b0:	dc400015 	stw	r17,0(sp)
   204b4:	d8c00615 	stw	r3,24(sp)
   204b8:	dec00415 	stw	sp,16(sp)
   204bc:	d8800515 	stw	r2,20(sp)
   204c0:	80000226 	beq	r16,zero,204cc <_puts_r+0x5c>
   204c4:	80800e17 	ldw	r2,56(r16)
   204c8:	10001426 	beq	r2,zero,2051c <_puts_r+0xac>
   204cc:	81400217 	ldw	r5,8(r16)
   204d0:	2880030b 	ldhu	r2,12(r5)
   204d4:	10c8000c 	andi	r3,r2,8192
   204d8:	1800061e 	bne	r3,zero,204f4 <_puts_r+0x84>
   204dc:	29001917 	ldw	r4,100(r5)
   204e0:	00f7ffc4 	movi	r3,-8193
   204e4:	10880014 	ori	r2,r2,8192
   204e8:	20c6703a 	and	r3,r4,r3
   204ec:	2880030d 	sth	r2,12(r5)
   204f0:	28c01915 	stw	r3,100(r5)
   204f4:	d9800404 	addi	r6,sp,16
   204f8:	8009883a 	mov	r4,r16
   204fc:	002098c0 	call	2098c <__sfvwrite_r>
   20500:	1000091e 	bne	r2,zero,20528 <_puts_r+0xb8>
   20504:	00800284 	movi	r2,10
   20508:	dfc00917 	ldw	ra,36(sp)
   2050c:	dc400817 	ldw	r17,32(sp)
   20510:	dc000717 	ldw	r16,28(sp)
   20514:	dec00a04 	addi	sp,sp,40
   20518:	f800283a 	ret
   2051c:	8009883a 	mov	r4,r16
   20520:	002093c0 	call	2093c <__sinit>
   20524:	003fe906 	br	204cc <_puts_r+0x5c>
   20528:	00bfffc4 	movi	r2,-1
   2052c:	003ff606 	br	20508 <_puts_r+0x98>

00020530 <puts>:
   20530:	00800134 	movhi	r2,4
   20534:	10829804 	addi	r2,r2,2656
   20538:	200b883a 	mov	r5,r4
   2053c:	11000017 	ldw	r4,0(r2)
   20540:	00204701 	jmpi	20470 <_puts_r>

00020544 <strlen>:
   20544:	208000cc 	andi	r2,r4,3
   20548:	10002026 	beq	r2,zero,205cc <strlen+0x88>
   2054c:	20800007 	ldb	r2,0(r4)
   20550:	10002026 	beq	r2,zero,205d4 <strlen+0x90>
   20554:	2005883a 	mov	r2,r4
   20558:	00000206 	br	20564 <strlen+0x20>
   2055c:	10c00007 	ldb	r3,0(r2)
   20560:	18001826 	beq	r3,zero,205c4 <strlen+0x80>
   20564:	10800044 	addi	r2,r2,1
   20568:	10c000cc 	andi	r3,r2,3
   2056c:	183ffb1e 	bne	r3,zero,2055c <strlen+0x18>
   20570:	10c00017 	ldw	r3,0(r2)
   20574:	01ffbff4 	movhi	r7,65279
   20578:	39ffbfc4 	addi	r7,r7,-257
   2057c:	00ca303a 	nor	r5,zero,r3
   20580:	01a02074 	movhi	r6,32897
   20584:	19c7883a 	add	r3,r3,r7
   20588:	31a02004 	addi	r6,r6,-32640
   2058c:	1946703a 	and	r3,r3,r5
   20590:	1986703a 	and	r3,r3,r6
   20594:	1800091e 	bne	r3,zero,205bc <strlen+0x78>
   20598:	10800104 	addi	r2,r2,4
   2059c:	10c00017 	ldw	r3,0(r2)
   205a0:	19cb883a 	add	r5,r3,r7
   205a4:	00c6303a 	nor	r3,zero,r3
   205a8:	28c6703a 	and	r3,r5,r3
   205ac:	1986703a 	and	r3,r3,r6
   205b0:	183ff926 	beq	r3,zero,20598 <strlen+0x54>
   205b4:	00000106 	br	205bc <strlen+0x78>
   205b8:	10800044 	addi	r2,r2,1
   205bc:	10c00007 	ldb	r3,0(r2)
   205c0:	183ffd1e 	bne	r3,zero,205b8 <strlen+0x74>
   205c4:	1105c83a 	sub	r2,r2,r4
   205c8:	f800283a 	ret
   205cc:	2005883a 	mov	r2,r4
   205d0:	003fe706 	br	20570 <strlen+0x2c>
   205d4:	0005883a 	mov	r2,zero
   205d8:	f800283a 	ret

000205dc <__fp_unlock>:
   205dc:	0005883a 	mov	r2,zero
   205e0:	f800283a 	ret

000205e4 <_cleanup_r>:
   205e4:	014000b4 	movhi	r5,2
   205e8:	29496504 	addi	r5,r5,9620
   205ec:	0020f181 	jmpi	20f18 <_fwalk_reent>

000205f0 <__sinit.part.1>:
   205f0:	defff704 	addi	sp,sp,-36
   205f4:	00c000b4 	movhi	r3,2
   205f8:	dfc00815 	stw	ra,32(sp)
   205fc:	ddc00715 	stw	r23,28(sp)
   20600:	dd800615 	stw	r22,24(sp)
   20604:	dd400515 	stw	r21,20(sp)
   20608:	dd000415 	stw	r20,16(sp)
   2060c:	dcc00315 	stw	r19,12(sp)
   20610:	dc800215 	stw	r18,8(sp)
   20614:	dc400115 	stw	r17,4(sp)
   20618:	dc000015 	stw	r16,0(sp)
   2061c:	18c17904 	addi	r3,r3,1508
   20620:	24000117 	ldw	r16,4(r4)
   20624:	20c00f15 	stw	r3,60(r4)
   20628:	2080bb04 	addi	r2,r4,748
   2062c:	00c000c4 	movi	r3,3
   20630:	20c0b915 	stw	r3,740(r4)
   20634:	2080ba15 	stw	r2,744(r4)
   20638:	2000b815 	stw	zero,736(r4)
   2063c:	05c00204 	movi	r23,8
   20640:	00800104 	movi	r2,4
   20644:	2025883a 	mov	r18,r4
   20648:	b80d883a 	mov	r6,r23
   2064c:	81001704 	addi	r4,r16,92
   20650:	000b883a 	mov	r5,zero
   20654:	80000015 	stw	zero,0(r16)
   20658:	80000115 	stw	zero,4(r16)
   2065c:	80000215 	stw	zero,8(r16)
   20660:	8080030d 	sth	r2,12(r16)
   20664:	80001915 	stw	zero,100(r16)
   20668:	8000038d 	sth	zero,14(r16)
   2066c:	80000415 	stw	zero,16(r16)
   20670:	80000515 	stw	zero,20(r16)
   20674:	80000615 	stw	zero,24(r16)
   20678:	0021b700 	call	21b70 <memset>
   2067c:	058000b4 	movhi	r22,2
   20680:	94400217 	ldw	r17,8(r18)
   20684:	054000b4 	movhi	r21,2
   20688:	050000b4 	movhi	r20,2
   2068c:	04c000b4 	movhi	r19,2
   20690:	b5889404 	addi	r22,r22,8784
   20694:	ad48ab04 	addi	r21,r21,8876
   20698:	a508ca04 	addi	r20,r20,9000
   2069c:	9cc8e104 	addi	r19,r19,9092
   206a0:	85800815 	stw	r22,32(r16)
   206a4:	85400915 	stw	r21,36(r16)
   206a8:	85000a15 	stw	r20,40(r16)
   206ac:	84c00b15 	stw	r19,44(r16)
   206b0:	84000715 	stw	r16,28(r16)
   206b4:	00800284 	movi	r2,10
   206b8:	8880030d 	sth	r2,12(r17)
   206bc:	00800044 	movi	r2,1
   206c0:	b80d883a 	mov	r6,r23
   206c4:	89001704 	addi	r4,r17,92
   206c8:	000b883a 	mov	r5,zero
   206cc:	88000015 	stw	zero,0(r17)
   206d0:	88000115 	stw	zero,4(r17)
   206d4:	88000215 	stw	zero,8(r17)
   206d8:	88001915 	stw	zero,100(r17)
   206dc:	8880038d 	sth	r2,14(r17)
   206e0:	88000415 	stw	zero,16(r17)
   206e4:	88000515 	stw	zero,20(r17)
   206e8:	88000615 	stw	zero,24(r17)
   206ec:	0021b700 	call	21b70 <memset>
   206f0:	94000317 	ldw	r16,12(r18)
   206f4:	00800484 	movi	r2,18
   206f8:	8c400715 	stw	r17,28(r17)
   206fc:	8d800815 	stw	r22,32(r17)
   20700:	8d400915 	stw	r21,36(r17)
   20704:	8d000a15 	stw	r20,40(r17)
   20708:	8cc00b15 	stw	r19,44(r17)
   2070c:	8080030d 	sth	r2,12(r16)
   20710:	00800084 	movi	r2,2
   20714:	80000015 	stw	zero,0(r16)
   20718:	80000115 	stw	zero,4(r16)
   2071c:	80000215 	stw	zero,8(r16)
   20720:	80001915 	stw	zero,100(r16)
   20724:	8080038d 	sth	r2,14(r16)
   20728:	80000415 	stw	zero,16(r16)
   2072c:	80000515 	stw	zero,20(r16)
   20730:	80000615 	stw	zero,24(r16)
   20734:	b80d883a 	mov	r6,r23
   20738:	000b883a 	mov	r5,zero
   2073c:	81001704 	addi	r4,r16,92
   20740:	0021b700 	call	21b70 <memset>
   20744:	00800044 	movi	r2,1
   20748:	84000715 	stw	r16,28(r16)
   2074c:	85800815 	stw	r22,32(r16)
   20750:	85400915 	stw	r21,36(r16)
   20754:	85000a15 	stw	r20,40(r16)
   20758:	84c00b15 	stw	r19,44(r16)
   2075c:	90800e15 	stw	r2,56(r18)
   20760:	dfc00817 	ldw	ra,32(sp)
   20764:	ddc00717 	ldw	r23,28(sp)
   20768:	dd800617 	ldw	r22,24(sp)
   2076c:	dd400517 	ldw	r21,20(sp)
   20770:	dd000417 	ldw	r20,16(sp)
   20774:	dcc00317 	ldw	r19,12(sp)
   20778:	dc800217 	ldw	r18,8(sp)
   2077c:	dc400117 	ldw	r17,4(sp)
   20780:	dc000017 	ldw	r16,0(sp)
   20784:	dec00904 	addi	sp,sp,36
   20788:	f800283a 	ret

0002078c <__fp_lock>:
   2078c:	0005883a 	mov	r2,zero
   20790:	f800283a 	ret

00020794 <__sfmoreglue>:
   20794:	defffc04 	addi	sp,sp,-16
   20798:	dc800215 	stw	r18,8(sp)
   2079c:	2825883a 	mov	r18,r5
   207a0:	dc000015 	stw	r16,0(sp)
   207a4:	01401a04 	movi	r5,104
   207a8:	2021883a 	mov	r16,r4
   207ac:	913fffc4 	addi	r4,r18,-1
   207b0:	dfc00315 	stw	ra,12(sp)
   207b4:	dc400115 	stw	r17,4(sp)
   207b8:	00232540 	call	23254 <__mulsi3>
   207bc:	8009883a 	mov	r4,r16
   207c0:	11401d04 	addi	r5,r2,116
   207c4:	1023883a 	mov	r17,r2
   207c8:	0020fdc0 	call	20fdc <_malloc_r>
   207cc:	1021883a 	mov	r16,r2
   207d0:	10000726 	beq	r2,zero,207f0 <__sfmoreglue+0x5c>
   207d4:	11000304 	addi	r4,r2,12
   207d8:	10000015 	stw	zero,0(r2)
   207dc:	14800115 	stw	r18,4(r2)
   207e0:	11000215 	stw	r4,8(r2)
   207e4:	89801a04 	addi	r6,r17,104
   207e8:	000b883a 	mov	r5,zero
   207ec:	0021b700 	call	21b70 <memset>
   207f0:	8005883a 	mov	r2,r16
   207f4:	dfc00317 	ldw	ra,12(sp)
   207f8:	dc800217 	ldw	r18,8(sp)
   207fc:	dc400117 	ldw	r17,4(sp)
   20800:	dc000017 	ldw	r16,0(sp)
   20804:	dec00404 	addi	sp,sp,16
   20808:	f800283a 	ret

0002080c <__sfp>:
   2080c:	defffb04 	addi	sp,sp,-20
   20810:	dc000015 	stw	r16,0(sp)
   20814:	04000134 	movhi	r16,4
   20818:	84029704 	addi	r16,r16,2652
   2081c:	dcc00315 	stw	r19,12(sp)
   20820:	2027883a 	mov	r19,r4
   20824:	81000017 	ldw	r4,0(r16)
   20828:	dfc00415 	stw	ra,16(sp)
   2082c:	dc800215 	stw	r18,8(sp)
   20830:	20800e17 	ldw	r2,56(r4)
   20834:	dc400115 	stw	r17,4(sp)
   20838:	1000021e 	bne	r2,zero,20844 <__sfp+0x38>
   2083c:	00205f00 	call	205f0 <__sinit.part.1>
   20840:	81000017 	ldw	r4,0(r16)
   20844:	2480b804 	addi	r18,r4,736
   20848:	047fffc4 	movi	r17,-1
   2084c:	91000117 	ldw	r4,4(r18)
   20850:	94000217 	ldw	r16,8(r18)
   20854:	213fffc4 	addi	r4,r4,-1
   20858:	20000a16 	blt	r4,zero,20884 <__sfp+0x78>
   2085c:	8080030f 	ldh	r2,12(r16)
   20860:	10000c26 	beq	r2,zero,20894 <__sfp+0x88>
   20864:	80c01d04 	addi	r3,r16,116
   20868:	00000206 	br	20874 <__sfp+0x68>
   2086c:	18bfe60f 	ldh	r2,-104(r3)
   20870:	10000826 	beq	r2,zero,20894 <__sfp+0x88>
   20874:	213fffc4 	addi	r4,r4,-1
   20878:	1c3ffd04 	addi	r16,r3,-12
   2087c:	18c01a04 	addi	r3,r3,104
   20880:	247ffa1e 	bne	r4,r17,2086c <__sfp+0x60>
   20884:	90800017 	ldw	r2,0(r18)
   20888:	10001d26 	beq	r2,zero,20900 <__sfp+0xf4>
   2088c:	1025883a 	mov	r18,r2
   20890:	003fee06 	br	2084c <__sfp+0x40>
   20894:	00bfffc4 	movi	r2,-1
   20898:	8080038d 	sth	r2,14(r16)
   2089c:	00800044 	movi	r2,1
   208a0:	8080030d 	sth	r2,12(r16)
   208a4:	80001915 	stw	zero,100(r16)
   208a8:	80000015 	stw	zero,0(r16)
   208ac:	80000215 	stw	zero,8(r16)
   208b0:	80000115 	stw	zero,4(r16)
   208b4:	80000415 	stw	zero,16(r16)
   208b8:	80000515 	stw	zero,20(r16)
   208bc:	80000615 	stw	zero,24(r16)
   208c0:	01800204 	movi	r6,8
   208c4:	000b883a 	mov	r5,zero
   208c8:	81001704 	addi	r4,r16,92
   208cc:	0021b700 	call	21b70 <memset>
   208d0:	8005883a 	mov	r2,r16
   208d4:	80000c15 	stw	zero,48(r16)
   208d8:	80000d15 	stw	zero,52(r16)
   208dc:	80001115 	stw	zero,68(r16)
   208e0:	80001215 	stw	zero,72(r16)
   208e4:	dfc00417 	ldw	ra,16(sp)
   208e8:	dcc00317 	ldw	r19,12(sp)
   208ec:	dc800217 	ldw	r18,8(sp)
   208f0:	dc400117 	ldw	r17,4(sp)
   208f4:	dc000017 	ldw	r16,0(sp)
   208f8:	dec00504 	addi	sp,sp,20
   208fc:	f800283a 	ret
   20900:	01400104 	movi	r5,4
   20904:	9809883a 	mov	r4,r19
   20908:	00207940 	call	20794 <__sfmoreglue>
   2090c:	90800015 	stw	r2,0(r18)
   20910:	103fde1e 	bne	r2,zero,2088c <__sfp+0x80>
   20914:	00800304 	movi	r2,12
   20918:	98800015 	stw	r2,0(r19)
   2091c:	0005883a 	mov	r2,zero
   20920:	003ff006 	br	208e4 <__sfp+0xd8>

00020924 <_cleanup>:
   20924:	00800134 	movhi	r2,4
   20928:	10829704 	addi	r2,r2,2652
   2092c:	11000017 	ldw	r4,0(r2)
   20930:	014000b4 	movhi	r5,2
   20934:	29496504 	addi	r5,r5,9620
   20938:	0020f181 	jmpi	20f18 <_fwalk_reent>

0002093c <__sinit>:
   2093c:	20800e17 	ldw	r2,56(r4)
   20940:	10000126 	beq	r2,zero,20948 <__sinit+0xc>
   20944:	f800283a 	ret
   20948:	00205f01 	jmpi	205f0 <__sinit.part.1>

0002094c <__sfp_lock_acquire>:
   2094c:	f800283a 	ret

00020950 <__sfp_lock_release>:
   20950:	f800283a 	ret

00020954 <__sinit_lock_acquire>:
   20954:	f800283a 	ret

00020958 <__sinit_lock_release>:
   20958:	f800283a 	ret

0002095c <__fp_lock_all>:
   2095c:	00800134 	movhi	r2,4
   20960:	10829804 	addi	r2,r2,2656
   20964:	11000017 	ldw	r4,0(r2)
   20968:	014000b4 	movhi	r5,2
   2096c:	2941e304 	addi	r5,r5,1932
   20970:	0020e541 	jmpi	20e54 <_fwalk>

00020974 <__fp_unlock_all>:
   20974:	00800134 	movhi	r2,4
   20978:	10829804 	addi	r2,r2,2656
   2097c:	11000017 	ldw	r4,0(r2)
   20980:	014000b4 	movhi	r5,2
   20984:	29417704 	addi	r5,r5,1500
   20988:	0020e541 	jmpi	20e54 <_fwalk>

0002098c <__sfvwrite_r>:
   2098c:	30800217 	ldw	r2,8(r6)
   20990:	10006726 	beq	r2,zero,20b30 <__sfvwrite_r+0x1a4>
   20994:	28c0030b 	ldhu	r3,12(r5)
   20998:	defff404 	addi	sp,sp,-48
   2099c:	dd400715 	stw	r21,28(sp)
   209a0:	dd000615 	stw	r20,24(sp)
   209a4:	dc000215 	stw	r16,8(sp)
   209a8:	dfc00b15 	stw	ra,44(sp)
   209ac:	df000a15 	stw	fp,40(sp)
   209b0:	ddc00915 	stw	r23,36(sp)
   209b4:	dd800815 	stw	r22,32(sp)
   209b8:	dcc00515 	stw	r19,20(sp)
   209bc:	dc800415 	stw	r18,16(sp)
   209c0:	dc400315 	stw	r17,12(sp)
   209c4:	1880020c 	andi	r2,r3,8
   209c8:	2821883a 	mov	r16,r5
   209cc:	202b883a 	mov	r21,r4
   209d0:	3029883a 	mov	r20,r6
   209d4:	10002726 	beq	r2,zero,20a74 <__sfvwrite_r+0xe8>
   209d8:	28800417 	ldw	r2,16(r5)
   209dc:	10002526 	beq	r2,zero,20a74 <__sfvwrite_r+0xe8>
   209e0:	1880008c 	andi	r2,r3,2
   209e4:	a4400017 	ldw	r17,0(r20)
   209e8:	10002a26 	beq	r2,zero,20a94 <__sfvwrite_r+0x108>
   209ec:	05a00034 	movhi	r22,32768
   209f0:	0027883a 	mov	r19,zero
   209f4:	0025883a 	mov	r18,zero
   209f8:	b5bf0004 	addi	r22,r22,-1024
   209fc:	980d883a 	mov	r6,r19
   20a00:	a809883a 	mov	r4,r21
   20a04:	90004626 	beq	r18,zero,20b20 <__sfvwrite_r+0x194>
   20a08:	900f883a 	mov	r7,r18
   20a0c:	b480022e 	bgeu	r22,r18,20a18 <__sfvwrite_r+0x8c>
   20a10:	01e00034 	movhi	r7,32768
   20a14:	39ff0004 	addi	r7,r7,-1024
   20a18:	80800917 	ldw	r2,36(r16)
   20a1c:	81400717 	ldw	r5,28(r16)
   20a20:	103ee83a 	callr	r2
   20a24:	00805a0e 	bge	zero,r2,20b90 <__sfvwrite_r+0x204>
   20a28:	a0c00217 	ldw	r3,8(r20)
   20a2c:	98a7883a 	add	r19,r19,r2
   20a30:	90a5c83a 	sub	r18,r18,r2
   20a34:	1885c83a 	sub	r2,r3,r2
   20a38:	a0800215 	stw	r2,8(r20)
   20a3c:	103fef1e 	bne	r2,zero,209fc <__sfvwrite_r+0x70>
   20a40:	0005883a 	mov	r2,zero
   20a44:	dfc00b17 	ldw	ra,44(sp)
   20a48:	df000a17 	ldw	fp,40(sp)
   20a4c:	ddc00917 	ldw	r23,36(sp)
   20a50:	dd800817 	ldw	r22,32(sp)
   20a54:	dd400717 	ldw	r21,28(sp)
   20a58:	dd000617 	ldw	r20,24(sp)
   20a5c:	dcc00517 	ldw	r19,20(sp)
   20a60:	dc800417 	ldw	r18,16(sp)
   20a64:	dc400317 	ldw	r17,12(sp)
   20a68:	dc000217 	ldw	r16,8(sp)
   20a6c:	dec00c04 	addi	sp,sp,48
   20a70:	f800283a 	ret
   20a74:	800b883a 	mov	r5,r16
   20a78:	a809883a 	mov	r4,r21
   20a7c:	00223ec0 	call	223ec <__swsetup_r>
   20a80:	1000ee1e 	bne	r2,zero,20e3c <__sfvwrite_r+0x4b0>
   20a84:	80c0030b 	ldhu	r3,12(r16)
   20a88:	a4400017 	ldw	r17,0(r20)
   20a8c:	1880008c 	andi	r2,r3,2
   20a90:	103fd61e 	bne	r2,zero,209ec <__sfvwrite_r+0x60>
   20a94:	1880004c 	andi	r2,r3,1
   20a98:	1000421e 	bne	r2,zero,20ba4 <__sfvwrite_r+0x218>
   20a9c:	0039883a 	mov	fp,zero
   20aa0:	0025883a 	mov	r18,zero
   20aa4:	90001a26 	beq	r18,zero,20b10 <__sfvwrite_r+0x184>
   20aa8:	1880800c 	andi	r2,r3,512
   20aac:	84c00217 	ldw	r19,8(r16)
   20ab0:	10002126 	beq	r2,zero,20b38 <__sfvwrite_r+0x1ac>
   20ab4:	982f883a 	mov	r23,r19
   20ab8:	94c09636 	bltu	r18,r19,20d14 <__sfvwrite_r+0x388>
   20abc:	1881200c 	andi	r2,r3,1152
   20ac0:	1000a11e 	bne	r2,zero,20d48 <__sfvwrite_r+0x3bc>
   20ac4:	81000017 	ldw	r4,0(r16)
   20ac8:	b80d883a 	mov	r6,r23
   20acc:	e00b883a 	mov	r5,fp
   20ad0:	0021a140 	call	21a14 <memmove>
   20ad4:	80c00217 	ldw	r3,8(r16)
   20ad8:	81000017 	ldw	r4,0(r16)
   20adc:	9005883a 	mov	r2,r18
   20ae0:	1ce7c83a 	sub	r19,r3,r19
   20ae4:	25cf883a 	add	r7,r4,r23
   20ae8:	84c00215 	stw	r19,8(r16)
   20aec:	81c00015 	stw	r7,0(r16)
   20af0:	a0c00217 	ldw	r3,8(r20)
   20af4:	e0b9883a 	add	fp,fp,r2
   20af8:	90a5c83a 	sub	r18,r18,r2
   20afc:	18a7c83a 	sub	r19,r3,r2
   20b00:	a4c00215 	stw	r19,8(r20)
   20b04:	983fce26 	beq	r19,zero,20a40 <__sfvwrite_r+0xb4>
   20b08:	80c0030b 	ldhu	r3,12(r16)
   20b0c:	903fe61e 	bne	r18,zero,20aa8 <__sfvwrite_r+0x11c>
   20b10:	8f000017 	ldw	fp,0(r17)
   20b14:	8c800117 	ldw	r18,4(r17)
   20b18:	8c400204 	addi	r17,r17,8
   20b1c:	003fe106 	br	20aa4 <__sfvwrite_r+0x118>
   20b20:	8cc00017 	ldw	r19,0(r17)
   20b24:	8c800117 	ldw	r18,4(r17)
   20b28:	8c400204 	addi	r17,r17,8
   20b2c:	003fb306 	br	209fc <__sfvwrite_r+0x70>
   20b30:	0005883a 	mov	r2,zero
   20b34:	f800283a 	ret
   20b38:	81000017 	ldw	r4,0(r16)
   20b3c:	80800417 	ldw	r2,16(r16)
   20b40:	11005a36 	bltu	r2,r4,20cac <__sfvwrite_r+0x320>
   20b44:	85c00517 	ldw	r23,20(r16)
   20b48:	95c05836 	bltu	r18,r23,20cac <__sfvwrite_r+0x320>
   20b4c:	00a00034 	movhi	r2,32768
   20b50:	10bfffc4 	addi	r2,r2,-1
   20b54:	9009883a 	mov	r4,r18
   20b58:	1480012e 	bgeu	r2,r18,20b60 <__sfvwrite_r+0x1d4>
   20b5c:	1009883a 	mov	r4,r2
   20b60:	b80b883a 	mov	r5,r23
   20b64:	00230a00 	call	230a0 <__divsi3>
   20b68:	b80b883a 	mov	r5,r23
   20b6c:	1009883a 	mov	r4,r2
   20b70:	00232540 	call	23254 <__mulsi3>
   20b74:	81400717 	ldw	r5,28(r16)
   20b78:	80c00917 	ldw	r3,36(r16)
   20b7c:	100f883a 	mov	r7,r2
   20b80:	e00d883a 	mov	r6,fp
   20b84:	a809883a 	mov	r4,r21
   20b88:	183ee83a 	callr	r3
   20b8c:	00bfd816 	blt	zero,r2,20af0 <__sfvwrite_r+0x164>
   20b90:	8080030b 	ldhu	r2,12(r16)
   20b94:	10801014 	ori	r2,r2,64
   20b98:	8080030d 	sth	r2,12(r16)
   20b9c:	00bfffc4 	movi	r2,-1
   20ba0:	003fa806 	br	20a44 <__sfvwrite_r+0xb8>
   20ba4:	0027883a 	mov	r19,zero
   20ba8:	0011883a 	mov	r8,zero
   20bac:	0039883a 	mov	fp,zero
   20bb0:	0025883a 	mov	r18,zero
   20bb4:	90001f26 	beq	r18,zero,20c34 <__sfvwrite_r+0x2a8>
   20bb8:	40005a26 	beq	r8,zero,20d24 <__sfvwrite_r+0x398>
   20bbc:	982d883a 	mov	r22,r19
   20bc0:	94c0012e 	bgeu	r18,r19,20bc8 <__sfvwrite_r+0x23c>
   20bc4:	902d883a 	mov	r22,r18
   20bc8:	81000017 	ldw	r4,0(r16)
   20bcc:	80800417 	ldw	r2,16(r16)
   20bd0:	b02f883a 	mov	r23,r22
   20bd4:	81c00517 	ldw	r7,20(r16)
   20bd8:	1100032e 	bgeu	r2,r4,20be8 <__sfvwrite_r+0x25c>
   20bdc:	80c00217 	ldw	r3,8(r16)
   20be0:	38c7883a 	add	r3,r7,r3
   20be4:	1d801816 	blt	r3,r22,20c48 <__sfvwrite_r+0x2bc>
   20be8:	b1c03e16 	blt	r22,r7,20ce4 <__sfvwrite_r+0x358>
   20bec:	80800917 	ldw	r2,36(r16)
   20bf0:	81400717 	ldw	r5,28(r16)
   20bf4:	e00d883a 	mov	r6,fp
   20bf8:	da000115 	stw	r8,4(sp)
   20bfc:	a809883a 	mov	r4,r21
   20c00:	103ee83a 	callr	r2
   20c04:	102f883a 	mov	r23,r2
   20c08:	da000117 	ldw	r8,4(sp)
   20c0c:	00bfe00e 	bge	zero,r2,20b90 <__sfvwrite_r+0x204>
   20c10:	9de7c83a 	sub	r19,r19,r23
   20c14:	98001f26 	beq	r19,zero,20c94 <__sfvwrite_r+0x308>
   20c18:	a0800217 	ldw	r2,8(r20)
   20c1c:	e5f9883a 	add	fp,fp,r23
   20c20:	95e5c83a 	sub	r18,r18,r23
   20c24:	15efc83a 	sub	r23,r2,r23
   20c28:	a5c00215 	stw	r23,8(r20)
   20c2c:	b83f8426 	beq	r23,zero,20a40 <__sfvwrite_r+0xb4>
   20c30:	903fe11e 	bne	r18,zero,20bb8 <__sfvwrite_r+0x22c>
   20c34:	8f000017 	ldw	fp,0(r17)
   20c38:	8c800117 	ldw	r18,4(r17)
   20c3c:	0011883a 	mov	r8,zero
   20c40:	8c400204 	addi	r17,r17,8
   20c44:	003fdb06 	br	20bb4 <__sfvwrite_r+0x228>
   20c48:	180d883a 	mov	r6,r3
   20c4c:	e00b883a 	mov	r5,fp
   20c50:	da000115 	stw	r8,4(sp)
   20c54:	d8c00015 	stw	r3,0(sp)
   20c58:	0021a140 	call	21a14 <memmove>
   20c5c:	d8c00017 	ldw	r3,0(sp)
   20c60:	80800017 	ldw	r2,0(r16)
   20c64:	800b883a 	mov	r5,r16
   20c68:	a809883a 	mov	r4,r21
   20c6c:	10c5883a 	add	r2,r2,r3
   20c70:	80800015 	stw	r2,0(r16)
   20c74:	d8c00015 	stw	r3,0(sp)
   20c78:	00228b40 	call	228b4 <_fflush_r>
   20c7c:	d8c00017 	ldw	r3,0(sp)
   20c80:	da000117 	ldw	r8,4(sp)
   20c84:	103fc21e 	bne	r2,zero,20b90 <__sfvwrite_r+0x204>
   20c88:	182f883a 	mov	r23,r3
   20c8c:	9de7c83a 	sub	r19,r19,r23
   20c90:	983fe11e 	bne	r19,zero,20c18 <__sfvwrite_r+0x28c>
   20c94:	800b883a 	mov	r5,r16
   20c98:	a809883a 	mov	r4,r21
   20c9c:	00228b40 	call	228b4 <_fflush_r>
   20ca0:	103fbb1e 	bne	r2,zero,20b90 <__sfvwrite_r+0x204>
   20ca4:	0011883a 	mov	r8,zero
   20ca8:	003fdb06 	br	20c18 <__sfvwrite_r+0x28c>
   20cac:	94c0012e 	bgeu	r18,r19,20cb4 <__sfvwrite_r+0x328>
   20cb0:	9027883a 	mov	r19,r18
   20cb4:	980d883a 	mov	r6,r19
   20cb8:	e00b883a 	mov	r5,fp
   20cbc:	0021a140 	call	21a14 <memmove>
   20cc0:	80800217 	ldw	r2,8(r16)
   20cc4:	80c00017 	ldw	r3,0(r16)
   20cc8:	14c5c83a 	sub	r2,r2,r19
   20ccc:	1cc7883a 	add	r3,r3,r19
   20cd0:	80800215 	stw	r2,8(r16)
   20cd4:	80c00015 	stw	r3,0(r16)
   20cd8:	10004326 	beq	r2,zero,20de8 <__sfvwrite_r+0x45c>
   20cdc:	9805883a 	mov	r2,r19
   20ce0:	003f8306 	br	20af0 <__sfvwrite_r+0x164>
   20ce4:	b00d883a 	mov	r6,r22
   20ce8:	e00b883a 	mov	r5,fp
   20cec:	da000115 	stw	r8,4(sp)
   20cf0:	0021a140 	call	21a14 <memmove>
   20cf4:	80800217 	ldw	r2,8(r16)
   20cf8:	80c00017 	ldw	r3,0(r16)
   20cfc:	da000117 	ldw	r8,4(sp)
   20d00:	1585c83a 	sub	r2,r2,r22
   20d04:	1dad883a 	add	r22,r3,r22
   20d08:	80800215 	stw	r2,8(r16)
   20d0c:	85800015 	stw	r22,0(r16)
   20d10:	003fbf06 	br	20c10 <__sfvwrite_r+0x284>
   20d14:	81000017 	ldw	r4,0(r16)
   20d18:	9027883a 	mov	r19,r18
   20d1c:	902f883a 	mov	r23,r18
   20d20:	003f6906 	br	20ac8 <__sfvwrite_r+0x13c>
   20d24:	900d883a 	mov	r6,r18
   20d28:	01400284 	movi	r5,10
   20d2c:	e009883a 	mov	r4,fp
   20d30:	00217e80 	call	217e8 <memchr>
   20d34:	10003e26 	beq	r2,zero,20e30 <__sfvwrite_r+0x4a4>
   20d38:	10800044 	addi	r2,r2,1
   20d3c:	1727c83a 	sub	r19,r2,fp
   20d40:	02000044 	movi	r8,1
   20d44:	003f9d06 	br	20bbc <__sfvwrite_r+0x230>
   20d48:	80800517 	ldw	r2,20(r16)
   20d4c:	81400417 	ldw	r5,16(r16)
   20d50:	81c00017 	ldw	r7,0(r16)
   20d54:	10a7883a 	add	r19,r2,r2
   20d58:	9885883a 	add	r2,r19,r2
   20d5c:	1026d7fa 	srli	r19,r2,31
   20d60:	396dc83a 	sub	r22,r7,r5
   20d64:	b1000044 	addi	r4,r22,1
   20d68:	9885883a 	add	r2,r19,r2
   20d6c:	1027d07a 	srai	r19,r2,1
   20d70:	2485883a 	add	r2,r4,r18
   20d74:	980d883a 	mov	r6,r19
   20d78:	9880022e 	bgeu	r19,r2,20d84 <__sfvwrite_r+0x3f8>
   20d7c:	1027883a 	mov	r19,r2
   20d80:	100d883a 	mov	r6,r2
   20d84:	18c1000c 	andi	r3,r3,1024
   20d88:	18001c26 	beq	r3,zero,20dfc <__sfvwrite_r+0x470>
   20d8c:	300b883a 	mov	r5,r6
   20d90:	a809883a 	mov	r4,r21
   20d94:	0020fdc0 	call	20fdc <_malloc_r>
   20d98:	102f883a 	mov	r23,r2
   20d9c:	10002926 	beq	r2,zero,20e44 <__sfvwrite_r+0x4b8>
   20da0:	81400417 	ldw	r5,16(r16)
   20da4:	b00d883a 	mov	r6,r22
   20da8:	1009883a 	mov	r4,r2
   20dac:	00218cc0 	call	218cc <memcpy>
   20db0:	8080030b 	ldhu	r2,12(r16)
   20db4:	00fedfc4 	movi	r3,-1153
   20db8:	10c4703a 	and	r2,r2,r3
   20dbc:	10802014 	ori	r2,r2,128
   20dc0:	8080030d 	sth	r2,12(r16)
   20dc4:	bd89883a 	add	r4,r23,r22
   20dc8:	9d8fc83a 	sub	r7,r19,r22
   20dcc:	85c00415 	stw	r23,16(r16)
   20dd0:	84c00515 	stw	r19,20(r16)
   20dd4:	81000015 	stw	r4,0(r16)
   20dd8:	9027883a 	mov	r19,r18
   20ddc:	81c00215 	stw	r7,8(r16)
   20de0:	902f883a 	mov	r23,r18
   20de4:	003f3806 	br	20ac8 <__sfvwrite_r+0x13c>
   20de8:	800b883a 	mov	r5,r16
   20dec:	a809883a 	mov	r4,r21
   20df0:	00228b40 	call	228b4 <_fflush_r>
   20df4:	103fb926 	beq	r2,zero,20cdc <__sfvwrite_r+0x350>
   20df8:	003f6506 	br	20b90 <__sfvwrite_r+0x204>
   20dfc:	a809883a 	mov	r4,r21
   20e00:	0021c980 	call	21c98 <_realloc_r>
   20e04:	102f883a 	mov	r23,r2
   20e08:	103fee1e 	bne	r2,zero,20dc4 <__sfvwrite_r+0x438>
   20e0c:	81400417 	ldw	r5,16(r16)
   20e10:	a809883a 	mov	r4,r21
   20e14:	0022a640 	call	22a64 <_free_r>
   20e18:	8080030b 	ldhu	r2,12(r16)
   20e1c:	00ffdfc4 	movi	r3,-129
   20e20:	1884703a 	and	r2,r3,r2
   20e24:	00c00304 	movi	r3,12
   20e28:	a8c00015 	stw	r3,0(r21)
   20e2c:	003f5906 	br	20b94 <__sfvwrite_r+0x208>
   20e30:	94c00044 	addi	r19,r18,1
   20e34:	02000044 	movi	r8,1
   20e38:	003f6006 	br	20bbc <__sfvwrite_r+0x230>
   20e3c:	00bfffc4 	movi	r2,-1
   20e40:	003f0006 	br	20a44 <__sfvwrite_r+0xb8>
   20e44:	00800304 	movi	r2,12
   20e48:	a8800015 	stw	r2,0(r21)
   20e4c:	8080030b 	ldhu	r2,12(r16)
   20e50:	003f5006 	br	20b94 <__sfvwrite_r+0x208>

00020e54 <_fwalk>:
   20e54:	defff704 	addi	sp,sp,-36
   20e58:	dd000415 	stw	r20,16(sp)
   20e5c:	dfc00815 	stw	ra,32(sp)
   20e60:	ddc00715 	stw	r23,28(sp)
   20e64:	dd800615 	stw	r22,24(sp)
   20e68:	dd400515 	stw	r21,20(sp)
   20e6c:	dcc00315 	stw	r19,12(sp)
   20e70:	dc800215 	stw	r18,8(sp)
   20e74:	dc400115 	stw	r17,4(sp)
   20e78:	dc000015 	stw	r16,0(sp)
   20e7c:	2500b804 	addi	r20,r4,736
   20e80:	a0002326 	beq	r20,zero,20f10 <_fwalk+0xbc>
   20e84:	282b883a 	mov	r21,r5
   20e88:	002f883a 	mov	r23,zero
   20e8c:	05800044 	movi	r22,1
   20e90:	04ffffc4 	movi	r19,-1
   20e94:	a4400117 	ldw	r17,4(r20)
   20e98:	a4800217 	ldw	r18,8(r20)
   20e9c:	8c7fffc4 	addi	r17,r17,-1
   20ea0:	88000d16 	blt	r17,zero,20ed8 <_fwalk+0x84>
   20ea4:	94000304 	addi	r16,r18,12
   20ea8:	94800384 	addi	r18,r18,14
   20eac:	8080000b 	ldhu	r2,0(r16)
   20eb0:	8c7fffc4 	addi	r17,r17,-1
   20eb4:	813ffd04 	addi	r4,r16,-12
   20eb8:	b080042e 	bgeu	r22,r2,20ecc <_fwalk+0x78>
   20ebc:	9080000f 	ldh	r2,0(r18)
   20ec0:	14c00226 	beq	r2,r19,20ecc <_fwalk+0x78>
   20ec4:	a83ee83a 	callr	r21
   20ec8:	b8aeb03a 	or	r23,r23,r2
   20ecc:	84001a04 	addi	r16,r16,104
   20ed0:	94801a04 	addi	r18,r18,104
   20ed4:	8cfff51e 	bne	r17,r19,20eac <_fwalk+0x58>
   20ed8:	a5000017 	ldw	r20,0(r20)
   20edc:	a03fed1e 	bne	r20,zero,20e94 <_fwalk+0x40>
   20ee0:	b805883a 	mov	r2,r23
   20ee4:	dfc00817 	ldw	ra,32(sp)
   20ee8:	ddc00717 	ldw	r23,28(sp)
   20eec:	dd800617 	ldw	r22,24(sp)
   20ef0:	dd400517 	ldw	r21,20(sp)
   20ef4:	dd000417 	ldw	r20,16(sp)
   20ef8:	dcc00317 	ldw	r19,12(sp)
   20efc:	dc800217 	ldw	r18,8(sp)
   20f00:	dc400117 	ldw	r17,4(sp)
   20f04:	dc000017 	ldw	r16,0(sp)
   20f08:	dec00904 	addi	sp,sp,36
   20f0c:	f800283a 	ret
   20f10:	002f883a 	mov	r23,zero
   20f14:	003ff206 	br	20ee0 <_fwalk+0x8c>

00020f18 <_fwalk_reent>:
   20f18:	defff704 	addi	sp,sp,-36
   20f1c:	dd000415 	stw	r20,16(sp)
   20f20:	dfc00815 	stw	ra,32(sp)
   20f24:	ddc00715 	stw	r23,28(sp)
   20f28:	dd800615 	stw	r22,24(sp)
   20f2c:	dd400515 	stw	r21,20(sp)
   20f30:	dcc00315 	stw	r19,12(sp)
   20f34:	dc800215 	stw	r18,8(sp)
   20f38:	dc400115 	stw	r17,4(sp)
   20f3c:	dc000015 	stw	r16,0(sp)
   20f40:	2500b804 	addi	r20,r4,736
   20f44:	a0002326 	beq	r20,zero,20fd4 <_fwalk_reent+0xbc>
   20f48:	282b883a 	mov	r21,r5
   20f4c:	2027883a 	mov	r19,r4
   20f50:	002f883a 	mov	r23,zero
   20f54:	05800044 	movi	r22,1
   20f58:	04bfffc4 	movi	r18,-1
   20f5c:	a4400117 	ldw	r17,4(r20)
   20f60:	a4000217 	ldw	r16,8(r20)
   20f64:	8c7fffc4 	addi	r17,r17,-1
   20f68:	88000c16 	blt	r17,zero,20f9c <_fwalk_reent+0x84>
   20f6c:	84000304 	addi	r16,r16,12
   20f70:	8080000b 	ldhu	r2,0(r16)
   20f74:	8c7fffc4 	addi	r17,r17,-1
   20f78:	817ffd04 	addi	r5,r16,-12
   20f7c:	b080052e 	bgeu	r22,r2,20f94 <_fwalk_reent+0x7c>
   20f80:	8080008f 	ldh	r2,2(r16)
   20f84:	9809883a 	mov	r4,r19
   20f88:	14800226 	beq	r2,r18,20f94 <_fwalk_reent+0x7c>
   20f8c:	a83ee83a 	callr	r21
   20f90:	b8aeb03a 	or	r23,r23,r2
   20f94:	84001a04 	addi	r16,r16,104
   20f98:	8cbff51e 	bne	r17,r18,20f70 <_fwalk_reent+0x58>
   20f9c:	a5000017 	ldw	r20,0(r20)
   20fa0:	a03fee1e 	bne	r20,zero,20f5c <_fwalk_reent+0x44>
   20fa4:	b805883a 	mov	r2,r23
   20fa8:	dfc00817 	ldw	ra,32(sp)
   20fac:	ddc00717 	ldw	r23,28(sp)
   20fb0:	dd800617 	ldw	r22,24(sp)
   20fb4:	dd400517 	ldw	r21,20(sp)
   20fb8:	dd000417 	ldw	r20,16(sp)
   20fbc:	dcc00317 	ldw	r19,12(sp)
   20fc0:	dc800217 	ldw	r18,8(sp)
   20fc4:	dc400117 	ldw	r17,4(sp)
   20fc8:	dc000017 	ldw	r16,0(sp)
   20fcc:	dec00904 	addi	sp,sp,36
   20fd0:	f800283a 	ret
   20fd4:	002f883a 	mov	r23,zero
   20fd8:	003ff206 	br	20fa4 <_fwalk_reent+0x8c>

00020fdc <_malloc_r>:
   20fdc:	defff504 	addi	sp,sp,-44
   20fe0:	dc800315 	stw	r18,12(sp)
   20fe4:	dfc00a15 	stw	ra,40(sp)
   20fe8:	df000915 	stw	fp,36(sp)
   20fec:	ddc00815 	stw	r23,32(sp)
   20ff0:	dd800715 	stw	r22,28(sp)
   20ff4:	dd400615 	stw	r21,24(sp)
   20ff8:	dd000515 	stw	r20,20(sp)
   20ffc:	dcc00415 	stw	r19,16(sp)
   21000:	dc400215 	stw	r17,8(sp)
   21004:	dc000115 	stw	r16,4(sp)
   21008:	288002c4 	addi	r2,r5,11
   2100c:	00c00584 	movi	r3,22
   21010:	2025883a 	mov	r18,r4
   21014:	18807f2e 	bgeu	r3,r2,21214 <_malloc_r+0x238>
   21018:	047ffe04 	movi	r17,-8
   2101c:	1462703a 	and	r17,r2,r17
   21020:	8800a316 	blt	r17,zero,212b0 <_malloc_r+0x2d4>
   21024:	8940a236 	bltu	r17,r5,212b0 <_malloc_r+0x2d4>
   21028:	00239980 	call	23998 <__malloc_lock>
   2102c:	00807dc4 	movi	r2,503
   21030:	1441e92e 	bgeu	r2,r17,217d8 <_malloc_r+0x7fc>
   21034:	8804d27a 	srli	r2,r17,9
   21038:	1000a126 	beq	r2,zero,212c0 <_malloc_r+0x2e4>
   2103c:	00c00104 	movi	r3,4
   21040:	18811e36 	bltu	r3,r2,214bc <_malloc_r+0x4e0>
   21044:	8804d1ba 	srli	r2,r17,6
   21048:	12000e44 	addi	r8,r2,57
   2104c:	11c00e04 	addi	r7,r2,56
   21050:	4209883a 	add	r4,r8,r8
   21054:	04c00134 	movhi	r19,4
   21058:	2109883a 	add	r4,r4,r4
   2105c:	9cc12004 	addi	r19,r19,1152
   21060:	2109883a 	add	r4,r4,r4
   21064:	9909883a 	add	r4,r19,r4
   21068:	24000117 	ldw	r16,4(r4)
   2106c:	213ffe04 	addi	r4,r4,-8
   21070:	24009726 	beq	r4,r16,212d0 <_malloc_r+0x2f4>
   21074:	80800117 	ldw	r2,4(r16)
   21078:	01bfff04 	movi	r6,-4
   2107c:	014003c4 	movi	r5,15
   21080:	1184703a 	and	r2,r2,r6
   21084:	1447c83a 	sub	r3,r2,r17
   21088:	28c00716 	blt	r5,r3,210a8 <_malloc_r+0xcc>
   2108c:	1800920e 	bge	r3,zero,212d8 <_malloc_r+0x2fc>
   21090:	84000317 	ldw	r16,12(r16)
   21094:	24008e26 	beq	r4,r16,212d0 <_malloc_r+0x2f4>
   21098:	80800117 	ldw	r2,4(r16)
   2109c:	1184703a 	and	r2,r2,r6
   210a0:	1447c83a 	sub	r3,r2,r17
   210a4:	28fff90e 	bge	r5,r3,2108c <_malloc_r+0xb0>
   210a8:	3809883a 	mov	r4,r7
   210ac:	01800134 	movhi	r6,4
   210b0:	9c000417 	ldw	r16,16(r19)
   210b4:	31812004 	addi	r6,r6,1152
   210b8:	32000204 	addi	r8,r6,8
   210bc:	82013426 	beq	r16,r8,21590 <_malloc_r+0x5b4>
   210c0:	80c00117 	ldw	r3,4(r16)
   210c4:	00bfff04 	movi	r2,-4
   210c8:	188e703a 	and	r7,r3,r2
   210cc:	3c45c83a 	sub	r2,r7,r17
   210d0:	00c003c4 	movi	r3,15
   210d4:	18811f16 	blt	r3,r2,21554 <_malloc_r+0x578>
   210d8:	32000515 	stw	r8,20(r6)
   210dc:	32000415 	stw	r8,16(r6)
   210e0:	10007f0e 	bge	r2,zero,212e0 <_malloc_r+0x304>
   210e4:	00807fc4 	movi	r2,511
   210e8:	11c0fd36 	bltu	r2,r7,214e0 <_malloc_r+0x504>
   210ec:	3806d0fa 	srli	r3,r7,3
   210f0:	01c00044 	movi	r7,1
   210f4:	30800117 	ldw	r2,4(r6)
   210f8:	19400044 	addi	r5,r3,1
   210fc:	294b883a 	add	r5,r5,r5
   21100:	1807d0ba 	srai	r3,r3,2
   21104:	294b883a 	add	r5,r5,r5
   21108:	294b883a 	add	r5,r5,r5
   2110c:	298b883a 	add	r5,r5,r6
   21110:	38c6983a 	sll	r3,r7,r3
   21114:	29c00017 	ldw	r7,0(r5)
   21118:	2a7ffe04 	addi	r9,r5,-8
   2111c:	1886b03a 	or	r3,r3,r2
   21120:	82400315 	stw	r9,12(r16)
   21124:	81c00215 	stw	r7,8(r16)
   21128:	30c00115 	stw	r3,4(r6)
   2112c:	2c000015 	stw	r16,0(r5)
   21130:	3c000315 	stw	r16,12(r7)
   21134:	2005d0ba 	srai	r2,r4,2
   21138:	01400044 	movi	r5,1
   2113c:	288a983a 	sll	r5,r5,r2
   21140:	19406f36 	bltu	r3,r5,21300 <_malloc_r+0x324>
   21144:	28c4703a 	and	r2,r5,r3
   21148:	10000a1e 	bne	r2,zero,21174 <_malloc_r+0x198>
   2114c:	00bfff04 	movi	r2,-4
   21150:	294b883a 	add	r5,r5,r5
   21154:	2088703a 	and	r4,r4,r2
   21158:	28c4703a 	and	r2,r5,r3
   2115c:	21000104 	addi	r4,r4,4
   21160:	1000041e 	bne	r2,zero,21174 <_malloc_r+0x198>
   21164:	294b883a 	add	r5,r5,r5
   21168:	28c4703a 	and	r2,r5,r3
   2116c:	21000104 	addi	r4,r4,4
   21170:	103ffc26 	beq	r2,zero,21164 <_malloc_r+0x188>
   21174:	02bfff04 	movi	r10,-4
   21178:	024003c4 	movi	r9,15
   2117c:	21800044 	addi	r6,r4,1
   21180:	318d883a 	add	r6,r6,r6
   21184:	318d883a 	add	r6,r6,r6
   21188:	318d883a 	add	r6,r6,r6
   2118c:	998d883a 	add	r6,r19,r6
   21190:	333ffe04 	addi	r12,r6,-8
   21194:	2017883a 	mov	r11,r4
   21198:	31800104 	addi	r6,r6,4
   2119c:	34000017 	ldw	r16,0(r6)
   211a0:	31fffd04 	addi	r7,r6,-12
   211a4:	81c0041e 	bne	r16,r7,211b8 <_malloc_r+0x1dc>
   211a8:	0000fb06 	br	21598 <_malloc_r+0x5bc>
   211ac:	1801030e 	bge	r3,zero,215bc <_malloc_r+0x5e0>
   211b0:	84000317 	ldw	r16,12(r16)
   211b4:	81c0f826 	beq	r16,r7,21598 <_malloc_r+0x5bc>
   211b8:	80800117 	ldw	r2,4(r16)
   211bc:	1284703a 	and	r2,r2,r10
   211c0:	1447c83a 	sub	r3,r2,r17
   211c4:	48fff90e 	bge	r9,r3,211ac <_malloc_r+0x1d0>
   211c8:	80800317 	ldw	r2,12(r16)
   211cc:	81000217 	ldw	r4,8(r16)
   211d0:	89400054 	ori	r5,r17,1
   211d4:	81400115 	stw	r5,4(r16)
   211d8:	20800315 	stw	r2,12(r4)
   211dc:	11000215 	stw	r4,8(r2)
   211e0:	8463883a 	add	r17,r16,r17
   211e4:	9c400515 	stw	r17,20(r19)
   211e8:	9c400415 	stw	r17,16(r19)
   211ec:	18800054 	ori	r2,r3,1
   211f0:	88800115 	stw	r2,4(r17)
   211f4:	8a000315 	stw	r8,12(r17)
   211f8:	8a000215 	stw	r8,8(r17)
   211fc:	88e3883a 	add	r17,r17,r3
   21200:	88c00015 	stw	r3,0(r17)
   21204:	9009883a 	mov	r4,r18
   21208:	00239bc0 	call	239bc <__malloc_unlock>
   2120c:	80800204 	addi	r2,r16,8
   21210:	00001b06 	br	21280 <_malloc_r+0x2a4>
   21214:	04400404 	movi	r17,16
   21218:	89402536 	bltu	r17,r5,212b0 <_malloc_r+0x2d4>
   2121c:	00239980 	call	23998 <__malloc_lock>
   21220:	00800184 	movi	r2,6
   21224:	01000084 	movi	r4,2
   21228:	04c00134 	movhi	r19,4
   2122c:	1085883a 	add	r2,r2,r2
   21230:	9cc12004 	addi	r19,r19,1152
   21234:	1085883a 	add	r2,r2,r2
   21238:	9885883a 	add	r2,r19,r2
   2123c:	14000117 	ldw	r16,4(r2)
   21240:	10fffe04 	addi	r3,r2,-8
   21244:	80c0d926 	beq	r16,r3,215ac <_malloc_r+0x5d0>
   21248:	80c00117 	ldw	r3,4(r16)
   2124c:	81000317 	ldw	r4,12(r16)
   21250:	00bfff04 	movi	r2,-4
   21254:	1884703a 	and	r2,r3,r2
   21258:	81400217 	ldw	r5,8(r16)
   2125c:	8085883a 	add	r2,r16,r2
   21260:	10c00117 	ldw	r3,4(r2)
   21264:	29000315 	stw	r4,12(r5)
   21268:	21400215 	stw	r5,8(r4)
   2126c:	18c00054 	ori	r3,r3,1
   21270:	10c00115 	stw	r3,4(r2)
   21274:	9009883a 	mov	r4,r18
   21278:	00239bc0 	call	239bc <__malloc_unlock>
   2127c:	80800204 	addi	r2,r16,8
   21280:	dfc00a17 	ldw	ra,40(sp)
   21284:	df000917 	ldw	fp,36(sp)
   21288:	ddc00817 	ldw	r23,32(sp)
   2128c:	dd800717 	ldw	r22,28(sp)
   21290:	dd400617 	ldw	r21,24(sp)
   21294:	dd000517 	ldw	r20,20(sp)
   21298:	dcc00417 	ldw	r19,16(sp)
   2129c:	dc800317 	ldw	r18,12(sp)
   212a0:	dc400217 	ldw	r17,8(sp)
   212a4:	dc000117 	ldw	r16,4(sp)
   212a8:	dec00b04 	addi	sp,sp,44
   212ac:	f800283a 	ret
   212b0:	00800304 	movi	r2,12
   212b4:	90800015 	stw	r2,0(r18)
   212b8:	0005883a 	mov	r2,zero
   212bc:	003ff006 	br	21280 <_malloc_r+0x2a4>
   212c0:	01002004 	movi	r4,128
   212c4:	02001004 	movi	r8,64
   212c8:	01c00fc4 	movi	r7,63
   212cc:	003f6106 	br	21054 <_malloc_r+0x78>
   212d0:	4009883a 	mov	r4,r8
   212d4:	003f7506 	br	210ac <_malloc_r+0xd0>
   212d8:	81000317 	ldw	r4,12(r16)
   212dc:	003fde06 	br	21258 <_malloc_r+0x27c>
   212e0:	81c5883a 	add	r2,r16,r7
   212e4:	11400117 	ldw	r5,4(r2)
   212e8:	9009883a 	mov	r4,r18
   212ec:	29400054 	ori	r5,r5,1
   212f0:	11400115 	stw	r5,4(r2)
   212f4:	00239bc0 	call	239bc <__malloc_unlock>
   212f8:	80800204 	addi	r2,r16,8
   212fc:	003fe006 	br	21280 <_malloc_r+0x2a4>
   21300:	9c000217 	ldw	r16,8(r19)
   21304:	00bfff04 	movi	r2,-4
   21308:	85800117 	ldw	r22,4(r16)
   2130c:	b0ac703a 	and	r22,r22,r2
   21310:	b4400336 	bltu	r22,r17,21320 <_malloc_r+0x344>
   21314:	b445c83a 	sub	r2,r22,r17
   21318:	00c003c4 	movi	r3,15
   2131c:	18805d16 	blt	r3,r2,21494 <_malloc_r+0x4b8>
   21320:	05c00134 	movhi	r23,4
   21324:	00800134 	movhi	r2,4
   21328:	1082aa04 	addi	r2,r2,2728
   2132c:	bdc29904 	addi	r23,r23,2660
   21330:	15400017 	ldw	r21,0(r2)
   21334:	b8c00017 	ldw	r3,0(r23)
   21338:	00bfffc4 	movi	r2,-1
   2133c:	858d883a 	add	r6,r16,r22
   21340:	8d6b883a 	add	r21,r17,r21
   21344:	1880ea26 	beq	r3,r2,216f0 <_malloc_r+0x714>
   21348:	ad4403c4 	addi	r21,r21,4111
   2134c:	00bc0004 	movi	r2,-4096
   21350:	a8aa703a 	and	r21,r21,r2
   21354:	a80b883a 	mov	r5,r21
   21358:	9009883a 	mov	r4,r18
   2135c:	d9800015 	stw	r6,0(sp)
   21360:	00221fc0 	call	221fc <_sbrk_r>
   21364:	1029883a 	mov	r20,r2
   21368:	00bfffc4 	movi	r2,-1
   2136c:	d9800017 	ldw	r6,0(sp)
   21370:	a080e826 	beq	r20,r2,21714 <_malloc_r+0x738>
   21374:	a180a636 	bltu	r20,r6,21610 <_malloc_r+0x634>
   21378:	07000134 	movhi	fp,4
   2137c:	e702b104 	addi	fp,fp,2756
   21380:	e0800017 	ldw	r2,0(fp)
   21384:	a887883a 	add	r3,r21,r2
   21388:	e0c00015 	stw	r3,0(fp)
   2138c:	3500e626 	beq	r6,r20,21728 <_malloc_r+0x74c>
   21390:	b9000017 	ldw	r4,0(r23)
   21394:	00bfffc4 	movi	r2,-1
   21398:	2080ee26 	beq	r4,r2,21754 <_malloc_r+0x778>
   2139c:	a185c83a 	sub	r2,r20,r6
   213a0:	10c5883a 	add	r2,r2,r3
   213a4:	e0800015 	stw	r2,0(fp)
   213a8:	a0c001cc 	andi	r3,r20,7
   213ac:	1800bc26 	beq	r3,zero,216a0 <_malloc_r+0x6c4>
   213b0:	a0e9c83a 	sub	r20,r20,r3
   213b4:	00840204 	movi	r2,4104
   213b8:	a5000204 	addi	r20,r20,8
   213bc:	10c7c83a 	sub	r3,r2,r3
   213c0:	a545883a 	add	r2,r20,r21
   213c4:	1083ffcc 	andi	r2,r2,4095
   213c8:	18abc83a 	sub	r21,r3,r2
   213cc:	a80b883a 	mov	r5,r21
   213d0:	9009883a 	mov	r4,r18
   213d4:	00221fc0 	call	221fc <_sbrk_r>
   213d8:	00ffffc4 	movi	r3,-1
   213dc:	10c0e126 	beq	r2,r3,21764 <_malloc_r+0x788>
   213e0:	1505c83a 	sub	r2,r2,r20
   213e4:	1545883a 	add	r2,r2,r21
   213e8:	10800054 	ori	r2,r2,1
   213ec:	e0c00017 	ldw	r3,0(fp)
   213f0:	9d000215 	stw	r20,8(r19)
   213f4:	a0800115 	stw	r2,4(r20)
   213f8:	a8c7883a 	add	r3,r21,r3
   213fc:	e0c00015 	stw	r3,0(fp)
   21400:	84c00e26 	beq	r16,r19,2143c <_malloc_r+0x460>
   21404:	018003c4 	movi	r6,15
   21408:	3580a72e 	bgeu	r6,r22,216a8 <_malloc_r+0x6cc>
   2140c:	81400117 	ldw	r5,4(r16)
   21410:	013ffe04 	movi	r4,-8
   21414:	b0bffd04 	addi	r2,r22,-12
   21418:	1104703a 	and	r2,r2,r4
   2141c:	2900004c 	andi	r4,r5,1
   21420:	2088b03a 	or	r4,r4,r2
   21424:	81000115 	stw	r4,4(r16)
   21428:	01400144 	movi	r5,5
   2142c:	8089883a 	add	r4,r16,r2
   21430:	21400115 	stw	r5,4(r4)
   21434:	21400215 	stw	r5,8(r4)
   21438:	3080cd36 	bltu	r6,r2,21770 <_malloc_r+0x794>
   2143c:	00800134 	movhi	r2,4
   21440:	1082a904 	addi	r2,r2,2724
   21444:	11000017 	ldw	r4,0(r2)
   21448:	20c0012e 	bgeu	r4,r3,21450 <_malloc_r+0x474>
   2144c:	10c00015 	stw	r3,0(r2)
   21450:	00800134 	movhi	r2,4
   21454:	1082a804 	addi	r2,r2,2720
   21458:	11000017 	ldw	r4,0(r2)
   2145c:	9c000217 	ldw	r16,8(r19)
   21460:	20c0012e 	bgeu	r4,r3,21468 <_malloc_r+0x48c>
   21464:	10c00015 	stw	r3,0(r2)
   21468:	80c00117 	ldw	r3,4(r16)
   2146c:	00bfff04 	movi	r2,-4
   21470:	1886703a 	and	r3,r3,r2
   21474:	1c45c83a 	sub	r2,r3,r17
   21478:	1c400236 	bltu	r3,r17,21484 <_malloc_r+0x4a8>
   2147c:	00c003c4 	movi	r3,15
   21480:	18800416 	blt	r3,r2,21494 <_malloc_r+0x4b8>
   21484:	9009883a 	mov	r4,r18
   21488:	00239bc0 	call	239bc <__malloc_unlock>
   2148c:	0005883a 	mov	r2,zero
   21490:	003f7b06 	br	21280 <_malloc_r+0x2a4>
   21494:	88c00054 	ori	r3,r17,1
   21498:	80c00115 	stw	r3,4(r16)
   2149c:	8463883a 	add	r17,r16,r17
   214a0:	10800054 	ori	r2,r2,1
   214a4:	9c400215 	stw	r17,8(r19)
   214a8:	88800115 	stw	r2,4(r17)
   214ac:	9009883a 	mov	r4,r18
   214b0:	00239bc0 	call	239bc <__malloc_unlock>
   214b4:	80800204 	addi	r2,r16,8
   214b8:	003f7106 	br	21280 <_malloc_r+0x2a4>
   214bc:	00c00504 	movi	r3,20
   214c0:	18804a2e 	bgeu	r3,r2,215ec <_malloc_r+0x610>
   214c4:	00c01504 	movi	r3,84
   214c8:	18806e36 	bltu	r3,r2,21684 <_malloc_r+0x6a8>
   214cc:	8804d33a 	srli	r2,r17,12
   214d0:	12001bc4 	addi	r8,r2,111
   214d4:	11c01b84 	addi	r7,r2,110
   214d8:	4209883a 	add	r4,r8,r8
   214dc:	003edd06 	br	21054 <_malloc_r+0x78>
   214e0:	3804d27a 	srli	r2,r7,9
   214e4:	00c00104 	movi	r3,4
   214e8:	1880442e 	bgeu	r3,r2,215fc <_malloc_r+0x620>
   214ec:	00c00504 	movi	r3,20
   214f0:	18808136 	bltu	r3,r2,216f8 <_malloc_r+0x71c>
   214f4:	11401704 	addi	r5,r2,92
   214f8:	10c016c4 	addi	r3,r2,91
   214fc:	294b883a 	add	r5,r5,r5
   21500:	294b883a 	add	r5,r5,r5
   21504:	294b883a 	add	r5,r5,r5
   21508:	994b883a 	add	r5,r19,r5
   2150c:	28800017 	ldw	r2,0(r5)
   21510:	01800134 	movhi	r6,4
   21514:	297ffe04 	addi	r5,r5,-8
   21518:	31812004 	addi	r6,r6,1152
   2151c:	28806526 	beq	r5,r2,216b4 <_malloc_r+0x6d8>
   21520:	01bfff04 	movi	r6,-4
   21524:	10c00117 	ldw	r3,4(r2)
   21528:	1986703a 	and	r3,r3,r6
   2152c:	38c0022e 	bgeu	r7,r3,21538 <_malloc_r+0x55c>
   21530:	10800217 	ldw	r2,8(r2)
   21534:	28bffb1e 	bne	r5,r2,21524 <_malloc_r+0x548>
   21538:	11400317 	ldw	r5,12(r2)
   2153c:	98c00117 	ldw	r3,4(r19)
   21540:	81400315 	stw	r5,12(r16)
   21544:	80800215 	stw	r2,8(r16)
   21548:	2c000215 	stw	r16,8(r5)
   2154c:	14000315 	stw	r16,12(r2)
   21550:	003ef806 	br	21134 <_malloc_r+0x158>
   21554:	88c00054 	ori	r3,r17,1
   21558:	80c00115 	stw	r3,4(r16)
   2155c:	8463883a 	add	r17,r16,r17
   21560:	34400515 	stw	r17,20(r6)
   21564:	34400415 	stw	r17,16(r6)
   21568:	10c00054 	ori	r3,r2,1
   2156c:	8a000315 	stw	r8,12(r17)
   21570:	8a000215 	stw	r8,8(r17)
   21574:	88c00115 	stw	r3,4(r17)
   21578:	88a3883a 	add	r17,r17,r2
   2157c:	88800015 	stw	r2,0(r17)
   21580:	9009883a 	mov	r4,r18
   21584:	00239bc0 	call	239bc <__malloc_unlock>
   21588:	80800204 	addi	r2,r16,8
   2158c:	003f3c06 	br	21280 <_malloc_r+0x2a4>
   21590:	30c00117 	ldw	r3,4(r6)
   21594:	003ee706 	br	21134 <_malloc_r+0x158>
   21598:	5ac00044 	addi	r11,r11,1
   2159c:	588000cc 	andi	r2,r11,3
   215a0:	31800204 	addi	r6,r6,8
   215a4:	103efd1e 	bne	r2,zero,2119c <_malloc_r+0x1c0>
   215a8:	00002406 	br	2163c <_malloc_r+0x660>
   215ac:	14000317 	ldw	r16,12(r2)
   215b0:	143f251e 	bne	r2,r16,21248 <_malloc_r+0x26c>
   215b4:	21000084 	addi	r4,r4,2
   215b8:	003ebc06 	br	210ac <_malloc_r+0xd0>
   215bc:	8085883a 	add	r2,r16,r2
   215c0:	10c00117 	ldw	r3,4(r2)
   215c4:	81000317 	ldw	r4,12(r16)
   215c8:	81400217 	ldw	r5,8(r16)
   215cc:	18c00054 	ori	r3,r3,1
   215d0:	10c00115 	stw	r3,4(r2)
   215d4:	29000315 	stw	r4,12(r5)
   215d8:	21400215 	stw	r5,8(r4)
   215dc:	9009883a 	mov	r4,r18
   215e0:	00239bc0 	call	239bc <__malloc_unlock>
   215e4:	80800204 	addi	r2,r16,8
   215e8:	003f2506 	br	21280 <_malloc_r+0x2a4>
   215ec:	12001704 	addi	r8,r2,92
   215f0:	11c016c4 	addi	r7,r2,91
   215f4:	4209883a 	add	r4,r8,r8
   215f8:	003e9606 	br	21054 <_malloc_r+0x78>
   215fc:	3804d1ba 	srli	r2,r7,6
   21600:	11400e44 	addi	r5,r2,57
   21604:	10c00e04 	addi	r3,r2,56
   21608:	294b883a 	add	r5,r5,r5
   2160c:	003fbc06 	br	21500 <_malloc_r+0x524>
   21610:	84ff5926 	beq	r16,r19,21378 <_malloc_r+0x39c>
   21614:	00800134 	movhi	r2,4
   21618:	10812004 	addi	r2,r2,1152
   2161c:	14000217 	ldw	r16,8(r2)
   21620:	00bfff04 	movi	r2,-4
   21624:	80c00117 	ldw	r3,4(r16)
   21628:	1886703a 	and	r3,r3,r2
   2162c:	003f9106 	br	21474 <_malloc_r+0x498>
   21630:	60800217 	ldw	r2,8(r12)
   21634:	213fffc4 	addi	r4,r4,-1
   21638:	1300651e 	bne	r2,r12,217d0 <_malloc_r+0x7f4>
   2163c:	208000cc 	andi	r2,r4,3
   21640:	633ffe04 	addi	r12,r12,-8
   21644:	103ffa1e 	bne	r2,zero,21630 <_malloc_r+0x654>
   21648:	98800117 	ldw	r2,4(r19)
   2164c:	0146303a 	nor	r3,zero,r5
   21650:	1884703a 	and	r2,r3,r2
   21654:	98800115 	stw	r2,4(r19)
   21658:	294b883a 	add	r5,r5,r5
   2165c:	117f2836 	bltu	r2,r5,21300 <_malloc_r+0x324>
   21660:	283f2726 	beq	r5,zero,21300 <_malloc_r+0x324>
   21664:	2886703a 	and	r3,r5,r2
   21668:	5809883a 	mov	r4,r11
   2166c:	183ec31e 	bne	r3,zero,2117c <_malloc_r+0x1a0>
   21670:	294b883a 	add	r5,r5,r5
   21674:	2886703a 	and	r3,r5,r2
   21678:	21000104 	addi	r4,r4,4
   2167c:	183ffc26 	beq	r3,zero,21670 <_malloc_r+0x694>
   21680:	003ebe06 	br	2117c <_malloc_r+0x1a0>
   21684:	00c05504 	movi	r3,340
   21688:	18801236 	bltu	r3,r2,216d4 <_malloc_r+0x6f8>
   2168c:	8804d3fa 	srli	r2,r17,15
   21690:	12001e04 	addi	r8,r2,120
   21694:	11c01dc4 	addi	r7,r2,119
   21698:	4209883a 	add	r4,r8,r8
   2169c:	003e6d06 	br	21054 <_malloc_r+0x78>
   216a0:	00c40004 	movi	r3,4096
   216a4:	003f4606 	br	213c0 <_malloc_r+0x3e4>
   216a8:	00800044 	movi	r2,1
   216ac:	a0800115 	stw	r2,4(r20)
   216b0:	003f7406 	br	21484 <_malloc_r+0x4a8>
   216b4:	1805d0ba 	srai	r2,r3,2
   216b8:	01c00044 	movi	r7,1
   216bc:	30c00117 	ldw	r3,4(r6)
   216c0:	388e983a 	sll	r7,r7,r2
   216c4:	2805883a 	mov	r2,r5
   216c8:	38c6b03a 	or	r3,r7,r3
   216cc:	30c00115 	stw	r3,4(r6)
   216d0:	003f9b06 	br	21540 <_malloc_r+0x564>
   216d4:	00c15504 	movi	r3,1364
   216d8:	18801a36 	bltu	r3,r2,21744 <_malloc_r+0x768>
   216dc:	8804d4ba 	srli	r2,r17,18
   216e0:	12001f44 	addi	r8,r2,125
   216e4:	11c01f04 	addi	r7,r2,124
   216e8:	4209883a 	add	r4,r8,r8
   216ec:	003e5906 	br	21054 <_malloc_r+0x78>
   216f0:	ad400404 	addi	r21,r21,16
   216f4:	003f1706 	br	21354 <_malloc_r+0x378>
   216f8:	00c01504 	movi	r3,84
   216fc:	18802336 	bltu	r3,r2,2178c <_malloc_r+0x7b0>
   21700:	3804d33a 	srli	r2,r7,12
   21704:	11401bc4 	addi	r5,r2,111
   21708:	10c01b84 	addi	r3,r2,110
   2170c:	294b883a 	add	r5,r5,r5
   21710:	003f7b06 	br	21500 <_malloc_r+0x524>
   21714:	9c000217 	ldw	r16,8(r19)
   21718:	00bfff04 	movi	r2,-4
   2171c:	80c00117 	ldw	r3,4(r16)
   21720:	1886703a 	and	r3,r3,r2
   21724:	003f5306 	br	21474 <_malloc_r+0x498>
   21728:	3083ffcc 	andi	r2,r6,4095
   2172c:	103f181e 	bne	r2,zero,21390 <_malloc_r+0x3b4>
   21730:	99000217 	ldw	r4,8(r19)
   21734:	b545883a 	add	r2,r22,r21
   21738:	10800054 	ori	r2,r2,1
   2173c:	20800115 	stw	r2,4(r4)
   21740:	003f3e06 	br	2143c <_malloc_r+0x460>
   21744:	01003f84 	movi	r4,254
   21748:	02001fc4 	movi	r8,127
   2174c:	01c01f84 	movi	r7,126
   21750:	003e4006 	br	21054 <_malloc_r+0x78>
   21754:	00800134 	movhi	r2,4
   21758:	10829904 	addi	r2,r2,2660
   2175c:	15000015 	stw	r20,0(r2)
   21760:	003f1106 	br	213a8 <_malloc_r+0x3cc>
   21764:	00800044 	movi	r2,1
   21768:	002b883a 	mov	r21,zero
   2176c:	003f1f06 	br	213ec <_malloc_r+0x410>
   21770:	81400204 	addi	r5,r16,8
   21774:	9009883a 	mov	r4,r18
   21778:	0022a640 	call	22a64 <_free_r>
   2177c:	00800134 	movhi	r2,4
   21780:	1082b104 	addi	r2,r2,2756
   21784:	10c00017 	ldw	r3,0(r2)
   21788:	003f2c06 	br	2143c <_malloc_r+0x460>
   2178c:	00c05504 	movi	r3,340
   21790:	18800536 	bltu	r3,r2,217a8 <_malloc_r+0x7cc>
   21794:	3804d3fa 	srli	r2,r7,15
   21798:	11401e04 	addi	r5,r2,120
   2179c:	10c01dc4 	addi	r3,r2,119
   217a0:	294b883a 	add	r5,r5,r5
   217a4:	003f5606 	br	21500 <_malloc_r+0x524>
   217a8:	00c15504 	movi	r3,1364
   217ac:	18800536 	bltu	r3,r2,217c4 <_malloc_r+0x7e8>
   217b0:	3804d4ba 	srli	r2,r7,18
   217b4:	11401f44 	addi	r5,r2,125
   217b8:	10c01f04 	addi	r3,r2,124
   217bc:	294b883a 	add	r5,r5,r5
   217c0:	003f4f06 	br	21500 <_malloc_r+0x524>
   217c4:	01403f84 	movi	r5,254
   217c8:	00c01f84 	movi	r3,126
   217cc:	003f4c06 	br	21500 <_malloc_r+0x524>
   217d0:	98800117 	ldw	r2,4(r19)
   217d4:	003fa006 	br	21658 <_malloc_r+0x67c>
   217d8:	8808d0fa 	srli	r4,r17,3
   217dc:	20800044 	addi	r2,r4,1
   217e0:	1085883a 	add	r2,r2,r2
   217e4:	003e9006 	br	21228 <_malloc_r+0x24c>

000217e8 <memchr>:
   217e8:	208000cc 	andi	r2,r4,3
   217ec:	280f883a 	mov	r7,r5
   217f0:	10003426 	beq	r2,zero,218c4 <memchr+0xdc>
   217f4:	30bfffc4 	addi	r2,r6,-1
   217f8:	30001a26 	beq	r6,zero,21864 <memchr+0x7c>
   217fc:	20c00003 	ldbu	r3,0(r4)
   21800:	29803fcc 	andi	r6,r5,255
   21804:	30c0051e 	bne	r6,r3,2181c <memchr+0x34>
   21808:	00001806 	br	2186c <memchr+0x84>
   2180c:	10001526 	beq	r2,zero,21864 <memchr+0x7c>
   21810:	20c00003 	ldbu	r3,0(r4)
   21814:	10bfffc4 	addi	r2,r2,-1
   21818:	30c01426 	beq	r6,r3,2186c <memchr+0x84>
   2181c:	21000044 	addi	r4,r4,1
   21820:	20c000cc 	andi	r3,r4,3
   21824:	183ff91e 	bne	r3,zero,2180c <memchr+0x24>
   21828:	020000c4 	movi	r8,3
   2182c:	40801136 	bltu	r8,r2,21874 <memchr+0x8c>
   21830:	10000c26 	beq	r2,zero,21864 <memchr+0x7c>
   21834:	20c00003 	ldbu	r3,0(r4)
   21838:	29403fcc 	andi	r5,r5,255
   2183c:	28c00b26 	beq	r5,r3,2186c <memchr+0x84>
   21840:	20c00044 	addi	r3,r4,1
   21844:	39803fcc 	andi	r6,r7,255
   21848:	2089883a 	add	r4,r4,r2
   2184c:	00000306 	br	2185c <memchr+0x74>
   21850:	18c00044 	addi	r3,r3,1
   21854:	197fffc3 	ldbu	r5,-1(r3)
   21858:	31400526 	beq	r6,r5,21870 <memchr+0x88>
   2185c:	1805883a 	mov	r2,r3
   21860:	20fffb1e 	bne	r4,r3,21850 <memchr+0x68>
   21864:	0005883a 	mov	r2,zero
   21868:	f800283a 	ret
   2186c:	2005883a 	mov	r2,r4
   21870:	f800283a 	ret
   21874:	28c03fcc 	andi	r3,r5,255
   21878:	1812923a 	slli	r9,r3,8
   2187c:	02ffbff4 	movhi	r11,65279
   21880:	02a02074 	movhi	r10,32897
   21884:	48d2b03a 	or	r9,r9,r3
   21888:	4806943a 	slli	r3,r9,16
   2188c:	5affbfc4 	addi	r11,r11,-257
   21890:	52a02004 	addi	r10,r10,-32640
   21894:	48d2b03a 	or	r9,r9,r3
   21898:	20c00017 	ldw	r3,0(r4)
   2189c:	48c6f03a 	xor	r3,r9,r3
   218a0:	1acd883a 	add	r6,r3,r11
   218a4:	00c6303a 	nor	r3,zero,r3
   218a8:	30c6703a 	and	r3,r6,r3
   218ac:	1a86703a 	and	r3,r3,r10
   218b0:	183fe01e 	bne	r3,zero,21834 <memchr+0x4c>
   218b4:	10bfff04 	addi	r2,r2,-4
   218b8:	21000104 	addi	r4,r4,4
   218bc:	40bff636 	bltu	r8,r2,21898 <memchr+0xb0>
   218c0:	003fdb06 	br	21830 <memchr+0x48>
   218c4:	3005883a 	mov	r2,r6
   218c8:	003fd706 	br	21828 <memchr+0x40>

000218cc <memcpy>:
   218cc:	defffd04 	addi	sp,sp,-12
   218d0:	dfc00215 	stw	ra,8(sp)
   218d4:	dc400115 	stw	r17,4(sp)
   218d8:	dc000015 	stw	r16,0(sp)
   218dc:	00c003c4 	movi	r3,15
   218e0:	2005883a 	mov	r2,r4
   218e4:	1980452e 	bgeu	r3,r6,219fc <memcpy+0x130>
   218e8:	2906b03a 	or	r3,r5,r4
   218ec:	18c000cc 	andi	r3,r3,3
   218f0:	1800441e 	bne	r3,zero,21a04 <memcpy+0x138>
   218f4:	347ffc04 	addi	r17,r6,-16
   218f8:	8822d13a 	srli	r17,r17,4
   218fc:	28c00104 	addi	r3,r5,4
   21900:	23400104 	addi	r13,r4,4
   21904:	8820913a 	slli	r16,r17,4
   21908:	2b000204 	addi	r12,r5,8
   2190c:	22c00204 	addi	r11,r4,8
   21910:	84000504 	addi	r16,r16,20
   21914:	2a800304 	addi	r10,r5,12
   21918:	22400304 	addi	r9,r4,12
   2191c:	2c21883a 	add	r16,r5,r16
   21920:	2811883a 	mov	r8,r5
   21924:	200f883a 	mov	r7,r4
   21928:	41000017 	ldw	r4,0(r8)
   2192c:	1fc00017 	ldw	ra,0(r3)
   21930:	63c00017 	ldw	r15,0(r12)
   21934:	39000015 	stw	r4,0(r7)
   21938:	53800017 	ldw	r14,0(r10)
   2193c:	6fc00015 	stw	ra,0(r13)
   21940:	5bc00015 	stw	r15,0(r11)
   21944:	4b800015 	stw	r14,0(r9)
   21948:	18c00404 	addi	r3,r3,16
   2194c:	39c00404 	addi	r7,r7,16
   21950:	42000404 	addi	r8,r8,16
   21954:	6b400404 	addi	r13,r13,16
   21958:	63000404 	addi	r12,r12,16
   2195c:	5ac00404 	addi	r11,r11,16
   21960:	52800404 	addi	r10,r10,16
   21964:	4a400404 	addi	r9,r9,16
   21968:	1c3fef1e 	bne	r3,r16,21928 <memcpy+0x5c>
   2196c:	89c00044 	addi	r7,r17,1
   21970:	380e913a 	slli	r7,r7,4
   21974:	310003cc 	andi	r4,r6,15
   21978:	02c000c4 	movi	r11,3
   2197c:	11c7883a 	add	r3,r2,r7
   21980:	29cb883a 	add	r5,r5,r7
   21984:	5900212e 	bgeu	r11,r4,21a0c <memcpy+0x140>
   21988:	1813883a 	mov	r9,r3
   2198c:	2811883a 	mov	r8,r5
   21990:	200f883a 	mov	r7,r4
   21994:	42800017 	ldw	r10,0(r8)
   21998:	4a400104 	addi	r9,r9,4
   2199c:	39ffff04 	addi	r7,r7,-4
   219a0:	4abfff15 	stw	r10,-4(r9)
   219a4:	42000104 	addi	r8,r8,4
   219a8:	59fffa36 	bltu	r11,r7,21994 <memcpy+0xc8>
   219ac:	213fff04 	addi	r4,r4,-4
   219b0:	2008d0ba 	srli	r4,r4,2
   219b4:	318000cc 	andi	r6,r6,3
   219b8:	21000044 	addi	r4,r4,1
   219bc:	2109883a 	add	r4,r4,r4
   219c0:	2109883a 	add	r4,r4,r4
   219c4:	1907883a 	add	r3,r3,r4
   219c8:	290b883a 	add	r5,r5,r4
   219cc:	30000626 	beq	r6,zero,219e8 <memcpy+0x11c>
   219d0:	198d883a 	add	r6,r3,r6
   219d4:	29c00003 	ldbu	r7,0(r5)
   219d8:	18c00044 	addi	r3,r3,1
   219dc:	29400044 	addi	r5,r5,1
   219e0:	19ffffc5 	stb	r7,-1(r3)
   219e4:	19bffb1e 	bne	r3,r6,219d4 <memcpy+0x108>
   219e8:	dfc00217 	ldw	ra,8(sp)
   219ec:	dc400117 	ldw	r17,4(sp)
   219f0:	dc000017 	ldw	r16,0(sp)
   219f4:	dec00304 	addi	sp,sp,12
   219f8:	f800283a 	ret
   219fc:	2007883a 	mov	r3,r4
   21a00:	003ff206 	br	219cc <memcpy+0x100>
   21a04:	2007883a 	mov	r3,r4
   21a08:	003ff106 	br	219d0 <memcpy+0x104>
   21a0c:	200d883a 	mov	r6,r4
   21a10:	003fee06 	br	219cc <memcpy+0x100>

00021a14 <memmove>:
   21a14:	2005883a 	mov	r2,r4
   21a18:	29000b2e 	bgeu	r5,r4,21a48 <memmove+0x34>
   21a1c:	298f883a 	add	r7,r5,r6
   21a20:	21c0092e 	bgeu	r4,r7,21a48 <memmove+0x34>
   21a24:	2187883a 	add	r3,r4,r6
   21a28:	198bc83a 	sub	r5,r3,r6
   21a2c:	30004826 	beq	r6,zero,21b50 <memmove+0x13c>
   21a30:	39ffffc4 	addi	r7,r7,-1
   21a34:	39000003 	ldbu	r4,0(r7)
   21a38:	18ffffc4 	addi	r3,r3,-1
   21a3c:	19000005 	stb	r4,0(r3)
   21a40:	28fffb1e 	bne	r5,r3,21a30 <memmove+0x1c>
   21a44:	f800283a 	ret
   21a48:	00c003c4 	movi	r3,15
   21a4c:	1980412e 	bgeu	r3,r6,21b54 <memmove+0x140>
   21a50:	2886b03a 	or	r3,r5,r2
   21a54:	18c000cc 	andi	r3,r3,3
   21a58:	1800401e 	bne	r3,zero,21b5c <memmove+0x148>
   21a5c:	33fffc04 	addi	r15,r6,-16
   21a60:	781ed13a 	srli	r15,r15,4
   21a64:	28c00104 	addi	r3,r5,4
   21a68:	13400104 	addi	r13,r2,4
   21a6c:	781c913a 	slli	r14,r15,4
   21a70:	2b000204 	addi	r12,r5,8
   21a74:	12c00204 	addi	r11,r2,8
   21a78:	73800504 	addi	r14,r14,20
   21a7c:	2a800304 	addi	r10,r5,12
   21a80:	12400304 	addi	r9,r2,12
   21a84:	2b9d883a 	add	r14,r5,r14
   21a88:	2811883a 	mov	r8,r5
   21a8c:	100f883a 	mov	r7,r2
   21a90:	41000017 	ldw	r4,0(r8)
   21a94:	39c00404 	addi	r7,r7,16
   21a98:	18c00404 	addi	r3,r3,16
   21a9c:	393ffc15 	stw	r4,-16(r7)
   21aa0:	193ffc17 	ldw	r4,-16(r3)
   21aa4:	6b400404 	addi	r13,r13,16
   21aa8:	5ac00404 	addi	r11,r11,16
   21aac:	693ffc15 	stw	r4,-16(r13)
   21ab0:	61000017 	ldw	r4,0(r12)
   21ab4:	4a400404 	addi	r9,r9,16
   21ab8:	42000404 	addi	r8,r8,16
   21abc:	593ffc15 	stw	r4,-16(r11)
   21ac0:	51000017 	ldw	r4,0(r10)
   21ac4:	63000404 	addi	r12,r12,16
   21ac8:	52800404 	addi	r10,r10,16
   21acc:	493ffc15 	stw	r4,-16(r9)
   21ad0:	1bbfef1e 	bne	r3,r14,21a90 <memmove+0x7c>
   21ad4:	79000044 	addi	r4,r15,1
   21ad8:	2008913a 	slli	r4,r4,4
   21adc:	328003cc 	andi	r10,r6,15
   21ae0:	02c000c4 	movi	r11,3
   21ae4:	1107883a 	add	r3,r2,r4
   21ae8:	290b883a 	add	r5,r5,r4
   21aec:	5a801e2e 	bgeu	r11,r10,21b68 <memmove+0x154>
   21af0:	1813883a 	mov	r9,r3
   21af4:	2811883a 	mov	r8,r5
   21af8:	500f883a 	mov	r7,r10
   21afc:	41000017 	ldw	r4,0(r8)
   21b00:	4a400104 	addi	r9,r9,4
   21b04:	39ffff04 	addi	r7,r7,-4
   21b08:	493fff15 	stw	r4,-4(r9)
   21b0c:	42000104 	addi	r8,r8,4
   21b10:	59fffa36 	bltu	r11,r7,21afc <memmove+0xe8>
   21b14:	513fff04 	addi	r4,r10,-4
   21b18:	2008d0ba 	srli	r4,r4,2
   21b1c:	318000cc 	andi	r6,r6,3
   21b20:	21000044 	addi	r4,r4,1
   21b24:	2109883a 	add	r4,r4,r4
   21b28:	2109883a 	add	r4,r4,r4
   21b2c:	1907883a 	add	r3,r3,r4
   21b30:	290b883a 	add	r5,r5,r4
   21b34:	30000b26 	beq	r6,zero,21b64 <memmove+0x150>
   21b38:	198d883a 	add	r6,r3,r6
   21b3c:	29c00003 	ldbu	r7,0(r5)
   21b40:	18c00044 	addi	r3,r3,1
   21b44:	29400044 	addi	r5,r5,1
   21b48:	19ffffc5 	stb	r7,-1(r3)
   21b4c:	19bffb1e 	bne	r3,r6,21b3c <memmove+0x128>
   21b50:	f800283a 	ret
   21b54:	1007883a 	mov	r3,r2
   21b58:	003ff606 	br	21b34 <memmove+0x120>
   21b5c:	1007883a 	mov	r3,r2
   21b60:	003ff506 	br	21b38 <memmove+0x124>
   21b64:	f800283a 	ret
   21b68:	500d883a 	mov	r6,r10
   21b6c:	003ff106 	br	21b34 <memmove+0x120>

00021b70 <memset>:
   21b70:	20c000cc 	andi	r3,r4,3
   21b74:	2005883a 	mov	r2,r4
   21b78:	18004426 	beq	r3,zero,21c8c <memset+0x11c>
   21b7c:	31ffffc4 	addi	r7,r6,-1
   21b80:	30004026 	beq	r6,zero,21c84 <memset+0x114>
   21b84:	2813883a 	mov	r9,r5
   21b88:	200d883a 	mov	r6,r4
   21b8c:	2007883a 	mov	r3,r4
   21b90:	00000406 	br	21ba4 <memset+0x34>
   21b94:	3a3fffc4 	addi	r8,r7,-1
   21b98:	31800044 	addi	r6,r6,1
   21b9c:	38003926 	beq	r7,zero,21c84 <memset+0x114>
   21ba0:	400f883a 	mov	r7,r8
   21ba4:	18c00044 	addi	r3,r3,1
   21ba8:	32400005 	stb	r9,0(r6)
   21bac:	1a0000cc 	andi	r8,r3,3
   21bb0:	403ff81e 	bne	r8,zero,21b94 <memset+0x24>
   21bb4:	010000c4 	movi	r4,3
   21bb8:	21c02d2e 	bgeu	r4,r7,21c70 <memset+0x100>
   21bbc:	29003fcc 	andi	r4,r5,255
   21bc0:	200c923a 	slli	r6,r4,8
   21bc4:	3108b03a 	or	r4,r6,r4
   21bc8:	200c943a 	slli	r6,r4,16
   21bcc:	218cb03a 	or	r6,r4,r6
   21bd0:	010003c4 	movi	r4,15
   21bd4:	21c0182e 	bgeu	r4,r7,21c38 <memset+0xc8>
   21bd8:	3b3ffc04 	addi	r12,r7,-16
   21bdc:	6018d13a 	srli	r12,r12,4
   21be0:	1a000104 	addi	r8,r3,4
   21be4:	1ac00204 	addi	r11,r3,8
   21be8:	6008913a 	slli	r4,r12,4
   21bec:	1a800304 	addi	r10,r3,12
   21bf0:	1813883a 	mov	r9,r3
   21bf4:	21000504 	addi	r4,r4,20
   21bf8:	1909883a 	add	r4,r3,r4
   21bfc:	49800015 	stw	r6,0(r9)
   21c00:	41800015 	stw	r6,0(r8)
   21c04:	59800015 	stw	r6,0(r11)
   21c08:	51800015 	stw	r6,0(r10)
   21c0c:	42000404 	addi	r8,r8,16
   21c10:	4a400404 	addi	r9,r9,16
   21c14:	5ac00404 	addi	r11,r11,16
   21c18:	52800404 	addi	r10,r10,16
   21c1c:	413ff71e 	bne	r8,r4,21bfc <memset+0x8c>
   21c20:	63000044 	addi	r12,r12,1
   21c24:	6018913a 	slli	r12,r12,4
   21c28:	39c003cc 	andi	r7,r7,15
   21c2c:	010000c4 	movi	r4,3
   21c30:	1b07883a 	add	r3,r3,r12
   21c34:	21c00e2e 	bgeu	r4,r7,21c70 <memset+0x100>
   21c38:	1813883a 	mov	r9,r3
   21c3c:	3811883a 	mov	r8,r7
   21c40:	010000c4 	movi	r4,3
   21c44:	49800015 	stw	r6,0(r9)
   21c48:	423fff04 	addi	r8,r8,-4
   21c4c:	4a400104 	addi	r9,r9,4
   21c50:	223ffc36 	bltu	r4,r8,21c44 <memset+0xd4>
   21c54:	393fff04 	addi	r4,r7,-4
   21c58:	2008d0ba 	srli	r4,r4,2
   21c5c:	39c000cc 	andi	r7,r7,3
   21c60:	21000044 	addi	r4,r4,1
   21c64:	2109883a 	add	r4,r4,r4
   21c68:	2109883a 	add	r4,r4,r4
   21c6c:	1907883a 	add	r3,r3,r4
   21c70:	38000526 	beq	r7,zero,21c88 <memset+0x118>
   21c74:	19cf883a 	add	r7,r3,r7
   21c78:	19400005 	stb	r5,0(r3)
   21c7c:	18c00044 	addi	r3,r3,1
   21c80:	38fffd1e 	bne	r7,r3,21c78 <memset+0x108>
   21c84:	f800283a 	ret
   21c88:	f800283a 	ret
   21c8c:	2007883a 	mov	r3,r4
   21c90:	300f883a 	mov	r7,r6
   21c94:	003fc706 	br	21bb4 <memset+0x44>

00021c98 <_realloc_r>:
   21c98:	defff604 	addi	sp,sp,-40
   21c9c:	dc800215 	stw	r18,8(sp)
   21ca0:	dfc00915 	stw	ra,36(sp)
   21ca4:	df000815 	stw	fp,32(sp)
   21ca8:	ddc00715 	stw	r23,28(sp)
   21cac:	dd800615 	stw	r22,24(sp)
   21cb0:	dd400515 	stw	r21,20(sp)
   21cb4:	dd000415 	stw	r20,16(sp)
   21cb8:	dcc00315 	stw	r19,12(sp)
   21cbc:	dc400115 	stw	r17,4(sp)
   21cc0:	dc000015 	stw	r16,0(sp)
   21cc4:	3025883a 	mov	r18,r6
   21cc8:	2800b726 	beq	r5,zero,21fa8 <_realloc_r+0x310>
   21ccc:	282b883a 	mov	r21,r5
   21cd0:	2029883a 	mov	r20,r4
   21cd4:	00239980 	call	23998 <__malloc_lock>
   21cd8:	a8bfff17 	ldw	r2,-4(r21)
   21cdc:	043fff04 	movi	r16,-4
   21ce0:	90c002c4 	addi	r3,r18,11
   21ce4:	01000584 	movi	r4,22
   21ce8:	acfffe04 	addi	r19,r21,-8
   21cec:	1420703a 	and	r16,r2,r16
   21cf0:	20c0332e 	bgeu	r4,r3,21dc0 <_realloc_r+0x128>
   21cf4:	047ffe04 	movi	r17,-8
   21cf8:	1c62703a 	and	r17,r3,r17
   21cfc:	8807883a 	mov	r3,r17
   21d00:	88005816 	blt	r17,zero,21e64 <_realloc_r+0x1cc>
   21d04:	8c805736 	bltu	r17,r18,21e64 <_realloc_r+0x1cc>
   21d08:	80c0300e 	bge	r16,r3,21dcc <_realloc_r+0x134>
   21d0c:	07000134 	movhi	fp,4
   21d10:	e7012004 	addi	fp,fp,1152
   21d14:	e1c00217 	ldw	r7,8(fp)
   21d18:	9c09883a 	add	r4,r19,r16
   21d1c:	22000117 	ldw	r8,4(r4)
   21d20:	21c06326 	beq	r4,r7,21eb0 <_realloc_r+0x218>
   21d24:	017fff84 	movi	r5,-2
   21d28:	414a703a 	and	r5,r8,r5
   21d2c:	214b883a 	add	r5,r4,r5
   21d30:	29800117 	ldw	r6,4(r5)
   21d34:	3180004c 	andi	r6,r6,1
   21d38:	30003f26 	beq	r6,zero,21e38 <_realloc_r+0x1a0>
   21d3c:	1080004c 	andi	r2,r2,1
   21d40:	10008326 	beq	r2,zero,21f50 <_realloc_r+0x2b8>
   21d44:	900b883a 	mov	r5,r18
   21d48:	a009883a 	mov	r4,r20
   21d4c:	0020fdc0 	call	20fdc <_malloc_r>
   21d50:	1025883a 	mov	r18,r2
   21d54:	10011e26 	beq	r2,zero,221d0 <_realloc_r+0x538>
   21d58:	a93fff17 	ldw	r4,-4(r21)
   21d5c:	10fffe04 	addi	r3,r2,-8
   21d60:	00bfff84 	movi	r2,-2
   21d64:	2084703a 	and	r2,r4,r2
   21d68:	9885883a 	add	r2,r19,r2
   21d6c:	1880ee26 	beq	r3,r2,22128 <_realloc_r+0x490>
   21d70:	81bfff04 	addi	r6,r16,-4
   21d74:	00800904 	movi	r2,36
   21d78:	1180b836 	bltu	r2,r6,2205c <_realloc_r+0x3c4>
   21d7c:	00c004c4 	movi	r3,19
   21d80:	19809636 	bltu	r3,r6,21fdc <_realloc_r+0x344>
   21d84:	9005883a 	mov	r2,r18
   21d88:	a807883a 	mov	r3,r21
   21d8c:	19000017 	ldw	r4,0(r3)
   21d90:	11000015 	stw	r4,0(r2)
   21d94:	19000117 	ldw	r4,4(r3)
   21d98:	11000115 	stw	r4,4(r2)
   21d9c:	18c00217 	ldw	r3,8(r3)
   21da0:	10c00215 	stw	r3,8(r2)
   21da4:	a80b883a 	mov	r5,r21
   21da8:	a009883a 	mov	r4,r20
   21dac:	0022a640 	call	22a64 <_free_r>
   21db0:	a009883a 	mov	r4,r20
   21db4:	00239bc0 	call	239bc <__malloc_unlock>
   21db8:	9005883a 	mov	r2,r18
   21dbc:	00001206 	br	21e08 <_realloc_r+0x170>
   21dc0:	00c00404 	movi	r3,16
   21dc4:	1823883a 	mov	r17,r3
   21dc8:	003fce06 	br	21d04 <_realloc_r+0x6c>
   21dcc:	a825883a 	mov	r18,r21
   21dd0:	8445c83a 	sub	r2,r16,r17
   21dd4:	00c003c4 	movi	r3,15
   21dd8:	18802636 	bltu	r3,r2,21e74 <_realloc_r+0x1dc>
   21ddc:	99800117 	ldw	r6,4(r19)
   21de0:	9c07883a 	add	r3,r19,r16
   21de4:	3180004c 	andi	r6,r6,1
   21de8:	3420b03a 	or	r16,r6,r16
   21dec:	9c000115 	stw	r16,4(r19)
   21df0:	18800117 	ldw	r2,4(r3)
   21df4:	10800054 	ori	r2,r2,1
   21df8:	18800115 	stw	r2,4(r3)
   21dfc:	a009883a 	mov	r4,r20
   21e00:	00239bc0 	call	239bc <__malloc_unlock>
   21e04:	9005883a 	mov	r2,r18
   21e08:	dfc00917 	ldw	ra,36(sp)
   21e0c:	df000817 	ldw	fp,32(sp)
   21e10:	ddc00717 	ldw	r23,28(sp)
   21e14:	dd800617 	ldw	r22,24(sp)
   21e18:	dd400517 	ldw	r21,20(sp)
   21e1c:	dd000417 	ldw	r20,16(sp)
   21e20:	dcc00317 	ldw	r19,12(sp)
   21e24:	dc800217 	ldw	r18,8(sp)
   21e28:	dc400117 	ldw	r17,4(sp)
   21e2c:	dc000017 	ldw	r16,0(sp)
   21e30:	dec00a04 	addi	sp,sp,40
   21e34:	f800283a 	ret
   21e38:	017fff04 	movi	r5,-4
   21e3c:	414a703a 	and	r5,r8,r5
   21e40:	814d883a 	add	r6,r16,r5
   21e44:	30c01f16 	blt	r6,r3,21ec4 <_realloc_r+0x22c>
   21e48:	20800317 	ldw	r2,12(r4)
   21e4c:	20c00217 	ldw	r3,8(r4)
   21e50:	a825883a 	mov	r18,r21
   21e54:	3021883a 	mov	r16,r6
   21e58:	18800315 	stw	r2,12(r3)
   21e5c:	10c00215 	stw	r3,8(r2)
   21e60:	003fdb06 	br	21dd0 <_realloc_r+0x138>
   21e64:	00800304 	movi	r2,12
   21e68:	a0800015 	stw	r2,0(r20)
   21e6c:	0005883a 	mov	r2,zero
   21e70:	003fe506 	br	21e08 <_realloc_r+0x170>
   21e74:	98c00117 	ldw	r3,4(r19)
   21e78:	9c4b883a 	add	r5,r19,r17
   21e7c:	11000054 	ori	r4,r2,1
   21e80:	18c0004c 	andi	r3,r3,1
   21e84:	1c62b03a 	or	r17,r3,r17
   21e88:	9c400115 	stw	r17,4(r19)
   21e8c:	29000115 	stw	r4,4(r5)
   21e90:	2885883a 	add	r2,r5,r2
   21e94:	10c00117 	ldw	r3,4(r2)
   21e98:	29400204 	addi	r5,r5,8
   21e9c:	a009883a 	mov	r4,r20
   21ea0:	18c00054 	ori	r3,r3,1
   21ea4:	10c00115 	stw	r3,4(r2)
   21ea8:	0022a640 	call	22a64 <_free_r>
   21eac:	003fd306 	br	21dfc <_realloc_r+0x164>
   21eb0:	017fff04 	movi	r5,-4
   21eb4:	414a703a 	and	r5,r8,r5
   21eb8:	89800404 	addi	r6,r17,16
   21ebc:	8151883a 	add	r8,r16,r5
   21ec0:	4180590e 	bge	r8,r6,22028 <_realloc_r+0x390>
   21ec4:	1080004c 	andi	r2,r2,1
   21ec8:	103f9e1e 	bne	r2,zero,21d44 <_realloc_r+0xac>
   21ecc:	adbffe17 	ldw	r22,-8(r21)
   21ed0:	00bfff04 	movi	r2,-4
   21ed4:	9dadc83a 	sub	r22,r19,r22
   21ed8:	b1800117 	ldw	r6,4(r22)
   21edc:	3084703a 	and	r2,r6,r2
   21ee0:	20002026 	beq	r4,zero,21f64 <_realloc_r+0x2cc>
   21ee4:	80af883a 	add	r23,r16,r2
   21ee8:	b96f883a 	add	r23,r23,r5
   21eec:	21c05f26 	beq	r4,r7,2206c <_realloc_r+0x3d4>
   21ef0:	b8c01c16 	blt	r23,r3,21f64 <_realloc_r+0x2cc>
   21ef4:	20800317 	ldw	r2,12(r4)
   21ef8:	20c00217 	ldw	r3,8(r4)
   21efc:	81bfff04 	addi	r6,r16,-4
   21f00:	01000904 	movi	r4,36
   21f04:	18800315 	stw	r2,12(r3)
   21f08:	10c00215 	stw	r3,8(r2)
   21f0c:	b0c00217 	ldw	r3,8(r22)
   21f10:	b0800317 	ldw	r2,12(r22)
   21f14:	b4800204 	addi	r18,r22,8
   21f18:	18800315 	stw	r2,12(r3)
   21f1c:	10c00215 	stw	r3,8(r2)
   21f20:	21801b36 	bltu	r4,r6,21f90 <_realloc_r+0x2f8>
   21f24:	008004c4 	movi	r2,19
   21f28:	1180352e 	bgeu	r2,r6,22000 <_realloc_r+0x368>
   21f2c:	a8800017 	ldw	r2,0(r21)
   21f30:	b0800215 	stw	r2,8(r22)
   21f34:	a8800117 	ldw	r2,4(r21)
   21f38:	b0800315 	stw	r2,12(r22)
   21f3c:	008006c4 	movi	r2,27
   21f40:	11807f36 	bltu	r2,r6,22140 <_realloc_r+0x4a8>
   21f44:	b0800404 	addi	r2,r22,16
   21f48:	ad400204 	addi	r21,r21,8
   21f4c:	00002d06 	br	22004 <_realloc_r+0x36c>
   21f50:	adbffe17 	ldw	r22,-8(r21)
   21f54:	00bfff04 	movi	r2,-4
   21f58:	9dadc83a 	sub	r22,r19,r22
   21f5c:	b1000117 	ldw	r4,4(r22)
   21f60:	2084703a 	and	r2,r4,r2
   21f64:	b03f7726 	beq	r22,zero,21d44 <_realloc_r+0xac>
   21f68:	80af883a 	add	r23,r16,r2
   21f6c:	b8ff7516 	blt	r23,r3,21d44 <_realloc_r+0xac>
   21f70:	b0800317 	ldw	r2,12(r22)
   21f74:	b0c00217 	ldw	r3,8(r22)
   21f78:	81bfff04 	addi	r6,r16,-4
   21f7c:	01000904 	movi	r4,36
   21f80:	18800315 	stw	r2,12(r3)
   21f84:	10c00215 	stw	r3,8(r2)
   21f88:	b4800204 	addi	r18,r22,8
   21f8c:	21bfe52e 	bgeu	r4,r6,21f24 <_realloc_r+0x28c>
   21f90:	a80b883a 	mov	r5,r21
   21f94:	9009883a 	mov	r4,r18
   21f98:	0021a140 	call	21a14 <memmove>
   21f9c:	b821883a 	mov	r16,r23
   21fa0:	b027883a 	mov	r19,r22
   21fa4:	003f8a06 	br	21dd0 <_realloc_r+0x138>
   21fa8:	300b883a 	mov	r5,r6
   21fac:	dfc00917 	ldw	ra,36(sp)
   21fb0:	df000817 	ldw	fp,32(sp)
   21fb4:	ddc00717 	ldw	r23,28(sp)
   21fb8:	dd800617 	ldw	r22,24(sp)
   21fbc:	dd400517 	ldw	r21,20(sp)
   21fc0:	dd000417 	ldw	r20,16(sp)
   21fc4:	dcc00317 	ldw	r19,12(sp)
   21fc8:	dc800217 	ldw	r18,8(sp)
   21fcc:	dc400117 	ldw	r17,4(sp)
   21fd0:	dc000017 	ldw	r16,0(sp)
   21fd4:	dec00a04 	addi	sp,sp,40
   21fd8:	0020fdc1 	jmpi	20fdc <_malloc_r>
   21fdc:	a8c00017 	ldw	r3,0(r21)
   21fe0:	90c00015 	stw	r3,0(r18)
   21fe4:	a8c00117 	ldw	r3,4(r21)
   21fe8:	90c00115 	stw	r3,4(r18)
   21fec:	00c006c4 	movi	r3,27
   21ff0:	19804536 	bltu	r3,r6,22108 <_realloc_r+0x470>
   21ff4:	90800204 	addi	r2,r18,8
   21ff8:	a8c00204 	addi	r3,r21,8
   21ffc:	003f6306 	br	21d8c <_realloc_r+0xf4>
   22000:	9005883a 	mov	r2,r18
   22004:	a8c00017 	ldw	r3,0(r21)
   22008:	b821883a 	mov	r16,r23
   2200c:	b027883a 	mov	r19,r22
   22010:	10c00015 	stw	r3,0(r2)
   22014:	a8c00117 	ldw	r3,4(r21)
   22018:	10c00115 	stw	r3,4(r2)
   2201c:	a8c00217 	ldw	r3,8(r21)
   22020:	10c00215 	stw	r3,8(r2)
   22024:	003f6a06 	br	21dd0 <_realloc_r+0x138>
   22028:	9c67883a 	add	r19,r19,r17
   2202c:	4445c83a 	sub	r2,r8,r17
   22030:	e4c00215 	stw	r19,8(fp)
   22034:	10800054 	ori	r2,r2,1
   22038:	98800115 	stw	r2,4(r19)
   2203c:	a8bfff17 	ldw	r2,-4(r21)
   22040:	a009883a 	mov	r4,r20
   22044:	1080004c 	andi	r2,r2,1
   22048:	1462b03a 	or	r17,r2,r17
   2204c:	ac7fff15 	stw	r17,-4(r21)
   22050:	00239bc0 	call	239bc <__malloc_unlock>
   22054:	a805883a 	mov	r2,r21
   22058:	003f6b06 	br	21e08 <_realloc_r+0x170>
   2205c:	a80b883a 	mov	r5,r21
   22060:	9009883a 	mov	r4,r18
   22064:	0021a140 	call	21a14 <memmove>
   22068:	003f4e06 	br	21da4 <_realloc_r+0x10c>
   2206c:	89000404 	addi	r4,r17,16
   22070:	b93fbc16 	blt	r23,r4,21f64 <_realloc_r+0x2cc>
   22074:	b0800317 	ldw	r2,12(r22)
   22078:	b0c00217 	ldw	r3,8(r22)
   2207c:	81bfff04 	addi	r6,r16,-4
   22080:	01000904 	movi	r4,36
   22084:	18800315 	stw	r2,12(r3)
   22088:	10c00215 	stw	r3,8(r2)
   2208c:	b4800204 	addi	r18,r22,8
   22090:	21804336 	bltu	r4,r6,221a0 <_realloc_r+0x508>
   22094:	008004c4 	movi	r2,19
   22098:	11803f2e 	bgeu	r2,r6,22198 <_realloc_r+0x500>
   2209c:	a8800017 	ldw	r2,0(r21)
   220a0:	b0800215 	stw	r2,8(r22)
   220a4:	a8800117 	ldw	r2,4(r21)
   220a8:	b0800315 	stw	r2,12(r22)
   220ac:	008006c4 	movi	r2,27
   220b0:	11803f36 	bltu	r2,r6,221b0 <_realloc_r+0x518>
   220b4:	b0800404 	addi	r2,r22,16
   220b8:	ad400204 	addi	r21,r21,8
   220bc:	a8c00017 	ldw	r3,0(r21)
   220c0:	10c00015 	stw	r3,0(r2)
   220c4:	a8c00117 	ldw	r3,4(r21)
   220c8:	10c00115 	stw	r3,4(r2)
   220cc:	a8c00217 	ldw	r3,8(r21)
   220d0:	10c00215 	stw	r3,8(r2)
   220d4:	b447883a 	add	r3,r22,r17
   220d8:	bc45c83a 	sub	r2,r23,r17
   220dc:	e0c00215 	stw	r3,8(fp)
   220e0:	10800054 	ori	r2,r2,1
   220e4:	18800115 	stw	r2,4(r3)
   220e8:	b0800117 	ldw	r2,4(r22)
   220ec:	a009883a 	mov	r4,r20
   220f0:	1080004c 	andi	r2,r2,1
   220f4:	1462b03a 	or	r17,r2,r17
   220f8:	b4400115 	stw	r17,4(r22)
   220fc:	00239bc0 	call	239bc <__malloc_unlock>
   22100:	9005883a 	mov	r2,r18
   22104:	003f4006 	br	21e08 <_realloc_r+0x170>
   22108:	a8c00217 	ldw	r3,8(r21)
   2210c:	90c00215 	stw	r3,8(r18)
   22110:	a8c00317 	ldw	r3,12(r21)
   22114:	90c00315 	stw	r3,12(r18)
   22118:	30801126 	beq	r6,r2,22160 <_realloc_r+0x4c8>
   2211c:	90800404 	addi	r2,r18,16
   22120:	a8c00404 	addi	r3,r21,16
   22124:	003f1906 	br	21d8c <_realloc_r+0xf4>
   22128:	90ffff17 	ldw	r3,-4(r18)
   2212c:	00bfff04 	movi	r2,-4
   22130:	a825883a 	mov	r18,r21
   22134:	1884703a 	and	r2,r3,r2
   22138:	80a1883a 	add	r16,r16,r2
   2213c:	003f2406 	br	21dd0 <_realloc_r+0x138>
   22140:	a8800217 	ldw	r2,8(r21)
   22144:	b0800415 	stw	r2,16(r22)
   22148:	a8800317 	ldw	r2,12(r21)
   2214c:	b0800515 	stw	r2,20(r22)
   22150:	31000a26 	beq	r6,r4,2217c <_realloc_r+0x4e4>
   22154:	b0800604 	addi	r2,r22,24
   22158:	ad400404 	addi	r21,r21,16
   2215c:	003fa906 	br	22004 <_realloc_r+0x36c>
   22160:	a9000417 	ldw	r4,16(r21)
   22164:	90800604 	addi	r2,r18,24
   22168:	a8c00604 	addi	r3,r21,24
   2216c:	91000415 	stw	r4,16(r18)
   22170:	a9000517 	ldw	r4,20(r21)
   22174:	91000515 	stw	r4,20(r18)
   22178:	003f0406 	br	21d8c <_realloc_r+0xf4>
   2217c:	a8c00417 	ldw	r3,16(r21)
   22180:	ad400604 	addi	r21,r21,24
   22184:	b0800804 	addi	r2,r22,32
   22188:	b0c00615 	stw	r3,24(r22)
   2218c:	a8ffff17 	ldw	r3,-4(r21)
   22190:	b0c00715 	stw	r3,28(r22)
   22194:	003f9b06 	br	22004 <_realloc_r+0x36c>
   22198:	9005883a 	mov	r2,r18
   2219c:	003fc706 	br	220bc <_realloc_r+0x424>
   221a0:	a80b883a 	mov	r5,r21
   221a4:	9009883a 	mov	r4,r18
   221a8:	0021a140 	call	21a14 <memmove>
   221ac:	003fc906 	br	220d4 <_realloc_r+0x43c>
   221b0:	a8800217 	ldw	r2,8(r21)
   221b4:	b0800415 	stw	r2,16(r22)
   221b8:	a8800317 	ldw	r2,12(r21)
   221bc:	b0800515 	stw	r2,20(r22)
   221c0:	31000726 	beq	r6,r4,221e0 <_realloc_r+0x548>
   221c4:	b0800604 	addi	r2,r22,24
   221c8:	ad400404 	addi	r21,r21,16
   221cc:	003fbb06 	br	220bc <_realloc_r+0x424>
   221d0:	a009883a 	mov	r4,r20
   221d4:	00239bc0 	call	239bc <__malloc_unlock>
   221d8:	0005883a 	mov	r2,zero
   221dc:	003f0a06 	br	21e08 <_realloc_r+0x170>
   221e0:	a8c00417 	ldw	r3,16(r21)
   221e4:	ad400604 	addi	r21,r21,24
   221e8:	b0800804 	addi	r2,r22,32
   221ec:	b0c00615 	stw	r3,24(r22)
   221f0:	a8ffff17 	ldw	r3,-4(r21)
   221f4:	b0c00715 	stw	r3,28(r22)
   221f8:	003fb006 	br	220bc <_realloc_r+0x424>

000221fc <_sbrk_r>:
   221fc:	defffd04 	addi	sp,sp,-12
   22200:	dc000015 	stw	r16,0(sp)
   22204:	04000134 	movhi	r16,4
   22208:	dc400115 	stw	r17,4(sp)
   2220c:	8402ab04 	addi	r16,r16,2732
   22210:	2023883a 	mov	r17,r4
   22214:	2809883a 	mov	r4,r5
   22218:	dfc00215 	stw	ra,8(sp)
   2221c:	80000015 	stw	zero,0(r16)
   22220:	0023ba40 	call	23ba4 <sbrk>
   22224:	00ffffc4 	movi	r3,-1
   22228:	10c00526 	beq	r2,r3,22240 <_sbrk_r+0x44>
   2222c:	dfc00217 	ldw	ra,8(sp)
   22230:	dc400117 	ldw	r17,4(sp)
   22234:	dc000017 	ldw	r16,0(sp)
   22238:	dec00304 	addi	sp,sp,12
   2223c:	f800283a 	ret
   22240:	80c00017 	ldw	r3,0(r16)
   22244:	183ff926 	beq	r3,zero,2222c <_sbrk_r+0x30>
   22248:	88c00015 	stw	r3,0(r17)
   2224c:	003ff706 	br	2222c <_sbrk_r+0x30>

00022250 <__sread>:
   22250:	defffe04 	addi	sp,sp,-8
   22254:	dc000015 	stw	r16,0(sp)
   22258:	2821883a 	mov	r16,r5
   2225c:	2940038f 	ldh	r5,14(r5)
   22260:	dfc00115 	stw	ra,4(sp)
   22264:	0022f900 	call	22f90 <_read_r>
   22268:	10000716 	blt	r2,zero,22288 <__sread+0x38>
   2226c:	80c01417 	ldw	r3,80(r16)
   22270:	1887883a 	add	r3,r3,r2
   22274:	80c01415 	stw	r3,80(r16)
   22278:	dfc00117 	ldw	ra,4(sp)
   2227c:	dc000017 	ldw	r16,0(sp)
   22280:	dec00204 	addi	sp,sp,8
   22284:	f800283a 	ret
   22288:	80c0030b 	ldhu	r3,12(r16)
   2228c:	18fbffcc 	andi	r3,r3,61439
   22290:	80c0030d 	sth	r3,12(r16)
   22294:	dfc00117 	ldw	ra,4(sp)
   22298:	dc000017 	ldw	r16,0(sp)
   2229c:	dec00204 	addi	sp,sp,8
   222a0:	f800283a 	ret

000222a4 <__seofread>:
   222a4:	0005883a 	mov	r2,zero
   222a8:	f800283a 	ret

000222ac <__swrite>:
   222ac:	2880030b 	ldhu	r2,12(r5)
   222b0:	defffb04 	addi	sp,sp,-20
   222b4:	dcc00315 	stw	r19,12(sp)
   222b8:	dc800215 	stw	r18,8(sp)
   222bc:	dc400115 	stw	r17,4(sp)
   222c0:	dc000015 	stw	r16,0(sp)
   222c4:	dfc00415 	stw	ra,16(sp)
   222c8:	10c0400c 	andi	r3,r2,256
   222cc:	2821883a 	mov	r16,r5
   222d0:	2023883a 	mov	r17,r4
   222d4:	3025883a 	mov	r18,r6
   222d8:	3827883a 	mov	r19,r7
   222dc:	18000526 	beq	r3,zero,222f4 <__swrite+0x48>
   222e0:	2940038f 	ldh	r5,14(r5)
   222e4:	01c00084 	movi	r7,2
   222e8:	000d883a 	mov	r6,zero
   222ec:	0022d740 	call	22d74 <_lseek_r>
   222f0:	8080030b 	ldhu	r2,12(r16)
   222f4:	8140038f 	ldh	r5,14(r16)
   222f8:	10bbffcc 	andi	r2,r2,61439
   222fc:	980f883a 	mov	r7,r19
   22300:	900d883a 	mov	r6,r18
   22304:	8809883a 	mov	r4,r17
   22308:	8080030d 	sth	r2,12(r16)
   2230c:	dfc00417 	ldw	ra,16(sp)
   22310:	dcc00317 	ldw	r19,12(sp)
   22314:	dc800217 	ldw	r18,8(sp)
   22318:	dc400117 	ldw	r17,4(sp)
   2231c:	dc000017 	ldw	r16,0(sp)
   22320:	dec00504 	addi	sp,sp,20
   22324:	002238c1 	jmpi	2238c <_write_r>

00022328 <__sseek>:
   22328:	defffe04 	addi	sp,sp,-8
   2232c:	dc000015 	stw	r16,0(sp)
   22330:	2821883a 	mov	r16,r5
   22334:	2940038f 	ldh	r5,14(r5)
   22338:	dfc00115 	stw	ra,4(sp)
   2233c:	0022d740 	call	22d74 <_lseek_r>
   22340:	00ffffc4 	movi	r3,-1
   22344:	10c00826 	beq	r2,r3,22368 <__sseek+0x40>
   22348:	80c0030b 	ldhu	r3,12(r16)
   2234c:	80801415 	stw	r2,80(r16)
   22350:	18c40014 	ori	r3,r3,4096
   22354:	80c0030d 	sth	r3,12(r16)
   22358:	dfc00117 	ldw	ra,4(sp)
   2235c:	dc000017 	ldw	r16,0(sp)
   22360:	dec00204 	addi	sp,sp,8
   22364:	f800283a 	ret
   22368:	80c0030b 	ldhu	r3,12(r16)
   2236c:	18fbffcc 	andi	r3,r3,61439
   22370:	80c0030d 	sth	r3,12(r16)
   22374:	dfc00117 	ldw	ra,4(sp)
   22378:	dc000017 	ldw	r16,0(sp)
   2237c:	dec00204 	addi	sp,sp,8
   22380:	f800283a 	ret

00022384 <__sclose>:
   22384:	2940038f 	ldh	r5,14(r5)
   22388:	00225401 	jmpi	22540 <_close_r>

0002238c <_write_r>:
   2238c:	defffd04 	addi	sp,sp,-12
   22390:	2805883a 	mov	r2,r5
   22394:	dc000015 	stw	r16,0(sp)
   22398:	04000134 	movhi	r16,4
   2239c:	dc400115 	stw	r17,4(sp)
   223a0:	300b883a 	mov	r5,r6
   223a4:	8402ab04 	addi	r16,r16,2732
   223a8:	2023883a 	mov	r17,r4
   223ac:	380d883a 	mov	r6,r7
   223b0:	1009883a 	mov	r4,r2
   223b4:	dfc00215 	stw	ra,8(sp)
   223b8:	80000015 	stw	zero,0(r16)
   223bc:	0023cc00 	call	23cc0 <write>
   223c0:	00ffffc4 	movi	r3,-1
   223c4:	10c00526 	beq	r2,r3,223dc <_write_r+0x50>
   223c8:	dfc00217 	ldw	ra,8(sp)
   223cc:	dc400117 	ldw	r17,4(sp)
   223d0:	dc000017 	ldw	r16,0(sp)
   223d4:	dec00304 	addi	sp,sp,12
   223d8:	f800283a 	ret
   223dc:	80c00017 	ldw	r3,0(r16)
   223e0:	183ff926 	beq	r3,zero,223c8 <_write_r+0x3c>
   223e4:	88c00015 	stw	r3,0(r17)
   223e8:	003ff706 	br	223c8 <_write_r+0x3c>

000223ec <__swsetup_r>:
   223ec:	00800134 	movhi	r2,4
   223f0:	defffd04 	addi	sp,sp,-12
   223f4:	10829804 	addi	r2,r2,2656
   223f8:	dc400115 	stw	r17,4(sp)
   223fc:	2023883a 	mov	r17,r4
   22400:	11000017 	ldw	r4,0(r2)
   22404:	dc000015 	stw	r16,0(sp)
   22408:	dfc00215 	stw	ra,8(sp)
   2240c:	2821883a 	mov	r16,r5
   22410:	20000226 	beq	r4,zero,2241c <__swsetup_r+0x30>
   22414:	20800e17 	ldw	r2,56(r4)
   22418:	10003126 	beq	r2,zero,224e0 <__swsetup_r+0xf4>
   2241c:	8080030b 	ldhu	r2,12(r16)
   22420:	10c0020c 	andi	r3,r2,8
   22424:	1009883a 	mov	r4,r2
   22428:	18000f26 	beq	r3,zero,22468 <__swsetup_r+0x7c>
   2242c:	80c00417 	ldw	r3,16(r16)
   22430:	18001526 	beq	r3,zero,22488 <__swsetup_r+0x9c>
   22434:	1100004c 	andi	r4,r2,1
   22438:	20001c1e 	bne	r4,zero,224ac <__swsetup_r+0xc0>
   2243c:	1080008c 	andi	r2,r2,2
   22440:	1000291e 	bne	r2,zero,224e8 <__swsetup_r+0xfc>
   22444:	80800517 	ldw	r2,20(r16)
   22448:	80800215 	stw	r2,8(r16)
   2244c:	18001c26 	beq	r3,zero,224c0 <__swsetup_r+0xd4>
   22450:	0005883a 	mov	r2,zero
   22454:	dfc00217 	ldw	ra,8(sp)
   22458:	dc400117 	ldw	r17,4(sp)
   2245c:	dc000017 	ldw	r16,0(sp)
   22460:	dec00304 	addi	sp,sp,12
   22464:	f800283a 	ret
   22468:	2080040c 	andi	r2,r4,16
   2246c:	10002e26 	beq	r2,zero,22528 <__swsetup_r+0x13c>
   22470:	2080010c 	andi	r2,r4,4
   22474:	10001e1e 	bne	r2,zero,224f0 <__swsetup_r+0x104>
   22478:	80c00417 	ldw	r3,16(r16)
   2247c:	20800214 	ori	r2,r4,8
   22480:	8080030d 	sth	r2,12(r16)
   22484:	183feb1e 	bne	r3,zero,22434 <__swsetup_r+0x48>
   22488:	1100a00c 	andi	r4,r2,640
   2248c:	01408004 	movi	r5,512
   22490:	217fe826 	beq	r4,r5,22434 <__swsetup_r+0x48>
   22494:	800b883a 	mov	r5,r16
   22498:	8809883a 	mov	r4,r17
   2249c:	0022dd40 	call	22dd4 <__smakebuf_r>
   224a0:	8080030b 	ldhu	r2,12(r16)
   224a4:	80c00417 	ldw	r3,16(r16)
   224a8:	003fe206 	br	22434 <__swsetup_r+0x48>
   224ac:	80800517 	ldw	r2,20(r16)
   224b0:	80000215 	stw	zero,8(r16)
   224b4:	0085c83a 	sub	r2,zero,r2
   224b8:	80800615 	stw	r2,24(r16)
   224bc:	183fe41e 	bne	r3,zero,22450 <__swsetup_r+0x64>
   224c0:	80c0030b 	ldhu	r3,12(r16)
   224c4:	0005883a 	mov	r2,zero
   224c8:	1900200c 	andi	r4,r3,128
   224cc:	203fe126 	beq	r4,zero,22454 <__swsetup_r+0x68>
   224d0:	18c01014 	ori	r3,r3,64
   224d4:	80c0030d 	sth	r3,12(r16)
   224d8:	00bfffc4 	movi	r2,-1
   224dc:	003fdd06 	br	22454 <__swsetup_r+0x68>
   224e0:	002093c0 	call	2093c <__sinit>
   224e4:	003fcd06 	br	2241c <__swsetup_r+0x30>
   224e8:	0005883a 	mov	r2,zero
   224ec:	003fd606 	br	22448 <__swsetup_r+0x5c>
   224f0:	81400c17 	ldw	r5,48(r16)
   224f4:	28000626 	beq	r5,zero,22510 <__swsetup_r+0x124>
   224f8:	80801004 	addi	r2,r16,64
   224fc:	28800326 	beq	r5,r2,2250c <__swsetup_r+0x120>
   22500:	8809883a 	mov	r4,r17
   22504:	0022a640 	call	22a64 <_free_r>
   22508:	8100030b 	ldhu	r4,12(r16)
   2250c:	80000c15 	stw	zero,48(r16)
   22510:	80c00417 	ldw	r3,16(r16)
   22514:	00bff6c4 	movi	r2,-37
   22518:	1108703a 	and	r4,r2,r4
   2251c:	80000115 	stw	zero,4(r16)
   22520:	80c00015 	stw	r3,0(r16)
   22524:	003fd506 	br	2247c <__swsetup_r+0x90>
   22528:	00800244 	movi	r2,9
   2252c:	88800015 	stw	r2,0(r17)
   22530:	20801014 	ori	r2,r4,64
   22534:	8080030d 	sth	r2,12(r16)
   22538:	00bfffc4 	movi	r2,-1
   2253c:	003fc506 	br	22454 <__swsetup_r+0x68>

00022540 <_close_r>:
   22540:	defffd04 	addi	sp,sp,-12
   22544:	dc000015 	stw	r16,0(sp)
   22548:	04000134 	movhi	r16,4
   2254c:	dc400115 	stw	r17,4(sp)
   22550:	8402ab04 	addi	r16,r16,2732
   22554:	2023883a 	mov	r17,r4
   22558:	2809883a 	mov	r4,r5
   2255c:	dfc00215 	stw	ra,8(sp)
   22560:	80000015 	stw	zero,0(r16)
   22564:	00232b80 	call	232b8 <close>
   22568:	00ffffc4 	movi	r3,-1
   2256c:	10c00526 	beq	r2,r3,22584 <_close_r+0x44>
   22570:	dfc00217 	ldw	ra,8(sp)
   22574:	dc400117 	ldw	r17,4(sp)
   22578:	dc000017 	ldw	r16,0(sp)
   2257c:	dec00304 	addi	sp,sp,12
   22580:	f800283a 	ret
   22584:	80c00017 	ldw	r3,0(r16)
   22588:	183ff926 	beq	r3,zero,22570 <_close_r+0x30>
   2258c:	88c00015 	stw	r3,0(r17)
   22590:	003ff706 	br	22570 <_close_r+0x30>

00022594 <_fclose_r>:
   22594:	28003926 	beq	r5,zero,2267c <_fclose_r+0xe8>
   22598:	defffc04 	addi	sp,sp,-16
   2259c:	dc400115 	stw	r17,4(sp)
   225a0:	dc000015 	stw	r16,0(sp)
   225a4:	dfc00315 	stw	ra,12(sp)
   225a8:	dc800215 	stw	r18,8(sp)
   225ac:	2023883a 	mov	r17,r4
   225b0:	2821883a 	mov	r16,r5
   225b4:	20000226 	beq	r4,zero,225c0 <_fclose_r+0x2c>
   225b8:	20800e17 	ldw	r2,56(r4)
   225bc:	10002726 	beq	r2,zero,2265c <_fclose_r+0xc8>
   225c0:	8080030f 	ldh	r2,12(r16)
   225c4:	1000071e 	bne	r2,zero,225e4 <_fclose_r+0x50>
   225c8:	0005883a 	mov	r2,zero
   225cc:	dfc00317 	ldw	ra,12(sp)
   225d0:	dc800217 	ldw	r18,8(sp)
   225d4:	dc400117 	ldw	r17,4(sp)
   225d8:	dc000017 	ldw	r16,0(sp)
   225dc:	dec00404 	addi	sp,sp,16
   225e0:	f800283a 	ret
   225e4:	800b883a 	mov	r5,r16
   225e8:	8809883a 	mov	r4,r17
   225ec:	00226980 	call	22698 <__sflush_r>
   225f0:	1025883a 	mov	r18,r2
   225f4:	80800b17 	ldw	r2,44(r16)
   225f8:	10000426 	beq	r2,zero,2260c <_fclose_r+0x78>
   225fc:	81400717 	ldw	r5,28(r16)
   22600:	8809883a 	mov	r4,r17
   22604:	103ee83a 	callr	r2
   22608:	10001616 	blt	r2,zero,22664 <_fclose_r+0xd0>
   2260c:	8080030b 	ldhu	r2,12(r16)
   22610:	1080200c 	andi	r2,r2,128
   22614:	1000151e 	bne	r2,zero,2266c <_fclose_r+0xd8>
   22618:	81400c17 	ldw	r5,48(r16)
   2261c:	28000526 	beq	r5,zero,22634 <_fclose_r+0xa0>
   22620:	80801004 	addi	r2,r16,64
   22624:	28800226 	beq	r5,r2,22630 <_fclose_r+0x9c>
   22628:	8809883a 	mov	r4,r17
   2262c:	0022a640 	call	22a64 <_free_r>
   22630:	80000c15 	stw	zero,48(r16)
   22634:	81401117 	ldw	r5,68(r16)
   22638:	28000326 	beq	r5,zero,22648 <_fclose_r+0xb4>
   2263c:	8809883a 	mov	r4,r17
   22640:	0022a640 	call	22a64 <_free_r>
   22644:	80001115 	stw	zero,68(r16)
   22648:	002094c0 	call	2094c <__sfp_lock_acquire>
   2264c:	8000030d 	sth	zero,12(r16)
   22650:	00209500 	call	20950 <__sfp_lock_release>
   22654:	9005883a 	mov	r2,r18
   22658:	003fdc06 	br	225cc <_fclose_r+0x38>
   2265c:	002093c0 	call	2093c <__sinit>
   22660:	003fd706 	br	225c0 <_fclose_r+0x2c>
   22664:	04bfffc4 	movi	r18,-1
   22668:	003fe806 	br	2260c <_fclose_r+0x78>
   2266c:	81400417 	ldw	r5,16(r16)
   22670:	8809883a 	mov	r4,r17
   22674:	0022a640 	call	22a64 <_free_r>
   22678:	003fe706 	br	22618 <_fclose_r+0x84>
   2267c:	0005883a 	mov	r2,zero
   22680:	f800283a 	ret

00022684 <fclose>:
   22684:	00800134 	movhi	r2,4
   22688:	10829804 	addi	r2,r2,2656
   2268c:	200b883a 	mov	r5,r4
   22690:	11000017 	ldw	r4,0(r2)
   22694:	00225941 	jmpi	22594 <_fclose_r>

00022698 <__sflush_r>:
   22698:	2880030b 	ldhu	r2,12(r5)
   2269c:	defffb04 	addi	sp,sp,-20
   226a0:	dcc00315 	stw	r19,12(sp)
   226a4:	dc400115 	stw	r17,4(sp)
   226a8:	dfc00415 	stw	ra,16(sp)
   226ac:	dc800215 	stw	r18,8(sp)
   226b0:	dc000015 	stw	r16,0(sp)
   226b4:	10c0020c 	andi	r3,r2,8
   226b8:	2823883a 	mov	r17,r5
   226bc:	2027883a 	mov	r19,r4
   226c0:	1800311e 	bne	r3,zero,22788 <__sflush_r+0xf0>
   226c4:	28c00117 	ldw	r3,4(r5)
   226c8:	10820014 	ori	r2,r2,2048
   226cc:	2880030d 	sth	r2,12(r5)
   226d0:	00c04b0e 	bge	zero,r3,22800 <__sflush_r+0x168>
   226d4:	8a000a17 	ldw	r8,40(r17)
   226d8:	40002326 	beq	r8,zero,22768 <__sflush_r+0xd0>
   226dc:	9c000017 	ldw	r16,0(r19)
   226e0:	10c4000c 	andi	r3,r2,4096
   226e4:	98000015 	stw	zero,0(r19)
   226e8:	18004826 	beq	r3,zero,2280c <__sflush_r+0x174>
   226ec:	89801417 	ldw	r6,80(r17)
   226f0:	10c0010c 	andi	r3,r2,4
   226f4:	18000626 	beq	r3,zero,22710 <__sflush_r+0x78>
   226f8:	88c00117 	ldw	r3,4(r17)
   226fc:	88800c17 	ldw	r2,48(r17)
   22700:	30cdc83a 	sub	r6,r6,r3
   22704:	10000226 	beq	r2,zero,22710 <__sflush_r+0x78>
   22708:	88800f17 	ldw	r2,60(r17)
   2270c:	308dc83a 	sub	r6,r6,r2
   22710:	89400717 	ldw	r5,28(r17)
   22714:	000f883a 	mov	r7,zero
   22718:	9809883a 	mov	r4,r19
   2271c:	403ee83a 	callr	r8
   22720:	00ffffc4 	movi	r3,-1
   22724:	10c04426 	beq	r2,r3,22838 <__sflush_r+0x1a0>
   22728:	88c0030b 	ldhu	r3,12(r17)
   2272c:	89000417 	ldw	r4,16(r17)
   22730:	88000115 	stw	zero,4(r17)
   22734:	197dffcc 	andi	r5,r3,63487
   22738:	8940030d 	sth	r5,12(r17)
   2273c:	89000015 	stw	r4,0(r17)
   22740:	18c4000c 	andi	r3,r3,4096
   22744:	18002c1e 	bne	r3,zero,227f8 <__sflush_r+0x160>
   22748:	89400c17 	ldw	r5,48(r17)
   2274c:	9c000015 	stw	r16,0(r19)
   22750:	28000526 	beq	r5,zero,22768 <__sflush_r+0xd0>
   22754:	88801004 	addi	r2,r17,64
   22758:	28800226 	beq	r5,r2,22764 <__sflush_r+0xcc>
   2275c:	9809883a 	mov	r4,r19
   22760:	0022a640 	call	22a64 <_free_r>
   22764:	88000c15 	stw	zero,48(r17)
   22768:	0005883a 	mov	r2,zero
   2276c:	dfc00417 	ldw	ra,16(sp)
   22770:	dcc00317 	ldw	r19,12(sp)
   22774:	dc800217 	ldw	r18,8(sp)
   22778:	dc400117 	ldw	r17,4(sp)
   2277c:	dc000017 	ldw	r16,0(sp)
   22780:	dec00504 	addi	sp,sp,20
   22784:	f800283a 	ret
   22788:	2c800417 	ldw	r18,16(r5)
   2278c:	903ff626 	beq	r18,zero,22768 <__sflush_r+0xd0>
   22790:	2c000017 	ldw	r16,0(r5)
   22794:	108000cc 	andi	r2,r2,3
   22798:	2c800015 	stw	r18,0(r5)
   2279c:	84a1c83a 	sub	r16,r16,r18
   227a0:	1000131e 	bne	r2,zero,227f0 <__sflush_r+0x158>
   227a4:	28800517 	ldw	r2,20(r5)
   227a8:	88800215 	stw	r2,8(r17)
   227ac:	04000316 	blt	zero,r16,227bc <__sflush_r+0x124>
   227b0:	003fed06 	br	22768 <__sflush_r+0xd0>
   227b4:	90a5883a 	add	r18,r18,r2
   227b8:	043feb0e 	bge	zero,r16,22768 <__sflush_r+0xd0>
   227bc:	88800917 	ldw	r2,36(r17)
   227c0:	89400717 	ldw	r5,28(r17)
   227c4:	800f883a 	mov	r7,r16
   227c8:	900d883a 	mov	r6,r18
   227cc:	9809883a 	mov	r4,r19
   227d0:	103ee83a 	callr	r2
   227d4:	80a1c83a 	sub	r16,r16,r2
   227d8:	00bff616 	blt	zero,r2,227b4 <__sflush_r+0x11c>
   227dc:	88c0030b 	ldhu	r3,12(r17)
   227e0:	00bfffc4 	movi	r2,-1
   227e4:	18c01014 	ori	r3,r3,64
   227e8:	88c0030d 	sth	r3,12(r17)
   227ec:	003fdf06 	br	2276c <__sflush_r+0xd4>
   227f0:	0005883a 	mov	r2,zero
   227f4:	003fec06 	br	227a8 <__sflush_r+0x110>
   227f8:	88801415 	stw	r2,80(r17)
   227fc:	003fd206 	br	22748 <__sflush_r+0xb0>
   22800:	28c00f17 	ldw	r3,60(r5)
   22804:	00ffb316 	blt	zero,r3,226d4 <__sflush_r+0x3c>
   22808:	003fd706 	br	22768 <__sflush_r+0xd0>
   2280c:	89400717 	ldw	r5,28(r17)
   22810:	000d883a 	mov	r6,zero
   22814:	01c00044 	movi	r7,1
   22818:	9809883a 	mov	r4,r19
   2281c:	403ee83a 	callr	r8
   22820:	100d883a 	mov	r6,r2
   22824:	00bfffc4 	movi	r2,-1
   22828:	30801426 	beq	r6,r2,2287c <__sflush_r+0x1e4>
   2282c:	8880030b 	ldhu	r2,12(r17)
   22830:	8a000a17 	ldw	r8,40(r17)
   22834:	003fae06 	br	226f0 <__sflush_r+0x58>
   22838:	98c00017 	ldw	r3,0(r19)
   2283c:	183fba26 	beq	r3,zero,22728 <__sflush_r+0x90>
   22840:	01000744 	movi	r4,29
   22844:	19000626 	beq	r3,r4,22860 <__sflush_r+0x1c8>
   22848:	01000584 	movi	r4,22
   2284c:	19000426 	beq	r3,r4,22860 <__sflush_r+0x1c8>
   22850:	88c0030b 	ldhu	r3,12(r17)
   22854:	18c01014 	ori	r3,r3,64
   22858:	88c0030d 	sth	r3,12(r17)
   2285c:	003fc306 	br	2276c <__sflush_r+0xd4>
   22860:	8880030b 	ldhu	r2,12(r17)
   22864:	88c00417 	ldw	r3,16(r17)
   22868:	88000115 	stw	zero,4(r17)
   2286c:	10bdffcc 	andi	r2,r2,63487
   22870:	8880030d 	sth	r2,12(r17)
   22874:	88c00015 	stw	r3,0(r17)
   22878:	003fb306 	br	22748 <__sflush_r+0xb0>
   2287c:	98800017 	ldw	r2,0(r19)
   22880:	103fea26 	beq	r2,zero,2282c <__sflush_r+0x194>
   22884:	00c00744 	movi	r3,29
   22888:	10c00226 	beq	r2,r3,22894 <__sflush_r+0x1fc>
   2288c:	00c00584 	movi	r3,22
   22890:	10c0031e 	bne	r2,r3,228a0 <__sflush_r+0x208>
   22894:	9c000015 	stw	r16,0(r19)
   22898:	0005883a 	mov	r2,zero
   2289c:	003fb306 	br	2276c <__sflush_r+0xd4>
   228a0:	88c0030b 	ldhu	r3,12(r17)
   228a4:	3005883a 	mov	r2,r6
   228a8:	18c01014 	ori	r3,r3,64
   228ac:	88c0030d 	sth	r3,12(r17)
   228b0:	003fae06 	br	2276c <__sflush_r+0xd4>

000228b4 <_fflush_r>:
   228b4:	defffd04 	addi	sp,sp,-12
   228b8:	dc000115 	stw	r16,4(sp)
   228bc:	dfc00215 	stw	ra,8(sp)
   228c0:	2021883a 	mov	r16,r4
   228c4:	20000226 	beq	r4,zero,228d0 <_fflush_r+0x1c>
   228c8:	20800e17 	ldw	r2,56(r4)
   228cc:	10000c26 	beq	r2,zero,22900 <_fflush_r+0x4c>
   228d0:	2880030f 	ldh	r2,12(r5)
   228d4:	1000051e 	bne	r2,zero,228ec <_fflush_r+0x38>
   228d8:	0005883a 	mov	r2,zero
   228dc:	dfc00217 	ldw	ra,8(sp)
   228e0:	dc000117 	ldw	r16,4(sp)
   228e4:	dec00304 	addi	sp,sp,12
   228e8:	f800283a 	ret
   228ec:	8009883a 	mov	r4,r16
   228f0:	dfc00217 	ldw	ra,8(sp)
   228f4:	dc000117 	ldw	r16,4(sp)
   228f8:	dec00304 	addi	sp,sp,12
   228fc:	00226981 	jmpi	22698 <__sflush_r>
   22900:	d9400015 	stw	r5,0(sp)
   22904:	002093c0 	call	2093c <__sinit>
   22908:	d9400017 	ldw	r5,0(sp)
   2290c:	003ff006 	br	228d0 <_fflush_r+0x1c>

00022910 <fflush>:
   22910:	20000526 	beq	r4,zero,22928 <fflush+0x18>
   22914:	00800134 	movhi	r2,4
   22918:	10829804 	addi	r2,r2,2656
   2291c:	200b883a 	mov	r5,r4
   22920:	11000017 	ldw	r4,0(r2)
   22924:	00228b41 	jmpi	228b4 <_fflush_r>
   22928:	00800134 	movhi	r2,4
   2292c:	10829704 	addi	r2,r2,2652
   22930:	11000017 	ldw	r4,0(r2)
   22934:	014000b4 	movhi	r5,2
   22938:	294a2d04 	addi	r5,r5,10420
   2293c:	0020f181 	jmpi	20f18 <_fwalk_reent>

00022940 <_malloc_trim_r>:
   22940:	defffb04 	addi	sp,sp,-20
   22944:	dcc00315 	stw	r19,12(sp)
   22948:	04c00134 	movhi	r19,4
   2294c:	dc800215 	stw	r18,8(sp)
   22950:	dc400115 	stw	r17,4(sp)
   22954:	dc000015 	stw	r16,0(sp)
   22958:	dfc00415 	stw	ra,16(sp)
   2295c:	2821883a 	mov	r16,r5
   22960:	9cc12004 	addi	r19,r19,1152
   22964:	2025883a 	mov	r18,r4
   22968:	00239980 	call	23998 <__malloc_lock>
   2296c:	98800217 	ldw	r2,8(r19)
   22970:	14400117 	ldw	r17,4(r2)
   22974:	00bfff04 	movi	r2,-4
   22978:	88a2703a 	and	r17,r17,r2
   2297c:	8c21c83a 	sub	r16,r17,r16
   22980:	8403fbc4 	addi	r16,r16,4079
   22984:	8020d33a 	srli	r16,r16,12
   22988:	0083ffc4 	movi	r2,4095
   2298c:	843fffc4 	addi	r16,r16,-1
   22990:	8020933a 	slli	r16,r16,12
   22994:	1400060e 	bge	r2,r16,229b0 <_malloc_trim_r+0x70>
   22998:	000b883a 	mov	r5,zero
   2299c:	9009883a 	mov	r4,r18
   229a0:	00221fc0 	call	221fc <_sbrk_r>
   229a4:	98c00217 	ldw	r3,8(r19)
   229a8:	1c47883a 	add	r3,r3,r17
   229ac:	10c00a26 	beq	r2,r3,229d8 <_malloc_trim_r+0x98>
   229b0:	9009883a 	mov	r4,r18
   229b4:	00239bc0 	call	239bc <__malloc_unlock>
   229b8:	0005883a 	mov	r2,zero
   229bc:	dfc00417 	ldw	ra,16(sp)
   229c0:	dcc00317 	ldw	r19,12(sp)
   229c4:	dc800217 	ldw	r18,8(sp)
   229c8:	dc400117 	ldw	r17,4(sp)
   229cc:	dc000017 	ldw	r16,0(sp)
   229d0:	dec00504 	addi	sp,sp,20
   229d4:	f800283a 	ret
   229d8:	040bc83a 	sub	r5,zero,r16
   229dc:	9009883a 	mov	r4,r18
   229e0:	00221fc0 	call	221fc <_sbrk_r>
   229e4:	00ffffc4 	movi	r3,-1
   229e8:	10c00d26 	beq	r2,r3,22a20 <_malloc_trim_r+0xe0>
   229ec:	00c00134 	movhi	r3,4
   229f0:	18c2b104 	addi	r3,r3,2756
   229f4:	18800017 	ldw	r2,0(r3)
   229f8:	99000217 	ldw	r4,8(r19)
   229fc:	8c23c83a 	sub	r17,r17,r16
   22a00:	8c400054 	ori	r17,r17,1
   22a04:	1421c83a 	sub	r16,r2,r16
   22a08:	24400115 	stw	r17,4(r4)
   22a0c:	9009883a 	mov	r4,r18
   22a10:	1c000015 	stw	r16,0(r3)
   22a14:	00239bc0 	call	239bc <__malloc_unlock>
   22a18:	00800044 	movi	r2,1
   22a1c:	003fe706 	br	229bc <_malloc_trim_r+0x7c>
   22a20:	000b883a 	mov	r5,zero
   22a24:	9009883a 	mov	r4,r18
   22a28:	00221fc0 	call	221fc <_sbrk_r>
   22a2c:	99000217 	ldw	r4,8(r19)
   22a30:	014003c4 	movi	r5,15
   22a34:	1107c83a 	sub	r3,r2,r4
   22a38:	28ffdd0e 	bge	r5,r3,229b0 <_malloc_trim_r+0x70>
   22a3c:	01400134 	movhi	r5,4
   22a40:	29429904 	addi	r5,r5,2660
   22a44:	29400017 	ldw	r5,0(r5)
   22a48:	18c00054 	ori	r3,r3,1
   22a4c:	20c00115 	stw	r3,4(r4)
   22a50:	00c00134 	movhi	r3,4
   22a54:	1145c83a 	sub	r2,r2,r5
   22a58:	18c2b104 	addi	r3,r3,2756
   22a5c:	18800015 	stw	r2,0(r3)
   22a60:	003fd306 	br	229b0 <_malloc_trim_r+0x70>

00022a64 <_free_r>:
   22a64:	28004126 	beq	r5,zero,22b6c <_free_r+0x108>
   22a68:	defffd04 	addi	sp,sp,-12
   22a6c:	dc400115 	stw	r17,4(sp)
   22a70:	dc000015 	stw	r16,0(sp)
   22a74:	2023883a 	mov	r17,r4
   22a78:	2821883a 	mov	r16,r5
   22a7c:	dfc00215 	stw	ra,8(sp)
   22a80:	00239980 	call	23998 <__malloc_lock>
   22a84:	81ffff17 	ldw	r7,-4(r16)
   22a88:	00bfff84 	movi	r2,-2
   22a8c:	01000134 	movhi	r4,4
   22a90:	81bffe04 	addi	r6,r16,-8
   22a94:	3884703a 	and	r2,r7,r2
   22a98:	21012004 	addi	r4,r4,1152
   22a9c:	308b883a 	add	r5,r6,r2
   22aa0:	2a400117 	ldw	r9,4(r5)
   22aa4:	22000217 	ldw	r8,8(r4)
   22aa8:	00ffff04 	movi	r3,-4
   22aac:	48c6703a 	and	r3,r9,r3
   22ab0:	2a005726 	beq	r5,r8,22c10 <_free_r+0x1ac>
   22ab4:	28c00115 	stw	r3,4(r5)
   22ab8:	39c0004c 	andi	r7,r7,1
   22abc:	3800091e 	bne	r7,zero,22ae4 <_free_r+0x80>
   22ac0:	823ffe17 	ldw	r8,-8(r16)
   22ac4:	22400204 	addi	r9,r4,8
   22ac8:	320dc83a 	sub	r6,r6,r8
   22acc:	31c00217 	ldw	r7,8(r6)
   22ad0:	1205883a 	add	r2,r2,r8
   22ad4:	3a406526 	beq	r7,r9,22c6c <_free_r+0x208>
   22ad8:	32000317 	ldw	r8,12(r6)
   22adc:	3a000315 	stw	r8,12(r7)
   22ae0:	41c00215 	stw	r7,8(r8)
   22ae4:	28cf883a 	add	r7,r5,r3
   22ae8:	39c00117 	ldw	r7,4(r7)
   22aec:	39c0004c 	andi	r7,r7,1
   22af0:	38003a26 	beq	r7,zero,22bdc <_free_r+0x178>
   22af4:	10c00054 	ori	r3,r2,1
   22af8:	30c00115 	stw	r3,4(r6)
   22afc:	3087883a 	add	r3,r6,r2
   22b00:	18800015 	stw	r2,0(r3)
   22b04:	00c07fc4 	movi	r3,511
   22b08:	18801936 	bltu	r3,r2,22b70 <_free_r+0x10c>
   22b0c:	1004d0fa 	srli	r2,r2,3
   22b10:	01c00044 	movi	r7,1
   22b14:	21400117 	ldw	r5,4(r4)
   22b18:	10c00044 	addi	r3,r2,1
   22b1c:	18c7883a 	add	r3,r3,r3
   22b20:	1005d0ba 	srai	r2,r2,2
   22b24:	18c7883a 	add	r3,r3,r3
   22b28:	18c7883a 	add	r3,r3,r3
   22b2c:	1907883a 	add	r3,r3,r4
   22b30:	3884983a 	sll	r2,r7,r2
   22b34:	19c00017 	ldw	r7,0(r3)
   22b38:	1a3ffe04 	addi	r8,r3,-8
   22b3c:	1144b03a 	or	r2,r2,r5
   22b40:	32000315 	stw	r8,12(r6)
   22b44:	31c00215 	stw	r7,8(r6)
   22b48:	20800115 	stw	r2,4(r4)
   22b4c:	19800015 	stw	r6,0(r3)
   22b50:	39800315 	stw	r6,12(r7)
   22b54:	8809883a 	mov	r4,r17
   22b58:	dfc00217 	ldw	ra,8(sp)
   22b5c:	dc400117 	ldw	r17,4(sp)
   22b60:	dc000017 	ldw	r16,0(sp)
   22b64:	dec00304 	addi	sp,sp,12
   22b68:	00239bc1 	jmpi	239bc <__malloc_unlock>
   22b6c:	f800283a 	ret
   22b70:	100ad27a 	srli	r5,r2,9
   22b74:	00c00104 	movi	r3,4
   22b78:	19404a36 	bltu	r3,r5,22ca4 <_free_r+0x240>
   22b7c:	100ad1ba 	srli	r5,r2,6
   22b80:	28c00e44 	addi	r3,r5,57
   22b84:	18c7883a 	add	r3,r3,r3
   22b88:	29400e04 	addi	r5,r5,56
   22b8c:	18c7883a 	add	r3,r3,r3
   22b90:	18c7883a 	add	r3,r3,r3
   22b94:	1909883a 	add	r4,r3,r4
   22b98:	20c00017 	ldw	r3,0(r4)
   22b9c:	01c00134 	movhi	r7,4
   22ba0:	213ffe04 	addi	r4,r4,-8
   22ba4:	39c12004 	addi	r7,r7,1152
   22ba8:	20c04426 	beq	r4,r3,22cbc <_free_r+0x258>
   22bac:	01ffff04 	movi	r7,-4
   22bb0:	19400117 	ldw	r5,4(r3)
   22bb4:	29ca703a 	and	r5,r5,r7
   22bb8:	1140022e 	bgeu	r2,r5,22bc4 <_free_r+0x160>
   22bbc:	18c00217 	ldw	r3,8(r3)
   22bc0:	20fffb1e 	bne	r4,r3,22bb0 <_free_r+0x14c>
   22bc4:	19000317 	ldw	r4,12(r3)
   22bc8:	31000315 	stw	r4,12(r6)
   22bcc:	30c00215 	stw	r3,8(r6)
   22bd0:	21800215 	stw	r6,8(r4)
   22bd4:	19800315 	stw	r6,12(r3)
   22bd8:	003fde06 	br	22b54 <_free_r+0xf0>
   22bdc:	29c00217 	ldw	r7,8(r5)
   22be0:	10c5883a 	add	r2,r2,r3
   22be4:	00c00134 	movhi	r3,4
   22be8:	18c12204 	addi	r3,r3,1160
   22bec:	38c03b26 	beq	r7,r3,22cdc <_free_r+0x278>
   22bf0:	2a000317 	ldw	r8,12(r5)
   22bf4:	11400054 	ori	r5,r2,1
   22bf8:	3087883a 	add	r3,r6,r2
   22bfc:	3a000315 	stw	r8,12(r7)
   22c00:	41c00215 	stw	r7,8(r8)
   22c04:	31400115 	stw	r5,4(r6)
   22c08:	18800015 	stw	r2,0(r3)
   22c0c:	003fbd06 	br	22b04 <_free_r+0xa0>
   22c10:	39c0004c 	andi	r7,r7,1
   22c14:	10c5883a 	add	r2,r2,r3
   22c18:	3800071e 	bne	r7,zero,22c38 <_free_r+0x1d4>
   22c1c:	81fffe17 	ldw	r7,-8(r16)
   22c20:	31cdc83a 	sub	r6,r6,r7
   22c24:	30c00317 	ldw	r3,12(r6)
   22c28:	31400217 	ldw	r5,8(r6)
   22c2c:	11c5883a 	add	r2,r2,r7
   22c30:	28c00315 	stw	r3,12(r5)
   22c34:	19400215 	stw	r5,8(r3)
   22c38:	10c00054 	ori	r3,r2,1
   22c3c:	30c00115 	stw	r3,4(r6)
   22c40:	00c00134 	movhi	r3,4
   22c44:	18c29a04 	addi	r3,r3,2664
   22c48:	18c00017 	ldw	r3,0(r3)
   22c4c:	21800215 	stw	r6,8(r4)
   22c50:	10ffc036 	bltu	r2,r3,22b54 <_free_r+0xf0>
   22c54:	00800134 	movhi	r2,4
   22c58:	1082aa04 	addi	r2,r2,2728
   22c5c:	11400017 	ldw	r5,0(r2)
   22c60:	8809883a 	mov	r4,r17
   22c64:	00229400 	call	22940 <_malloc_trim_r>
   22c68:	003fba06 	br	22b54 <_free_r+0xf0>
   22c6c:	28c9883a 	add	r4,r5,r3
   22c70:	21000117 	ldw	r4,4(r4)
   22c74:	2100004c 	andi	r4,r4,1
   22c78:	2000391e 	bne	r4,zero,22d60 <_free_r+0x2fc>
   22c7c:	29c00217 	ldw	r7,8(r5)
   22c80:	29000317 	ldw	r4,12(r5)
   22c84:	1885883a 	add	r2,r3,r2
   22c88:	10c00054 	ori	r3,r2,1
   22c8c:	39000315 	stw	r4,12(r7)
   22c90:	21c00215 	stw	r7,8(r4)
   22c94:	30c00115 	stw	r3,4(r6)
   22c98:	308d883a 	add	r6,r6,r2
   22c9c:	30800015 	stw	r2,0(r6)
   22ca0:	003fac06 	br	22b54 <_free_r+0xf0>
   22ca4:	00c00504 	movi	r3,20
   22ca8:	19401536 	bltu	r3,r5,22d00 <_free_r+0x29c>
   22cac:	28c01704 	addi	r3,r5,92
   22cb0:	18c7883a 	add	r3,r3,r3
   22cb4:	294016c4 	addi	r5,r5,91
   22cb8:	003fb406 	br	22b8c <_free_r+0x128>
   22cbc:	280bd0ba 	srai	r5,r5,2
   22cc0:	00c00044 	movi	r3,1
   22cc4:	38800117 	ldw	r2,4(r7)
   22cc8:	194a983a 	sll	r5,r3,r5
   22ccc:	2007883a 	mov	r3,r4
   22cd0:	2884b03a 	or	r2,r5,r2
   22cd4:	38800115 	stw	r2,4(r7)
   22cd8:	003fbb06 	br	22bc8 <_free_r+0x164>
   22cdc:	21800515 	stw	r6,20(r4)
   22ce0:	21800415 	stw	r6,16(r4)
   22ce4:	10c00054 	ori	r3,r2,1
   22ce8:	31c00315 	stw	r7,12(r6)
   22cec:	31c00215 	stw	r7,8(r6)
   22cf0:	30c00115 	stw	r3,4(r6)
   22cf4:	308d883a 	add	r6,r6,r2
   22cf8:	30800015 	stw	r2,0(r6)
   22cfc:	003f9506 	br	22b54 <_free_r+0xf0>
   22d00:	00c01504 	movi	r3,84
   22d04:	19400536 	bltu	r3,r5,22d1c <_free_r+0x2b8>
   22d08:	100ad33a 	srli	r5,r2,12
   22d0c:	28c01bc4 	addi	r3,r5,111
   22d10:	18c7883a 	add	r3,r3,r3
   22d14:	29401b84 	addi	r5,r5,110
   22d18:	003f9c06 	br	22b8c <_free_r+0x128>
   22d1c:	00c05504 	movi	r3,340
   22d20:	19400536 	bltu	r3,r5,22d38 <_free_r+0x2d4>
   22d24:	100ad3fa 	srli	r5,r2,15
   22d28:	28c01e04 	addi	r3,r5,120
   22d2c:	18c7883a 	add	r3,r3,r3
   22d30:	29401dc4 	addi	r5,r5,119
   22d34:	003f9506 	br	22b8c <_free_r+0x128>
   22d38:	00c15504 	movi	r3,1364
   22d3c:	19400536 	bltu	r3,r5,22d54 <_free_r+0x2f0>
   22d40:	100ad4ba 	srli	r5,r2,18
   22d44:	28c01f44 	addi	r3,r5,125
   22d48:	18c7883a 	add	r3,r3,r3
   22d4c:	29401f04 	addi	r5,r5,124
   22d50:	003f8e06 	br	22b8c <_free_r+0x128>
   22d54:	00c03f84 	movi	r3,254
   22d58:	01401f84 	movi	r5,126
   22d5c:	003f8b06 	br	22b8c <_free_r+0x128>
   22d60:	10c00054 	ori	r3,r2,1
   22d64:	30c00115 	stw	r3,4(r6)
   22d68:	308d883a 	add	r6,r6,r2
   22d6c:	30800015 	stw	r2,0(r6)
   22d70:	003f7806 	br	22b54 <_free_r+0xf0>

00022d74 <_lseek_r>:
   22d74:	defffd04 	addi	sp,sp,-12
   22d78:	2805883a 	mov	r2,r5
   22d7c:	dc000015 	stw	r16,0(sp)
   22d80:	04000134 	movhi	r16,4
   22d84:	dc400115 	stw	r17,4(sp)
   22d88:	300b883a 	mov	r5,r6
   22d8c:	8402ab04 	addi	r16,r16,2732
   22d90:	2023883a 	mov	r17,r4
   22d94:	380d883a 	mov	r6,r7
   22d98:	1009883a 	mov	r4,r2
   22d9c:	dfc00215 	stw	ra,8(sp)
   22da0:	80000015 	stw	zero,0(r16)
   22da4:	00238400 	call	23840 <lseek>
   22da8:	00ffffc4 	movi	r3,-1
   22dac:	10c00526 	beq	r2,r3,22dc4 <_lseek_r+0x50>
   22db0:	dfc00217 	ldw	ra,8(sp)
   22db4:	dc400117 	ldw	r17,4(sp)
   22db8:	dc000017 	ldw	r16,0(sp)
   22dbc:	dec00304 	addi	sp,sp,12
   22dc0:	f800283a 	ret
   22dc4:	80c00017 	ldw	r3,0(r16)
   22dc8:	183ff926 	beq	r3,zero,22db0 <_lseek_r+0x3c>
   22dcc:	88c00015 	stw	r3,0(r17)
   22dd0:	003ff706 	br	22db0 <_lseek_r+0x3c>

00022dd4 <__smakebuf_r>:
   22dd4:	2880030b 	ldhu	r2,12(r5)
   22dd8:	10c0008c 	andi	r3,r2,2
   22ddc:	1800411e 	bne	r3,zero,22ee4 <__smakebuf_r+0x110>
   22de0:	deffec04 	addi	sp,sp,-80
   22de4:	dc000f15 	stw	r16,60(sp)
   22de8:	2821883a 	mov	r16,r5
   22dec:	2940038f 	ldh	r5,14(r5)
   22df0:	dc401015 	stw	r17,64(sp)
   22df4:	dfc01315 	stw	ra,76(sp)
   22df8:	dcc01215 	stw	r19,72(sp)
   22dfc:	dc801115 	stw	r18,68(sp)
   22e00:	2023883a 	mov	r17,r4
   22e04:	28001c16 	blt	r5,zero,22e78 <__smakebuf_r+0xa4>
   22e08:	d80d883a 	mov	r6,sp
   22e0c:	0022ff00 	call	22ff0 <_fstat_r>
   22e10:	10001816 	blt	r2,zero,22e74 <__smakebuf_r+0xa0>
   22e14:	d8800117 	ldw	r2,4(sp)
   22e18:	00e00014 	movui	r3,32768
   22e1c:	10bc000c 	andi	r2,r2,61440
   22e20:	14c80020 	cmpeqi	r19,r2,8192
   22e24:	10c03726 	beq	r2,r3,22f04 <__smakebuf_r+0x130>
   22e28:	80c0030b 	ldhu	r3,12(r16)
   22e2c:	18c20014 	ori	r3,r3,2048
   22e30:	80c0030d 	sth	r3,12(r16)
   22e34:	00c80004 	movi	r3,8192
   22e38:	10c0521e 	bne	r2,r3,22f84 <__smakebuf_r+0x1b0>
   22e3c:	8140038f 	ldh	r5,14(r16)
   22e40:	8809883a 	mov	r4,r17
   22e44:	002304c0 	call	2304c <_isatty_r>
   22e48:	10004c26 	beq	r2,zero,22f7c <__smakebuf_r+0x1a8>
   22e4c:	8080030b 	ldhu	r2,12(r16)
   22e50:	80c010c4 	addi	r3,r16,67
   22e54:	80c00015 	stw	r3,0(r16)
   22e58:	10800054 	ori	r2,r2,1
   22e5c:	8080030d 	sth	r2,12(r16)
   22e60:	00800044 	movi	r2,1
   22e64:	80c00415 	stw	r3,16(r16)
   22e68:	80800515 	stw	r2,20(r16)
   22e6c:	04810004 	movi	r18,1024
   22e70:	00000706 	br	22e90 <__smakebuf_r+0xbc>
   22e74:	8080030b 	ldhu	r2,12(r16)
   22e78:	10c0200c 	andi	r3,r2,128
   22e7c:	18001f1e 	bne	r3,zero,22efc <__smakebuf_r+0x128>
   22e80:	04810004 	movi	r18,1024
   22e84:	10820014 	ori	r2,r2,2048
   22e88:	8080030d 	sth	r2,12(r16)
   22e8c:	0027883a 	mov	r19,zero
   22e90:	900b883a 	mov	r5,r18
   22e94:	8809883a 	mov	r4,r17
   22e98:	0020fdc0 	call	20fdc <_malloc_r>
   22e9c:	10002c26 	beq	r2,zero,22f50 <__smakebuf_r+0x17c>
   22ea0:	80c0030b 	ldhu	r3,12(r16)
   22ea4:	010000b4 	movhi	r4,2
   22ea8:	21017904 	addi	r4,r4,1508
   22eac:	89000f15 	stw	r4,60(r17)
   22eb0:	18c02014 	ori	r3,r3,128
   22eb4:	80c0030d 	sth	r3,12(r16)
   22eb8:	80800015 	stw	r2,0(r16)
   22ebc:	80800415 	stw	r2,16(r16)
   22ec0:	84800515 	stw	r18,20(r16)
   22ec4:	98001a1e 	bne	r19,zero,22f30 <__smakebuf_r+0x15c>
   22ec8:	dfc01317 	ldw	ra,76(sp)
   22ecc:	dcc01217 	ldw	r19,72(sp)
   22ed0:	dc801117 	ldw	r18,68(sp)
   22ed4:	dc401017 	ldw	r17,64(sp)
   22ed8:	dc000f17 	ldw	r16,60(sp)
   22edc:	dec01404 	addi	sp,sp,80
   22ee0:	f800283a 	ret
   22ee4:	288010c4 	addi	r2,r5,67
   22ee8:	28800015 	stw	r2,0(r5)
   22eec:	28800415 	stw	r2,16(r5)
   22ef0:	00800044 	movi	r2,1
   22ef4:	28800515 	stw	r2,20(r5)
   22ef8:	f800283a 	ret
   22efc:	04801004 	movi	r18,64
   22f00:	003fe006 	br	22e84 <__smakebuf_r+0xb0>
   22f04:	81000a17 	ldw	r4,40(r16)
   22f08:	00c000b4 	movhi	r3,2
   22f0c:	18c8ca04 	addi	r3,r3,9000
   22f10:	20ffc51e 	bne	r4,r3,22e28 <__smakebuf_r+0x54>
   22f14:	8080030b 	ldhu	r2,12(r16)
   22f18:	04810004 	movi	r18,1024
   22f1c:	84801315 	stw	r18,76(r16)
   22f20:	1484b03a 	or	r2,r2,r18
   22f24:	8080030d 	sth	r2,12(r16)
   22f28:	0027883a 	mov	r19,zero
   22f2c:	003fd806 	br	22e90 <__smakebuf_r+0xbc>
   22f30:	8140038f 	ldh	r5,14(r16)
   22f34:	8809883a 	mov	r4,r17
   22f38:	002304c0 	call	2304c <_isatty_r>
   22f3c:	103fe226 	beq	r2,zero,22ec8 <__smakebuf_r+0xf4>
   22f40:	8080030b 	ldhu	r2,12(r16)
   22f44:	10800054 	ori	r2,r2,1
   22f48:	8080030d 	sth	r2,12(r16)
   22f4c:	003fde06 	br	22ec8 <__smakebuf_r+0xf4>
   22f50:	8080030b 	ldhu	r2,12(r16)
   22f54:	10c0800c 	andi	r3,r2,512
   22f58:	183fdb1e 	bne	r3,zero,22ec8 <__smakebuf_r+0xf4>
   22f5c:	10800094 	ori	r2,r2,2
   22f60:	80c010c4 	addi	r3,r16,67
   22f64:	8080030d 	sth	r2,12(r16)
   22f68:	00800044 	movi	r2,1
   22f6c:	80c00015 	stw	r3,0(r16)
   22f70:	80c00415 	stw	r3,16(r16)
   22f74:	80800515 	stw	r2,20(r16)
   22f78:	003fd306 	br	22ec8 <__smakebuf_r+0xf4>
   22f7c:	04810004 	movi	r18,1024
   22f80:	003fc306 	br	22e90 <__smakebuf_r+0xbc>
   22f84:	0027883a 	mov	r19,zero
   22f88:	04810004 	movi	r18,1024
   22f8c:	003fc006 	br	22e90 <__smakebuf_r+0xbc>

00022f90 <_read_r>:
   22f90:	defffd04 	addi	sp,sp,-12
   22f94:	2805883a 	mov	r2,r5
   22f98:	dc000015 	stw	r16,0(sp)
   22f9c:	04000134 	movhi	r16,4
   22fa0:	dc400115 	stw	r17,4(sp)
   22fa4:	300b883a 	mov	r5,r6
   22fa8:	8402ab04 	addi	r16,r16,2732
   22fac:	2023883a 	mov	r17,r4
   22fb0:	380d883a 	mov	r6,r7
   22fb4:	1009883a 	mov	r4,r2
   22fb8:	dfc00215 	stw	ra,8(sp)
   22fbc:	80000015 	stw	zero,0(r16)
   22fc0:	0023a1c0 	call	23a1c <read>
   22fc4:	00ffffc4 	movi	r3,-1
   22fc8:	10c00526 	beq	r2,r3,22fe0 <_read_r+0x50>
   22fcc:	dfc00217 	ldw	ra,8(sp)
   22fd0:	dc400117 	ldw	r17,4(sp)
   22fd4:	dc000017 	ldw	r16,0(sp)
   22fd8:	dec00304 	addi	sp,sp,12
   22fdc:	f800283a 	ret
   22fe0:	80c00017 	ldw	r3,0(r16)
   22fe4:	183ff926 	beq	r3,zero,22fcc <_read_r+0x3c>
   22fe8:	88c00015 	stw	r3,0(r17)
   22fec:	003ff706 	br	22fcc <_read_r+0x3c>

00022ff0 <_fstat_r>:
   22ff0:	defffd04 	addi	sp,sp,-12
   22ff4:	2805883a 	mov	r2,r5
   22ff8:	dc000015 	stw	r16,0(sp)
   22ffc:	04000134 	movhi	r16,4
   23000:	dc400115 	stw	r17,4(sp)
   23004:	8402ab04 	addi	r16,r16,2732
   23008:	2023883a 	mov	r17,r4
   2300c:	300b883a 	mov	r5,r6
   23010:	1009883a 	mov	r4,r2
   23014:	dfc00215 	stw	ra,8(sp)
   23018:	80000015 	stw	zero,0(r16)
   2301c:	00233f80 	call	233f8 <fstat>
   23020:	00ffffc4 	movi	r3,-1
   23024:	10c00526 	beq	r2,r3,2303c <_fstat_r+0x4c>
   23028:	dfc00217 	ldw	ra,8(sp)
   2302c:	dc400117 	ldw	r17,4(sp)
   23030:	dc000017 	ldw	r16,0(sp)
   23034:	dec00304 	addi	sp,sp,12
   23038:	f800283a 	ret
   2303c:	80c00017 	ldw	r3,0(r16)
   23040:	183ff926 	beq	r3,zero,23028 <_fstat_r+0x38>
   23044:	88c00015 	stw	r3,0(r17)
   23048:	003ff706 	br	23028 <_fstat_r+0x38>

0002304c <_isatty_r>:
   2304c:	defffd04 	addi	sp,sp,-12
   23050:	dc000015 	stw	r16,0(sp)
   23054:	04000134 	movhi	r16,4
   23058:	dc400115 	stw	r17,4(sp)
   2305c:	8402ab04 	addi	r16,r16,2732
   23060:	2023883a 	mov	r17,r4
   23064:	2809883a 	mov	r4,r5
   23068:	dfc00215 	stw	ra,8(sp)
   2306c:	80000015 	stw	zero,0(r16)
   23070:	002366c0 	call	2366c <isatty>
   23074:	00ffffc4 	movi	r3,-1
   23078:	10c00526 	beq	r2,r3,23090 <_isatty_r+0x44>
   2307c:	dfc00217 	ldw	ra,8(sp)
   23080:	dc400117 	ldw	r17,4(sp)
   23084:	dc000017 	ldw	r16,0(sp)
   23088:	dec00304 	addi	sp,sp,12
   2308c:	f800283a 	ret
   23090:	80c00017 	ldw	r3,0(r16)
   23094:	183ff926 	beq	r3,zero,2307c <_isatty_r+0x30>
   23098:	88c00015 	stw	r3,0(r17)
   2309c:	003ff706 	br	2307c <_isatty_r+0x30>

000230a0 <__divsi3>:
   230a0:	20001b16 	blt	r4,zero,23110 <__divsi3+0x70>
   230a4:	000f883a 	mov	r7,zero
   230a8:	28001616 	blt	r5,zero,23104 <__divsi3+0x64>
   230ac:	200d883a 	mov	r6,r4
   230b0:	29001a2e 	bgeu	r5,r4,2311c <__divsi3+0x7c>
   230b4:	00800804 	movi	r2,32
   230b8:	00c00044 	movi	r3,1
   230bc:	00000106 	br	230c4 <__divsi3+0x24>
   230c0:	10000d26 	beq	r2,zero,230f8 <__divsi3+0x58>
   230c4:	294b883a 	add	r5,r5,r5
   230c8:	10bfffc4 	addi	r2,r2,-1
   230cc:	18c7883a 	add	r3,r3,r3
   230d0:	293ffb36 	bltu	r5,r4,230c0 <__divsi3+0x20>
   230d4:	0005883a 	mov	r2,zero
   230d8:	18000726 	beq	r3,zero,230f8 <__divsi3+0x58>
   230dc:	0005883a 	mov	r2,zero
   230e0:	31400236 	bltu	r6,r5,230ec <__divsi3+0x4c>
   230e4:	314dc83a 	sub	r6,r6,r5
   230e8:	10c4b03a 	or	r2,r2,r3
   230ec:	1806d07a 	srli	r3,r3,1
   230f0:	280ad07a 	srli	r5,r5,1
   230f4:	183ffa1e 	bne	r3,zero,230e0 <__divsi3+0x40>
   230f8:	38000126 	beq	r7,zero,23100 <__divsi3+0x60>
   230fc:	0085c83a 	sub	r2,zero,r2
   23100:	f800283a 	ret
   23104:	014bc83a 	sub	r5,zero,r5
   23108:	39c0005c 	xori	r7,r7,1
   2310c:	003fe706 	br	230ac <__divsi3+0xc>
   23110:	0109c83a 	sub	r4,zero,r4
   23114:	01c00044 	movi	r7,1
   23118:	003fe306 	br	230a8 <__divsi3+0x8>
   2311c:	00c00044 	movi	r3,1
   23120:	003fee06 	br	230dc <__divsi3+0x3c>

00023124 <__modsi3>:
   23124:	20001716 	blt	r4,zero,23184 <__modsi3+0x60>
   23128:	000f883a 	mov	r7,zero
   2312c:	2005883a 	mov	r2,r4
   23130:	28001216 	blt	r5,zero,2317c <__modsi3+0x58>
   23134:	2900162e 	bgeu	r5,r4,23190 <__modsi3+0x6c>
   23138:	01800804 	movi	r6,32
   2313c:	00c00044 	movi	r3,1
   23140:	00000106 	br	23148 <__modsi3+0x24>
   23144:	30000a26 	beq	r6,zero,23170 <__modsi3+0x4c>
   23148:	294b883a 	add	r5,r5,r5
   2314c:	31bfffc4 	addi	r6,r6,-1
   23150:	18c7883a 	add	r3,r3,r3
   23154:	293ffb36 	bltu	r5,r4,23144 <__modsi3+0x20>
   23158:	18000526 	beq	r3,zero,23170 <__modsi3+0x4c>
   2315c:	1806d07a 	srli	r3,r3,1
   23160:	11400136 	bltu	r2,r5,23168 <__modsi3+0x44>
   23164:	1145c83a 	sub	r2,r2,r5
   23168:	280ad07a 	srli	r5,r5,1
   2316c:	183ffb1e 	bne	r3,zero,2315c <__modsi3+0x38>
   23170:	38000126 	beq	r7,zero,23178 <__modsi3+0x54>
   23174:	0085c83a 	sub	r2,zero,r2
   23178:	f800283a 	ret
   2317c:	014bc83a 	sub	r5,zero,r5
   23180:	003fec06 	br	23134 <__modsi3+0x10>
   23184:	0109c83a 	sub	r4,zero,r4
   23188:	01c00044 	movi	r7,1
   2318c:	003fe706 	br	2312c <__modsi3+0x8>
   23190:	00c00044 	movi	r3,1
   23194:	003ff106 	br	2315c <__modsi3+0x38>

00023198 <__udivsi3>:
   23198:	200d883a 	mov	r6,r4
   2319c:	2900152e 	bgeu	r5,r4,231f4 <__udivsi3+0x5c>
   231a0:	28001416 	blt	r5,zero,231f4 <__udivsi3+0x5c>
   231a4:	00800804 	movi	r2,32
   231a8:	00c00044 	movi	r3,1
   231ac:	00000206 	br	231b8 <__udivsi3+0x20>
   231b0:	10000e26 	beq	r2,zero,231ec <__udivsi3+0x54>
   231b4:	28000516 	blt	r5,zero,231cc <__udivsi3+0x34>
   231b8:	294b883a 	add	r5,r5,r5
   231bc:	10bfffc4 	addi	r2,r2,-1
   231c0:	18c7883a 	add	r3,r3,r3
   231c4:	293ffa36 	bltu	r5,r4,231b0 <__udivsi3+0x18>
   231c8:	18000826 	beq	r3,zero,231ec <__udivsi3+0x54>
   231cc:	0005883a 	mov	r2,zero
   231d0:	31400236 	bltu	r6,r5,231dc <__udivsi3+0x44>
   231d4:	314dc83a 	sub	r6,r6,r5
   231d8:	10c4b03a 	or	r2,r2,r3
   231dc:	1806d07a 	srli	r3,r3,1
   231e0:	280ad07a 	srli	r5,r5,1
   231e4:	183ffa1e 	bne	r3,zero,231d0 <__udivsi3+0x38>
   231e8:	f800283a 	ret
   231ec:	0005883a 	mov	r2,zero
   231f0:	f800283a 	ret
   231f4:	00c00044 	movi	r3,1
   231f8:	003ff406 	br	231cc <__udivsi3+0x34>

000231fc <__umodsi3>:
   231fc:	2005883a 	mov	r2,r4
   23200:	2900122e 	bgeu	r5,r4,2324c <__umodsi3+0x50>
   23204:	28001116 	blt	r5,zero,2324c <__umodsi3+0x50>
   23208:	01800804 	movi	r6,32
   2320c:	00c00044 	movi	r3,1
   23210:	00000206 	br	2321c <__umodsi3+0x20>
   23214:	30000c26 	beq	r6,zero,23248 <__umodsi3+0x4c>
   23218:	28000516 	blt	r5,zero,23230 <__umodsi3+0x34>
   2321c:	294b883a 	add	r5,r5,r5
   23220:	31bfffc4 	addi	r6,r6,-1
   23224:	18c7883a 	add	r3,r3,r3
   23228:	293ffa36 	bltu	r5,r4,23214 <__umodsi3+0x18>
   2322c:	18000626 	beq	r3,zero,23248 <__umodsi3+0x4c>
   23230:	1806d07a 	srli	r3,r3,1
   23234:	11400136 	bltu	r2,r5,2323c <__umodsi3+0x40>
   23238:	1145c83a 	sub	r2,r2,r5
   2323c:	280ad07a 	srli	r5,r5,1
   23240:	183ffb1e 	bne	r3,zero,23230 <__umodsi3+0x34>
   23244:	f800283a 	ret
   23248:	f800283a 	ret
   2324c:	00c00044 	movi	r3,1
   23250:	003ff706 	br	23230 <__umodsi3+0x34>

00023254 <__mulsi3>:
   23254:	0005883a 	mov	r2,zero
   23258:	20000726 	beq	r4,zero,23278 <__mulsi3+0x24>
   2325c:	20c0004c 	andi	r3,r4,1
   23260:	2008d07a 	srli	r4,r4,1
   23264:	18000126 	beq	r3,zero,2326c <__mulsi3+0x18>
   23268:	1145883a 	add	r2,r2,r5
   2326c:	294b883a 	add	r5,r5,r5
   23270:	203ffa1e 	bne	r4,zero,2325c <__mulsi3+0x8>
   23274:	f800283a 	ret
   23278:	f800283a 	ret

0002327c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2327c:	defffe04 	addi	sp,sp,-8
   23280:	dfc00115 	stw	ra,4(sp)
   23284:	df000015 	stw	fp,0(sp)
   23288:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2328c:	d0a00917 	ldw	r2,-32732(gp)
   23290:	10000326 	beq	r2,zero,232a0 <alt_get_errno+0x24>
   23294:	d0a00917 	ldw	r2,-32732(gp)
   23298:	103ee83a 	callr	r2
   2329c:	00000106 	br	232a4 <alt_get_errno+0x28>
   232a0:	d0a01404 	addi	r2,gp,-32688
}
   232a4:	e037883a 	mov	sp,fp
   232a8:	dfc00117 	ldw	ra,4(sp)
   232ac:	df000017 	ldw	fp,0(sp)
   232b0:	dec00204 	addi	sp,sp,8
   232b4:	f800283a 	ret

000232b8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   232b8:	defffb04 	addi	sp,sp,-20
   232bc:	dfc00415 	stw	ra,16(sp)
   232c0:	df000315 	stw	fp,12(sp)
   232c4:	df000304 	addi	fp,sp,12
   232c8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   232cc:	e0bfff17 	ldw	r2,-4(fp)
   232d0:	10000816 	blt	r2,zero,232f4 <close+0x3c>
   232d4:	01400304 	movi	r5,12
   232d8:	e13fff17 	ldw	r4,-4(fp)
   232dc:	00232540 	call	23254 <__mulsi3>
   232e0:	1007883a 	mov	r3,r2
   232e4:	00800134 	movhi	r2,4
   232e8:	10822c04 	addi	r2,r2,2224
   232ec:	1885883a 	add	r2,r3,r2
   232f0:	00000106 	br	232f8 <close+0x40>
   232f4:	0005883a 	mov	r2,zero
   232f8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   232fc:	e0bffd17 	ldw	r2,-12(fp)
   23300:	10001926 	beq	r2,zero,23368 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   23304:	e0bffd17 	ldw	r2,-12(fp)
   23308:	10800017 	ldw	r2,0(r2)
   2330c:	10800417 	ldw	r2,16(r2)
   23310:	10000626 	beq	r2,zero,2332c <close+0x74>
   23314:	e0bffd17 	ldw	r2,-12(fp)
   23318:	10800017 	ldw	r2,0(r2)
   2331c:	10800417 	ldw	r2,16(r2)
   23320:	e13ffd17 	ldw	r4,-12(fp)
   23324:	103ee83a 	callr	r2
   23328:	00000106 	br	23330 <close+0x78>
   2332c:	0005883a 	mov	r2,zero
   23330:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   23334:	e13fff17 	ldw	r4,-4(fp)
   23338:	0023b200 	call	23b20 <alt_release_fd>
    if (rval < 0)
   2333c:	e0bffe17 	ldw	r2,-8(fp)
   23340:	1000070e 	bge	r2,zero,23360 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   23344:	002327c0 	call	2327c <alt_get_errno>
   23348:	1007883a 	mov	r3,r2
   2334c:	e0bffe17 	ldw	r2,-8(fp)
   23350:	0085c83a 	sub	r2,zero,r2
   23354:	18800015 	stw	r2,0(r3)
      return -1;
   23358:	00bfffc4 	movi	r2,-1
   2335c:	00000706 	br	2337c <close+0xc4>
    }
    return 0;
   23360:	0005883a 	mov	r2,zero
   23364:	00000506 	br	2337c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23368:	002327c0 	call	2327c <alt_get_errno>
   2336c:	1007883a 	mov	r3,r2
   23370:	00801444 	movi	r2,81
   23374:	18800015 	stw	r2,0(r3)
    return -1;
   23378:	00bfffc4 	movi	r2,-1
  }
}
   2337c:	e037883a 	mov	sp,fp
   23380:	dfc00117 	ldw	ra,4(sp)
   23384:	df000017 	ldw	fp,0(sp)
   23388:	dec00204 	addi	sp,sp,8
   2338c:	f800283a 	ret

00023390 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   23390:	defffc04 	addi	sp,sp,-16
   23394:	df000315 	stw	fp,12(sp)
   23398:	df000304 	addi	fp,sp,12
   2339c:	e13ffd15 	stw	r4,-12(fp)
   233a0:	e17ffe15 	stw	r5,-8(fp)
   233a4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   233a8:	e0bfff17 	ldw	r2,-4(fp)
}
   233ac:	e037883a 	mov	sp,fp
   233b0:	df000017 	ldw	fp,0(sp)
   233b4:	dec00104 	addi	sp,sp,4
   233b8:	f800283a 	ret

000233bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   233bc:	defffe04 	addi	sp,sp,-8
   233c0:	dfc00115 	stw	ra,4(sp)
   233c4:	df000015 	stw	fp,0(sp)
   233c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   233cc:	d0a00917 	ldw	r2,-32732(gp)
   233d0:	10000326 	beq	r2,zero,233e0 <alt_get_errno+0x24>
   233d4:	d0a00917 	ldw	r2,-32732(gp)
   233d8:	103ee83a 	callr	r2
   233dc:	00000106 	br	233e4 <alt_get_errno+0x28>
   233e0:	d0a01404 	addi	r2,gp,-32688
}
   233e4:	e037883a 	mov	sp,fp
   233e8:	dfc00117 	ldw	ra,4(sp)
   233ec:	df000017 	ldw	fp,0(sp)
   233f0:	dec00204 	addi	sp,sp,8
   233f4:	f800283a 	ret

000233f8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   233f8:	defffb04 	addi	sp,sp,-20
   233fc:	dfc00415 	stw	ra,16(sp)
   23400:	df000315 	stw	fp,12(sp)
   23404:	df000304 	addi	fp,sp,12
   23408:	e13ffe15 	stw	r4,-8(fp)
   2340c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23410:	e0bffe17 	ldw	r2,-8(fp)
   23414:	10000816 	blt	r2,zero,23438 <fstat+0x40>
   23418:	01400304 	movi	r5,12
   2341c:	e13ffe17 	ldw	r4,-8(fp)
   23420:	00232540 	call	23254 <__mulsi3>
   23424:	1007883a 	mov	r3,r2
   23428:	00800134 	movhi	r2,4
   2342c:	10822c04 	addi	r2,r2,2224
   23430:	1885883a 	add	r2,r3,r2
   23434:	00000106 	br	2343c <fstat+0x44>
   23438:	0005883a 	mov	r2,zero
   2343c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   23440:	e0bffd17 	ldw	r2,-12(fp)
   23444:	10001026 	beq	r2,zero,23488 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   23448:	e0bffd17 	ldw	r2,-12(fp)
   2344c:	10800017 	ldw	r2,0(r2)
   23450:	10800817 	ldw	r2,32(r2)
   23454:	10000726 	beq	r2,zero,23474 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   23458:	e0bffd17 	ldw	r2,-12(fp)
   2345c:	10800017 	ldw	r2,0(r2)
   23460:	10800817 	ldw	r2,32(r2)
   23464:	e17fff17 	ldw	r5,-4(fp)
   23468:	e13ffd17 	ldw	r4,-12(fp)
   2346c:	103ee83a 	callr	r2
   23470:	00000a06 	br	2349c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   23474:	e0bfff17 	ldw	r2,-4(fp)
   23478:	00c80004 	movi	r3,8192
   2347c:	10c00115 	stw	r3,4(r2)
      return 0;
   23480:	0005883a 	mov	r2,zero
   23484:	00000506 	br	2349c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23488:	00233bc0 	call	233bc <alt_get_errno>
   2348c:	1007883a 	mov	r3,r2
   23490:	00801444 	movi	r2,81
   23494:	18800015 	stw	r2,0(r3)
    return -1;
   23498:	00bfffc4 	movi	r2,-1
  }
}
   2349c:	e037883a 	mov	sp,fp
   234a0:	dfc00117 	ldw	ra,4(sp)
   234a4:	df000017 	ldw	fp,0(sp)
   234a8:	dec00204 	addi	sp,sp,8
   234ac:	f800283a 	ret

000234b0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   234b0:	defff004 	addi	sp,sp,-64
   234b4:	df000f15 	stw	fp,60(sp)
   234b8:	df000f04 	addi	fp,sp,60
   234bc:	e13ffd15 	stw	r4,-12(fp)
   234c0:	e17ffe15 	stw	r5,-8(fp)
   234c4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   234c8:	00bffa84 	movi	r2,-22
   234cc:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   234d0:	e0bffd17 	ldw	r2,-12(fp)
   234d4:	10800828 	cmpgeui	r2,r2,32
   234d8:	1000501e 	bne	r2,zero,2361c <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   234dc:	0005303a 	rdctl	r2,status
   234e0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   234e4:	e0fff617 	ldw	r3,-40(fp)
   234e8:	00bfff84 	movi	r2,-2
   234ec:	1884703a 	and	r2,r3,r2
   234f0:	1001703a 	wrctl	status,r2
  
  return context;
   234f4:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   234f8:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   234fc:	00800134 	movhi	r2,4
   23500:	1082bb04 	addi	r2,r2,2796
   23504:	e0fffd17 	ldw	r3,-12(fp)
   23508:	180690fa 	slli	r3,r3,3
   2350c:	10c5883a 	add	r2,r2,r3
   23510:	e0ffff17 	ldw	r3,-4(fp)
   23514:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   23518:	00800134 	movhi	r2,4
   2351c:	1082bb04 	addi	r2,r2,2796
   23520:	e0fffd17 	ldw	r3,-12(fp)
   23524:	180690fa 	slli	r3,r3,3
   23528:	10c5883a 	add	r2,r2,r3
   2352c:	10800104 	addi	r2,r2,4
   23530:	e0fffe17 	ldw	r3,-8(fp)
   23534:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   23538:	e0bfff17 	ldw	r2,-4(fp)
   2353c:	10001926 	beq	r2,zero,235a4 <alt_irq_register+0xf4>
   23540:	e0bffd17 	ldw	r2,-12(fp)
   23544:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23548:	0005303a 	rdctl	r2,status
   2354c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23550:	e0fff717 	ldw	r3,-36(fp)
   23554:	00bfff84 	movi	r2,-2
   23558:	1884703a 	and	r2,r3,r2
   2355c:	1001703a 	wrctl	status,r2
  
  return context;
   23560:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   23564:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   23568:	00c00044 	movi	r3,1
   2356c:	e0bff217 	ldw	r2,-56(fp)
   23570:	1884983a 	sll	r2,r3,r2
   23574:	1007883a 	mov	r3,r2
   23578:	d0a01517 	ldw	r2,-32684(gp)
   2357c:	1884b03a 	or	r2,r3,r2
   23580:	d0a01515 	stw	r2,-32684(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   23584:	d0a01517 	ldw	r2,-32684(gp)
   23588:	100170fa 	wrctl	ienable,r2
   2358c:	e0bff817 	ldw	r2,-32(fp)
   23590:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23594:	e0bff917 	ldw	r2,-28(fp)
   23598:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2359c:	0005883a 	mov	r2,zero
   235a0:	00001906 	br	23608 <alt_irq_register+0x158>
   235a4:	e0bffd17 	ldw	r2,-12(fp)
   235a8:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   235ac:	0005303a 	rdctl	r2,status
   235b0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   235b4:	e0fffa17 	ldw	r3,-24(fp)
   235b8:	00bfff84 	movi	r2,-2
   235bc:	1884703a 	and	r2,r3,r2
   235c0:	1001703a 	wrctl	status,r2
  
  return context;
   235c4:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   235c8:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   235cc:	00c00044 	movi	r3,1
   235d0:	e0bff417 	ldw	r2,-48(fp)
   235d4:	1884983a 	sll	r2,r3,r2
   235d8:	0084303a 	nor	r2,zero,r2
   235dc:	1007883a 	mov	r3,r2
   235e0:	d0a01517 	ldw	r2,-32684(gp)
   235e4:	1884703a 	and	r2,r3,r2
   235e8:	d0a01515 	stw	r2,-32684(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   235ec:	d0a01517 	ldw	r2,-32684(gp)
   235f0:	100170fa 	wrctl	ienable,r2
   235f4:	e0bffb17 	ldw	r2,-20(fp)
   235f8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   235fc:	e0bffc17 	ldw	r2,-16(fp)
   23600:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   23604:	0005883a 	mov	r2,zero
   23608:	e0bff115 	stw	r2,-60(fp)
   2360c:	e0bff317 	ldw	r2,-52(fp)
   23610:	e0bff515 	stw	r2,-44(fp)
   23614:	e0bff517 	ldw	r2,-44(fp)
   23618:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   2361c:	e0bff117 	ldw	r2,-60(fp)
}
   23620:	e037883a 	mov	sp,fp
   23624:	df000017 	ldw	fp,0(sp)
   23628:	dec00104 	addi	sp,sp,4
   2362c:	f800283a 	ret

00023630 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23630:	defffe04 	addi	sp,sp,-8
   23634:	dfc00115 	stw	ra,4(sp)
   23638:	df000015 	stw	fp,0(sp)
   2363c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23640:	d0a00917 	ldw	r2,-32732(gp)
   23644:	10000326 	beq	r2,zero,23654 <alt_get_errno+0x24>
   23648:	d0a00917 	ldw	r2,-32732(gp)
   2364c:	103ee83a 	callr	r2
   23650:	00000106 	br	23658 <alt_get_errno+0x28>
   23654:	d0a01404 	addi	r2,gp,-32688
}
   23658:	e037883a 	mov	sp,fp
   2365c:	dfc00117 	ldw	ra,4(sp)
   23660:	df000017 	ldw	fp,0(sp)
   23664:	dec00204 	addi	sp,sp,8
   23668:	f800283a 	ret

0002366c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   2366c:	deffed04 	addi	sp,sp,-76
   23670:	dfc01215 	stw	ra,72(sp)
   23674:	df001115 	stw	fp,68(sp)
   23678:	df001104 	addi	fp,sp,68
   2367c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23680:	e0bfff17 	ldw	r2,-4(fp)
   23684:	10000816 	blt	r2,zero,236a8 <isatty+0x3c>
   23688:	01400304 	movi	r5,12
   2368c:	e13fff17 	ldw	r4,-4(fp)
   23690:	00232540 	call	23254 <__mulsi3>
   23694:	1007883a 	mov	r3,r2
   23698:	00800134 	movhi	r2,4
   2369c:	10822c04 	addi	r2,r2,2224
   236a0:	1885883a 	add	r2,r3,r2
   236a4:	00000106 	br	236ac <isatty+0x40>
   236a8:	0005883a 	mov	r2,zero
   236ac:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   236b0:	e0bfef17 	ldw	r2,-68(fp)
   236b4:	10000e26 	beq	r2,zero,236f0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   236b8:	e0bfef17 	ldw	r2,-68(fp)
   236bc:	10800017 	ldw	r2,0(r2)
   236c0:	10800817 	ldw	r2,32(r2)
   236c4:	1000021e 	bne	r2,zero,236d0 <isatty+0x64>
    {
      return 1;
   236c8:	00800044 	movi	r2,1
   236cc:	00000d06 	br	23704 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   236d0:	e0bff004 	addi	r2,fp,-64
   236d4:	100b883a 	mov	r5,r2
   236d8:	e13fff17 	ldw	r4,-4(fp)
   236dc:	00233f80 	call	233f8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   236e0:	e0bff117 	ldw	r2,-60(fp)
   236e4:	10880020 	cmpeqi	r2,r2,8192
   236e8:	10803fcc 	andi	r2,r2,255
   236ec:	00000506 	br	23704 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   236f0:	00236300 	call	23630 <alt_get_errno>
   236f4:	1007883a 	mov	r3,r2
   236f8:	00801444 	movi	r2,81
   236fc:	18800015 	stw	r2,0(r3)
    return 0;
   23700:	0005883a 	mov	r2,zero
  }
}
   23704:	e037883a 	mov	sp,fp
   23708:	dfc00117 	ldw	ra,4(sp)
   2370c:	df000017 	ldw	fp,0(sp)
   23710:	dec00204 	addi	sp,sp,8
   23714:	f800283a 	ret

00023718 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   23718:	defffc04 	addi	sp,sp,-16
   2371c:	df000315 	stw	fp,12(sp)
   23720:	df000304 	addi	fp,sp,12
   23724:	e13ffd15 	stw	r4,-12(fp)
   23728:	e17ffe15 	stw	r5,-8(fp)
   2372c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   23730:	e0fffe17 	ldw	r3,-8(fp)
   23734:	e0bffd17 	ldw	r2,-12(fp)
   23738:	18800c26 	beq	r3,r2,2376c <alt_load_section+0x54>
  {
    while( to != end )
   2373c:	00000806 	br	23760 <alt_load_section+0x48>
    {
      *to++ = *from++;
   23740:	e0bffe17 	ldw	r2,-8(fp)
   23744:	10c00104 	addi	r3,r2,4
   23748:	e0fffe15 	stw	r3,-8(fp)
   2374c:	e0fffd17 	ldw	r3,-12(fp)
   23750:	19000104 	addi	r4,r3,4
   23754:	e13ffd15 	stw	r4,-12(fp)
   23758:	18c00017 	ldw	r3,0(r3)
   2375c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   23760:	e0fffe17 	ldw	r3,-8(fp)
   23764:	e0bfff17 	ldw	r2,-4(fp)
   23768:	18bff51e 	bne	r3,r2,23740 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   2376c:	0001883a 	nop
   23770:	e037883a 	mov	sp,fp
   23774:	df000017 	ldw	fp,0(sp)
   23778:	dec00104 	addi	sp,sp,4
   2377c:	f800283a 	ret

00023780 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   23780:	defffe04 	addi	sp,sp,-8
   23784:	dfc00115 	stw	ra,4(sp)
   23788:	df000015 	stw	fp,0(sp)
   2378c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   23790:	01800134 	movhi	r6,4
   23794:	3182a304 	addi	r6,r6,2700
   23798:	01400134 	movhi	r5,4
   2379c:	29401304 	addi	r5,r5,76
   237a0:	010000b4 	movhi	r4,2
   237a4:	21139b04 	addi	r4,r4,20076
   237a8:	00237180 	call	23718 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   237ac:	018000b4 	movhi	r6,2
   237b0:	31808c04 	addi	r6,r6,560
   237b4:	014000b4 	movhi	r5,2
   237b8:	29400804 	addi	r5,r5,32
   237bc:	010000b4 	movhi	r4,2
   237c0:	21000804 	addi	r4,r4,32
   237c4:	00237180 	call	23718 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   237c8:	01800134 	movhi	r6,4
   237cc:	31801304 	addi	r6,r6,76
   237d0:	01400134 	movhi	r5,4
   237d4:	29400004 	addi	r5,r5,0
   237d8:	01000134 	movhi	r4,4
   237dc:	21000004 	addi	r4,r4,0
   237e0:	00237180 	call	23718 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   237e4:	00241f80 	call	241f8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   237e8:	00243b80 	call	243b8 <alt_icache_flush_all>
}
   237ec:	0001883a 	nop
   237f0:	e037883a 	mov	sp,fp
   237f4:	dfc00117 	ldw	ra,4(sp)
   237f8:	df000017 	ldw	fp,0(sp)
   237fc:	dec00204 	addi	sp,sp,8
   23800:	f800283a 	ret

00023804 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23804:	defffe04 	addi	sp,sp,-8
   23808:	dfc00115 	stw	ra,4(sp)
   2380c:	df000015 	stw	fp,0(sp)
   23810:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23814:	d0a00917 	ldw	r2,-32732(gp)
   23818:	10000326 	beq	r2,zero,23828 <alt_get_errno+0x24>
   2381c:	d0a00917 	ldw	r2,-32732(gp)
   23820:	103ee83a 	callr	r2
   23824:	00000106 	br	2382c <alt_get_errno+0x28>
   23828:	d0a01404 	addi	r2,gp,-32688
}
   2382c:	e037883a 	mov	sp,fp
   23830:	dfc00117 	ldw	ra,4(sp)
   23834:	df000017 	ldw	fp,0(sp)
   23838:	dec00204 	addi	sp,sp,8
   2383c:	f800283a 	ret

00023840 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   23840:	defff904 	addi	sp,sp,-28
   23844:	dfc00615 	stw	ra,24(sp)
   23848:	df000515 	stw	fp,20(sp)
   2384c:	df000504 	addi	fp,sp,20
   23850:	e13ffd15 	stw	r4,-12(fp)
   23854:	e17ffe15 	stw	r5,-8(fp)
   23858:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   2385c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23860:	e0bffd17 	ldw	r2,-12(fp)
   23864:	10000816 	blt	r2,zero,23888 <lseek+0x48>
   23868:	01400304 	movi	r5,12
   2386c:	e13ffd17 	ldw	r4,-12(fp)
   23870:	00232540 	call	23254 <__mulsi3>
   23874:	1007883a 	mov	r3,r2
   23878:	00800134 	movhi	r2,4
   2387c:	10822c04 	addi	r2,r2,2224
   23880:	1885883a 	add	r2,r3,r2
   23884:	00000106 	br	2388c <lseek+0x4c>
   23888:	0005883a 	mov	r2,zero
   2388c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   23890:	e0bffc17 	ldw	r2,-16(fp)
   23894:	10001026 	beq	r2,zero,238d8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   23898:	e0bffc17 	ldw	r2,-16(fp)
   2389c:	10800017 	ldw	r2,0(r2)
   238a0:	10800717 	ldw	r2,28(r2)
   238a4:	10000926 	beq	r2,zero,238cc <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   238a8:	e0bffc17 	ldw	r2,-16(fp)
   238ac:	10800017 	ldw	r2,0(r2)
   238b0:	10800717 	ldw	r2,28(r2)
   238b4:	e1bfff17 	ldw	r6,-4(fp)
   238b8:	e17ffe17 	ldw	r5,-8(fp)
   238bc:	e13ffc17 	ldw	r4,-16(fp)
   238c0:	103ee83a 	callr	r2
   238c4:	e0bffb15 	stw	r2,-20(fp)
   238c8:	00000506 	br	238e0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   238cc:	00bfde84 	movi	r2,-134
   238d0:	e0bffb15 	stw	r2,-20(fp)
   238d4:	00000206 	br	238e0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   238d8:	00bfebc4 	movi	r2,-81
   238dc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   238e0:	e0bffb17 	ldw	r2,-20(fp)
   238e4:	1000070e 	bge	r2,zero,23904 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   238e8:	00238040 	call	23804 <alt_get_errno>
   238ec:	1007883a 	mov	r3,r2
   238f0:	e0bffb17 	ldw	r2,-20(fp)
   238f4:	0085c83a 	sub	r2,zero,r2
   238f8:	18800015 	stw	r2,0(r3)
    rc = -1;
   238fc:	00bfffc4 	movi	r2,-1
   23900:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   23904:	e0bffb17 	ldw	r2,-20(fp)
}
   23908:	e037883a 	mov	sp,fp
   2390c:	dfc00117 	ldw	ra,4(sp)
   23910:	df000017 	ldw	fp,0(sp)
   23914:	dec00204 	addi	sp,sp,8
   23918:	f800283a 	ret

0002391c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   2391c:	defffd04 	addi	sp,sp,-12
   23920:	dfc00215 	stw	ra,8(sp)
   23924:	df000115 	stw	fp,4(sp)
   23928:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   2392c:	0009883a 	mov	r4,zero
   23930:	0023df40 	call	23df4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   23934:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   23938:	0023e2c0 	call	23e2c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   2393c:	01800134 	movhi	r6,4
   23940:	31800904 	addi	r6,r6,36
   23944:	01400134 	movhi	r5,4
   23948:	29400904 	addi	r5,r5,36
   2394c:	01000134 	movhi	r4,4
   23950:	21000904 	addi	r4,r4,36
   23954:	00244bc0 	call	244bc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   23958:	00242f80 	call	242f8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   2395c:	010000b4 	movhi	r4,2
   23960:	2110d604 	addi	r4,r4,17240
   23964:	0024ad80 	call	24ad8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   23968:	d0a01617 	ldw	r2,-32680(gp)
   2396c:	d0e01717 	ldw	r3,-32676(gp)
   23970:	d1201817 	ldw	r4,-32672(gp)
   23974:	200d883a 	mov	r6,r4
   23978:	180b883a 	mov	r5,r3
   2397c:	1009883a 	mov	r4,r2
   23980:	00203700 	call	20370 <main>
   23984:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   23988:	01000044 	movi	r4,1
   2398c:	00232b80 	call	232b8 <close>
  exit (result);
   23990:	e13fff17 	ldw	r4,-4(fp)
   23994:	0024aec0 	call	24aec <exit>

00023998 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   23998:	defffe04 	addi	sp,sp,-8
   2399c:	df000115 	stw	fp,4(sp)
   239a0:	df000104 	addi	fp,sp,4
   239a4:	e13fff15 	stw	r4,-4(fp)
}
   239a8:	0001883a 	nop
   239ac:	e037883a 	mov	sp,fp
   239b0:	df000017 	ldw	fp,0(sp)
   239b4:	dec00104 	addi	sp,sp,4
   239b8:	f800283a 	ret

000239bc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   239bc:	defffe04 	addi	sp,sp,-8
   239c0:	df000115 	stw	fp,4(sp)
   239c4:	df000104 	addi	fp,sp,4
   239c8:	e13fff15 	stw	r4,-4(fp)
}
   239cc:	0001883a 	nop
   239d0:	e037883a 	mov	sp,fp
   239d4:	df000017 	ldw	fp,0(sp)
   239d8:	dec00104 	addi	sp,sp,4
   239dc:	f800283a 	ret

000239e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   239e0:	defffe04 	addi	sp,sp,-8
   239e4:	dfc00115 	stw	ra,4(sp)
   239e8:	df000015 	stw	fp,0(sp)
   239ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   239f0:	d0a00917 	ldw	r2,-32732(gp)
   239f4:	10000326 	beq	r2,zero,23a04 <alt_get_errno+0x24>
   239f8:	d0a00917 	ldw	r2,-32732(gp)
   239fc:	103ee83a 	callr	r2
   23a00:	00000106 	br	23a08 <alt_get_errno+0x28>
   23a04:	d0a01404 	addi	r2,gp,-32688
}
   23a08:	e037883a 	mov	sp,fp
   23a0c:	dfc00117 	ldw	ra,4(sp)
   23a10:	df000017 	ldw	fp,0(sp)
   23a14:	dec00204 	addi	sp,sp,8
   23a18:	f800283a 	ret

00023a1c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   23a1c:	defff904 	addi	sp,sp,-28
   23a20:	dfc00615 	stw	ra,24(sp)
   23a24:	df000515 	stw	fp,20(sp)
   23a28:	df000504 	addi	fp,sp,20
   23a2c:	e13ffd15 	stw	r4,-12(fp)
   23a30:	e17ffe15 	stw	r5,-8(fp)
   23a34:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23a38:	e0bffd17 	ldw	r2,-12(fp)
   23a3c:	10000816 	blt	r2,zero,23a60 <read+0x44>
   23a40:	01400304 	movi	r5,12
   23a44:	e13ffd17 	ldw	r4,-12(fp)
   23a48:	00232540 	call	23254 <__mulsi3>
   23a4c:	1007883a 	mov	r3,r2
   23a50:	00800134 	movhi	r2,4
   23a54:	10822c04 	addi	r2,r2,2224
   23a58:	1885883a 	add	r2,r3,r2
   23a5c:	00000106 	br	23a64 <read+0x48>
   23a60:	0005883a 	mov	r2,zero
   23a64:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   23a68:	e0bffb17 	ldw	r2,-20(fp)
   23a6c:	10002226 	beq	r2,zero,23af8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23a70:	e0bffb17 	ldw	r2,-20(fp)
   23a74:	10800217 	ldw	r2,8(r2)
   23a78:	108000cc 	andi	r2,r2,3
   23a7c:	10800060 	cmpeqi	r2,r2,1
   23a80:	1000181e 	bne	r2,zero,23ae4 <read+0xc8>
        (fd->dev->read))
   23a84:	e0bffb17 	ldw	r2,-20(fp)
   23a88:	10800017 	ldw	r2,0(r2)
   23a8c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23a90:	10001426 	beq	r2,zero,23ae4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   23a94:	e0bffb17 	ldw	r2,-20(fp)
   23a98:	10800017 	ldw	r2,0(r2)
   23a9c:	10800517 	ldw	r2,20(r2)
   23aa0:	e0ffff17 	ldw	r3,-4(fp)
   23aa4:	180d883a 	mov	r6,r3
   23aa8:	e17ffe17 	ldw	r5,-8(fp)
   23aac:	e13ffb17 	ldw	r4,-20(fp)
   23ab0:	103ee83a 	callr	r2
   23ab4:	e0bffc15 	stw	r2,-16(fp)
   23ab8:	e0bffc17 	ldw	r2,-16(fp)
   23abc:	1000070e 	bge	r2,zero,23adc <read+0xc0>
        {
          ALT_ERRNO = -rval;
   23ac0:	00239e00 	call	239e0 <alt_get_errno>
   23ac4:	1007883a 	mov	r3,r2
   23ac8:	e0bffc17 	ldw	r2,-16(fp)
   23acc:	0085c83a 	sub	r2,zero,r2
   23ad0:	18800015 	stw	r2,0(r3)
          return -1;
   23ad4:	00bfffc4 	movi	r2,-1
   23ad8:	00000c06 	br	23b0c <read+0xf0>
        }
        return rval;
   23adc:	e0bffc17 	ldw	r2,-16(fp)
   23ae0:	00000a06 	br	23b0c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   23ae4:	00239e00 	call	239e0 <alt_get_errno>
   23ae8:	1007883a 	mov	r3,r2
   23aec:	00800344 	movi	r2,13
   23af0:	18800015 	stw	r2,0(r3)
   23af4:	00000406 	br	23b08 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   23af8:	00239e00 	call	239e0 <alt_get_errno>
   23afc:	1007883a 	mov	r3,r2
   23b00:	00801444 	movi	r2,81
   23b04:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23b08:	00bfffc4 	movi	r2,-1
}
   23b0c:	e037883a 	mov	sp,fp
   23b10:	dfc00117 	ldw	ra,4(sp)
   23b14:	df000017 	ldw	fp,0(sp)
   23b18:	dec00204 	addi	sp,sp,8
   23b1c:	f800283a 	ret

00023b20 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   23b20:	defffc04 	addi	sp,sp,-16
   23b24:	dfc00315 	stw	ra,12(sp)
   23b28:	df000215 	stw	fp,8(sp)
   23b2c:	dc000115 	stw	r16,4(sp)
   23b30:	df000204 	addi	fp,sp,8
   23b34:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   23b38:	e0bffe17 	ldw	r2,-8(fp)
   23b3c:	108000d0 	cmplti	r2,r2,3
   23b40:	1000111e 	bne	r2,zero,23b88 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   23b44:	04000134 	movhi	r16,4
   23b48:	84022c04 	addi	r16,r16,2224
   23b4c:	e0bffe17 	ldw	r2,-8(fp)
   23b50:	01400304 	movi	r5,12
   23b54:	1009883a 	mov	r4,r2
   23b58:	00232540 	call	23254 <__mulsi3>
   23b5c:	8085883a 	add	r2,r16,r2
   23b60:	10800204 	addi	r2,r2,8
   23b64:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   23b68:	04000134 	movhi	r16,4
   23b6c:	84022c04 	addi	r16,r16,2224
   23b70:	e0bffe17 	ldw	r2,-8(fp)
   23b74:	01400304 	movi	r5,12
   23b78:	1009883a 	mov	r4,r2
   23b7c:	00232540 	call	23254 <__mulsi3>
   23b80:	8085883a 	add	r2,r16,r2
   23b84:	10000015 	stw	zero,0(r2)
  }
}
   23b88:	0001883a 	nop
   23b8c:	e6ffff04 	addi	sp,fp,-4
   23b90:	dfc00217 	ldw	ra,8(sp)
   23b94:	df000117 	ldw	fp,4(sp)
   23b98:	dc000017 	ldw	r16,0(sp)
   23b9c:	dec00304 	addi	sp,sp,12
   23ba0:	f800283a 	ret

00023ba4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   23ba4:	defff904 	addi	sp,sp,-28
   23ba8:	df000615 	stw	fp,24(sp)
   23bac:	df000604 	addi	fp,sp,24
   23bb0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23bb4:	0005303a 	rdctl	r2,status
   23bb8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23bbc:	e0fffe17 	ldw	r3,-8(fp)
   23bc0:	00bfff84 	movi	r2,-2
   23bc4:	1884703a 	and	r2,r3,r2
   23bc8:	1001703a 	wrctl	status,r2
  
  return context;
   23bcc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   23bd0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   23bd4:	d0a00b17 	ldw	r2,-32724(gp)
   23bd8:	10c000c4 	addi	r3,r2,3
   23bdc:	00bfff04 	movi	r2,-4
   23be0:	1884703a 	and	r2,r3,r2
   23be4:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   23be8:	d0e00b17 	ldw	r3,-32724(gp)
   23bec:	e0bfff17 	ldw	r2,-4(fp)
   23bf0:	1887883a 	add	r3,r3,r2
   23bf4:	00800134 	movhi	r2,4
   23bf8:	109e3d04 	addi	r2,r2,30964
   23bfc:	10c0062e 	bgeu	r2,r3,23c18 <sbrk+0x74>
   23c00:	e0bffb17 	ldw	r2,-20(fp)
   23c04:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23c08:	e0bffa17 	ldw	r2,-24(fp)
   23c0c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   23c10:	00bfffc4 	movi	r2,-1
   23c14:	00000b06 	br	23c44 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   23c18:	d0a00b17 	ldw	r2,-32724(gp)
   23c1c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   23c20:	d0e00b17 	ldw	r3,-32724(gp)
   23c24:	e0bfff17 	ldw	r2,-4(fp)
   23c28:	1885883a 	add	r2,r3,r2
   23c2c:	d0a00b15 	stw	r2,-32724(gp)
   23c30:	e0bffb17 	ldw	r2,-20(fp)
   23c34:	e0bffc15 	stw	r2,-16(fp)
   23c38:	e0bffc17 	ldw	r2,-16(fp)
   23c3c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   23c40:	e0bffd17 	ldw	r2,-12(fp)
} 
   23c44:	e037883a 	mov	sp,fp
   23c48:	df000017 	ldw	fp,0(sp)
   23c4c:	dec00104 	addi	sp,sp,4
   23c50:	f800283a 	ret

00023c54 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   23c54:	defffd04 	addi	sp,sp,-12
   23c58:	dfc00215 	stw	ra,8(sp)
   23c5c:	df000115 	stw	fp,4(sp)
   23c60:	df000104 	addi	fp,sp,4
   23c64:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   23c68:	e13fff17 	ldw	r4,-4(fp)
   23c6c:	00240a00 	call	240a0 <alt_busy_sleep>
}
   23c70:	e037883a 	mov	sp,fp
   23c74:	dfc00117 	ldw	ra,4(sp)
   23c78:	df000017 	ldw	fp,0(sp)
   23c7c:	dec00204 	addi	sp,sp,8
   23c80:	f800283a 	ret

00023c84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23c84:	defffe04 	addi	sp,sp,-8
   23c88:	dfc00115 	stw	ra,4(sp)
   23c8c:	df000015 	stw	fp,0(sp)
   23c90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23c94:	d0a00917 	ldw	r2,-32732(gp)
   23c98:	10000326 	beq	r2,zero,23ca8 <alt_get_errno+0x24>
   23c9c:	d0a00917 	ldw	r2,-32732(gp)
   23ca0:	103ee83a 	callr	r2
   23ca4:	00000106 	br	23cac <alt_get_errno+0x28>
   23ca8:	d0a01404 	addi	r2,gp,-32688
}
   23cac:	e037883a 	mov	sp,fp
   23cb0:	dfc00117 	ldw	ra,4(sp)
   23cb4:	df000017 	ldw	fp,0(sp)
   23cb8:	dec00204 	addi	sp,sp,8
   23cbc:	f800283a 	ret

00023cc0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   23cc0:	defff904 	addi	sp,sp,-28
   23cc4:	dfc00615 	stw	ra,24(sp)
   23cc8:	df000515 	stw	fp,20(sp)
   23ccc:	df000504 	addi	fp,sp,20
   23cd0:	e13ffd15 	stw	r4,-12(fp)
   23cd4:	e17ffe15 	stw	r5,-8(fp)
   23cd8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23cdc:	e0bffd17 	ldw	r2,-12(fp)
   23ce0:	10000816 	blt	r2,zero,23d04 <write+0x44>
   23ce4:	01400304 	movi	r5,12
   23ce8:	e13ffd17 	ldw	r4,-12(fp)
   23cec:	00232540 	call	23254 <__mulsi3>
   23cf0:	1007883a 	mov	r3,r2
   23cf4:	00800134 	movhi	r2,4
   23cf8:	10822c04 	addi	r2,r2,2224
   23cfc:	1885883a 	add	r2,r3,r2
   23d00:	00000106 	br	23d08 <write+0x48>
   23d04:	0005883a 	mov	r2,zero
   23d08:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   23d0c:	e0bffb17 	ldw	r2,-20(fp)
   23d10:	10002126 	beq	r2,zero,23d98 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   23d14:	e0bffb17 	ldw	r2,-20(fp)
   23d18:	10800217 	ldw	r2,8(r2)
   23d1c:	108000cc 	andi	r2,r2,3
   23d20:	10001826 	beq	r2,zero,23d84 <write+0xc4>
   23d24:	e0bffb17 	ldw	r2,-20(fp)
   23d28:	10800017 	ldw	r2,0(r2)
   23d2c:	10800617 	ldw	r2,24(r2)
   23d30:	10001426 	beq	r2,zero,23d84 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   23d34:	e0bffb17 	ldw	r2,-20(fp)
   23d38:	10800017 	ldw	r2,0(r2)
   23d3c:	10800617 	ldw	r2,24(r2)
   23d40:	e0ffff17 	ldw	r3,-4(fp)
   23d44:	180d883a 	mov	r6,r3
   23d48:	e17ffe17 	ldw	r5,-8(fp)
   23d4c:	e13ffb17 	ldw	r4,-20(fp)
   23d50:	103ee83a 	callr	r2
   23d54:	e0bffc15 	stw	r2,-16(fp)
   23d58:	e0bffc17 	ldw	r2,-16(fp)
   23d5c:	1000070e 	bge	r2,zero,23d7c <write+0xbc>
      {
        ALT_ERRNO = -rval;
   23d60:	0023c840 	call	23c84 <alt_get_errno>
   23d64:	1007883a 	mov	r3,r2
   23d68:	e0bffc17 	ldw	r2,-16(fp)
   23d6c:	0085c83a 	sub	r2,zero,r2
   23d70:	18800015 	stw	r2,0(r3)
        return -1;
   23d74:	00bfffc4 	movi	r2,-1
   23d78:	00000c06 	br	23dac <write+0xec>
      }
      return rval;
   23d7c:	e0bffc17 	ldw	r2,-16(fp)
   23d80:	00000a06 	br	23dac <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   23d84:	0023c840 	call	23c84 <alt_get_errno>
   23d88:	1007883a 	mov	r3,r2
   23d8c:	00800344 	movi	r2,13
   23d90:	18800015 	stw	r2,0(r3)
   23d94:	00000406 	br	23da8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   23d98:	0023c840 	call	23c84 <alt_get_errno>
   23d9c:	1007883a 	mov	r3,r2
   23da0:	00801444 	movi	r2,81
   23da4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23da8:	00bfffc4 	movi	r2,-1
}
   23dac:	e037883a 	mov	sp,fp
   23db0:	dfc00117 	ldw	ra,4(sp)
   23db4:	df000017 	ldw	fp,0(sp)
   23db8:	dec00204 	addi	sp,sp,8
   23dbc:	f800283a 	ret

00023dc0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   23dc0:	defffd04 	addi	sp,sp,-12
   23dc4:	dfc00215 	stw	ra,8(sp)
   23dc8:	df000115 	stw	fp,4(sp)
   23dcc:	df000104 	addi	fp,sp,4
   23dd0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   23dd4:	d1600604 	addi	r5,gp,-32744
   23dd8:	e13fff17 	ldw	r4,-4(fp)
   23ddc:	00242540 	call	24254 <alt_dev_llist_insert>
}
   23de0:	e037883a 	mov	sp,fp
   23de4:	dfc00117 	ldw	ra,4(sp)
   23de8:	df000017 	ldw	fp,0(sp)
   23dec:	dec00204 	addi	sp,sp,8
   23df0:	f800283a 	ret

00023df4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   23df4:	defffd04 	addi	sp,sp,-12
   23df8:	dfc00215 	stw	ra,8(sp)
   23dfc:	df000115 	stw	fp,4(sp)
   23e00:	df000104 	addi	fp,sp,4
   23e04:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   23e08:	00247bc0 	call	247bc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   23e0c:	00800044 	movi	r2,1
   23e10:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   23e14:	0001883a 	nop
   23e18:	e037883a 	mov	sp,fp
   23e1c:	dfc00117 	ldw	ra,4(sp)
   23e20:	df000017 	ldw	fp,0(sp)
   23e24:	dec00204 	addi	sp,sp,8
   23e28:	f800283a 	ret

00023e2c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   23e2c:	defffe04 	addi	sp,sp,-8
   23e30:	dfc00115 	stw	ra,4(sp)
   23e34:	df000015 	stw	fp,0(sp)
   23e38:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   23e3c:	01000134 	movhi	r4,4
   23e40:	21028c04 	addi	r4,r4,2608
   23e44:	0023dc00 	call	23dc0 <alt_dev_reg>
}
   23e48:	0001883a 	nop
   23e4c:	e037883a 	mov	sp,fp
   23e50:	dfc00117 	ldw	ra,4(sp)
   23e54:	df000017 	ldw	fp,0(sp)
   23e58:	dec00204 	addi	sp,sp,8
   23e5c:	f800283a 	ret

00023e60 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   23e60:	defffa04 	addi	sp,sp,-24
   23e64:	dfc00515 	stw	ra,20(sp)
   23e68:	df000415 	stw	fp,16(sp)
   23e6c:	df000404 	addi	fp,sp,16
   23e70:	e13ffd15 	stw	r4,-12(fp)
   23e74:	e17ffe15 	stw	r5,-8(fp)
   23e78:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23e7c:	e0bffd17 	ldw	r2,-12(fp)
   23e80:	10800017 	ldw	r2,0(r2)
   23e84:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   23e88:	e0bffc17 	ldw	r2,-16(fp)
   23e8c:	10c00a04 	addi	r3,r2,40
   23e90:	e0bffd17 	ldw	r2,-12(fp)
   23e94:	10800217 	ldw	r2,8(r2)
   23e98:	100f883a 	mov	r7,r2
   23e9c:	e1bfff17 	ldw	r6,-4(fp)
   23ea0:	e17ffe17 	ldw	r5,-8(fp)
   23ea4:	1809883a 	mov	r4,r3
   23ea8:	0023f200 	call	23f20 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   23eac:	e037883a 	mov	sp,fp
   23eb0:	dfc00117 	ldw	ra,4(sp)
   23eb4:	df000017 	ldw	fp,0(sp)
   23eb8:	dec00204 	addi	sp,sp,8
   23ebc:	f800283a 	ret

00023ec0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   23ec0:	defffa04 	addi	sp,sp,-24
   23ec4:	dfc00515 	stw	ra,20(sp)
   23ec8:	df000415 	stw	fp,16(sp)
   23ecc:	df000404 	addi	fp,sp,16
   23ed0:	e13ffd15 	stw	r4,-12(fp)
   23ed4:	e17ffe15 	stw	r5,-8(fp)
   23ed8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23edc:	e0bffd17 	ldw	r2,-12(fp)
   23ee0:	10800017 	ldw	r2,0(r2)
   23ee4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   23ee8:	e0bffc17 	ldw	r2,-16(fp)
   23eec:	10c00a04 	addi	r3,r2,40
   23ef0:	e0bffd17 	ldw	r2,-12(fp)
   23ef4:	10800217 	ldw	r2,8(r2)
   23ef8:	100f883a 	mov	r7,r2
   23efc:	e1bfff17 	ldw	r6,-4(fp)
   23f00:	e17ffe17 	ldw	r5,-8(fp)
   23f04:	1809883a 	mov	r4,r3
   23f08:	002400c0 	call	2400c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   23f0c:	e037883a 	mov	sp,fp
   23f10:	dfc00117 	ldw	ra,4(sp)
   23f14:	df000017 	ldw	fp,0(sp)
   23f18:	dec00204 	addi	sp,sp,8
   23f1c:	f800283a 	ret

00023f20 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   23f20:	defff704 	addi	sp,sp,-36
   23f24:	df000815 	stw	fp,32(sp)
   23f28:	df000804 	addi	fp,sp,32
   23f2c:	e13ffc15 	stw	r4,-16(fp)
   23f30:	e17ffd15 	stw	r5,-12(fp)
   23f34:	e1bffe15 	stw	r6,-8(fp)
   23f38:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   23f3c:	e0bffc17 	ldw	r2,-16(fp)
   23f40:	10800017 	ldw	r2,0(r2)
   23f44:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   23f48:	e0bffd17 	ldw	r2,-12(fp)
   23f4c:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   23f50:	e0bffe17 	ldw	r2,-8(fp)
   23f54:	e0fffd17 	ldw	r3,-12(fp)
   23f58:	1885883a 	add	r2,r3,r2
   23f5c:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   23f60:	00001206 	br	23fac <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   23f64:	e0bff917 	ldw	r2,-28(fp)
   23f68:	10800037 	ldwio	r2,0(r2)
   23f6c:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   23f70:	e0bffb17 	ldw	r2,-20(fp)
   23f74:	10a0000c 	andi	r2,r2,32768
   23f78:	10000626 	beq	r2,zero,23f94 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   23f7c:	e0bff817 	ldw	r2,-32(fp)
   23f80:	10c00044 	addi	r3,r2,1
   23f84:	e0fff815 	stw	r3,-32(fp)
   23f88:	e0fffb17 	ldw	r3,-20(fp)
   23f8c:	10c00005 	stb	r3,0(r2)
   23f90:	00000606 	br	23fac <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   23f94:	e0fff817 	ldw	r3,-32(fp)
   23f98:	e0bffd17 	ldw	r2,-12(fp)
   23f9c:	1880071e 	bne	r3,r2,23fbc <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   23fa0:	e0bfff17 	ldw	r2,-4(fp)
   23fa4:	1090000c 	andi	r2,r2,16384
   23fa8:	1000061e 	bne	r2,zero,23fc4 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   23fac:	e0fff817 	ldw	r3,-32(fp)
   23fb0:	e0bffa17 	ldw	r2,-24(fp)
   23fb4:	18bfeb36 	bltu	r3,r2,23f64 <altera_avalon_jtag_uart_read+0x44>
   23fb8:	00000306 	br	23fc8 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   23fbc:	0001883a 	nop
   23fc0:	00000106 	br	23fc8 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   23fc4:	0001883a 	nop
    
  }

  if (ptr != buffer)
   23fc8:	e0fff817 	ldw	r3,-32(fp)
   23fcc:	e0bffd17 	ldw	r2,-12(fp)
   23fd0:	18800426 	beq	r3,r2,23fe4 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   23fd4:	e0fff817 	ldw	r3,-32(fp)
   23fd8:	e0bffd17 	ldw	r2,-12(fp)
   23fdc:	1885c83a 	sub	r2,r3,r2
   23fe0:	00000606 	br	23ffc <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   23fe4:	e0bfff17 	ldw	r2,-4(fp)
   23fe8:	1090000c 	andi	r2,r2,16384
   23fec:	10000226 	beq	r2,zero,23ff8 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   23ff0:	00bffd44 	movi	r2,-11
   23ff4:	00000106 	br	23ffc <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   23ff8:	00bffec4 	movi	r2,-5
}
   23ffc:	e037883a 	mov	sp,fp
   24000:	df000017 	ldw	fp,0(sp)
   24004:	dec00104 	addi	sp,sp,4
   24008:	f800283a 	ret

0002400c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   2400c:	defff904 	addi	sp,sp,-28
   24010:	df000615 	stw	fp,24(sp)
   24014:	df000604 	addi	fp,sp,24
   24018:	e13ffc15 	stw	r4,-16(fp)
   2401c:	e17ffd15 	stw	r5,-12(fp)
   24020:	e1bffe15 	stw	r6,-8(fp)
   24024:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   24028:	e0bffc17 	ldw	r2,-16(fp)
   2402c:	10800017 	ldw	r2,0(r2)
   24030:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   24034:	e0bffe17 	ldw	r2,-8(fp)
   24038:	e0fffd17 	ldw	r3,-12(fp)
   2403c:	1885883a 	add	r2,r3,r2
   24040:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   24044:	00000e06 	br	24080 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   24048:	e0bffa17 	ldw	r2,-24(fp)
   2404c:	10800104 	addi	r2,r2,4
   24050:	10800037 	ldwio	r2,0(r2)
   24054:	10bfffec 	andhi	r2,r2,65535
   24058:	10000926 	beq	r2,zero,24080 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   2405c:	e0fffa17 	ldw	r3,-24(fp)
   24060:	e0bffd17 	ldw	r2,-12(fp)
   24064:	11000044 	addi	r4,r2,1
   24068:	e13ffd15 	stw	r4,-12(fp)
   2406c:	10800003 	ldbu	r2,0(r2)
   24070:	10803fcc 	andi	r2,r2,255
   24074:	1080201c 	xori	r2,r2,128
   24078:	10bfe004 	addi	r2,r2,-128
   2407c:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   24080:	e0fffd17 	ldw	r3,-12(fp)
   24084:	e0bffb17 	ldw	r2,-20(fp)
   24088:	18bfef36 	bltu	r3,r2,24048 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   2408c:	e0bffe17 	ldw	r2,-8(fp)
}
   24090:	e037883a 	mov	sp,fp
   24094:	df000017 	ldw	fp,0(sp)
   24098:	dec00104 	addi	sp,sp,4
   2409c:	f800283a 	ret

000240a0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   240a0:	defffa04 	addi	sp,sp,-24
   240a4:	dfc00515 	stw	ra,20(sp)
   240a8:	df000415 	stw	fp,16(sp)
   240ac:	df000404 	addi	fp,sp,16
   240b0:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   240b4:	00800244 	movi	r2,9
   240b8:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   240bc:	014003f4 	movhi	r5,15
   240c0:	29509004 	addi	r5,r5,16960
   240c4:	e13ffd17 	ldw	r4,-12(fp)
   240c8:	00232540 	call	23254 <__mulsi3>
   240cc:	100b883a 	mov	r5,r2
   240d0:	0100bef4 	movhi	r4,763
   240d4:	213c2004 	addi	r4,r4,-3968
   240d8:	00231980 	call	23198 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   240dc:	100b883a 	mov	r5,r2
   240e0:	01200034 	movhi	r4,32768
   240e4:	213fffc4 	addi	r4,r4,-1
   240e8:	00231980 	call	23198 <__udivsi3>
   240ec:	100b883a 	mov	r5,r2
   240f0:	e13fff17 	ldw	r4,-4(fp)
   240f4:	00231980 	call	23198 <__udivsi3>
   240f8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   240fc:	e0bffe17 	ldw	r2,-8(fp)
   24100:	10002a26 	beq	r2,zero,241ac <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   24104:	e03ffc15 	stw	zero,-16(fp)
   24108:	00001706 	br	24168 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   2410c:	00a00034 	movhi	r2,32768
   24110:	10bfffc4 	addi	r2,r2,-1
   24114:	10bfffc4 	addi	r2,r2,-1
   24118:	103ffe1e 	bne	r2,zero,24114 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   2411c:	014003f4 	movhi	r5,15
   24120:	29509004 	addi	r5,r5,16960
   24124:	e13ffd17 	ldw	r4,-12(fp)
   24128:	00232540 	call	23254 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   2412c:	100b883a 	mov	r5,r2
   24130:	0100bef4 	movhi	r4,763
   24134:	213c2004 	addi	r4,r4,-3968
   24138:	00231980 	call	23198 <__udivsi3>
   2413c:	100b883a 	mov	r5,r2
   24140:	01200034 	movhi	r4,32768
   24144:	213fffc4 	addi	r4,r4,-1
   24148:	00231980 	call	23198 <__udivsi3>
   2414c:	1007883a 	mov	r3,r2
   24150:	e0bfff17 	ldw	r2,-4(fp)
   24154:	10c5c83a 	sub	r2,r2,r3
   24158:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   2415c:	e0bffc17 	ldw	r2,-16(fp)
   24160:	10800044 	addi	r2,r2,1
   24164:	e0bffc15 	stw	r2,-16(fp)
   24168:	e0fffc17 	ldw	r3,-16(fp)
   2416c:	e0bffe17 	ldw	r2,-8(fp)
   24170:	18bfe616 	blt	r3,r2,2410c <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   24174:	014003f4 	movhi	r5,15
   24178:	29509004 	addi	r5,r5,16960
   2417c:	e13ffd17 	ldw	r4,-12(fp)
   24180:	00232540 	call	23254 <__mulsi3>
   24184:	100b883a 	mov	r5,r2
   24188:	0100bef4 	movhi	r4,763
   2418c:	213c2004 	addi	r4,r4,-3968
   24190:	00231980 	call	23198 <__udivsi3>
   24194:	e17fff17 	ldw	r5,-4(fp)
   24198:	1009883a 	mov	r4,r2
   2419c:	00232540 	call	23254 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   241a0:	10bfffc4 	addi	r2,r2,-1
   241a4:	103ffe1e 	bne	r2,zero,241a0 <alt_busy_sleep+0x100>
   241a8:	00000d06 	br	241e0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   241ac:	014003f4 	movhi	r5,15
   241b0:	29509004 	addi	r5,r5,16960
   241b4:	e13ffd17 	ldw	r4,-12(fp)
   241b8:	00232540 	call	23254 <__mulsi3>
   241bc:	100b883a 	mov	r5,r2
   241c0:	0100bef4 	movhi	r4,763
   241c4:	213c2004 	addi	r4,r4,-3968
   241c8:	00231980 	call	23198 <__udivsi3>
   241cc:	e17fff17 	ldw	r5,-4(fp)
   241d0:	1009883a 	mov	r4,r2
   241d4:	00232540 	call	23254 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   241d8:	10bfffc4 	addi	r2,r2,-1
   241dc:	00bffe16 	blt	zero,r2,241d8 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   241e0:	0005883a 	mov	r2,zero
}
   241e4:	e037883a 	mov	sp,fp
   241e8:	dfc00117 	ldw	ra,4(sp)
   241ec:	df000017 	ldw	fp,0(sp)
   241f0:	dec00204 	addi	sp,sp,8
   241f4:	f800283a 	ret

000241f8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   241f8:	deffff04 	addi	sp,sp,-4
   241fc:	df000015 	stw	fp,0(sp)
   24200:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   24204:	0001883a 	nop
   24208:	e037883a 	mov	sp,fp
   2420c:	df000017 	ldw	fp,0(sp)
   24210:	dec00104 	addi	sp,sp,4
   24214:	f800283a 	ret

00024218 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   24218:	defffe04 	addi	sp,sp,-8
   2421c:	dfc00115 	stw	ra,4(sp)
   24220:	df000015 	stw	fp,0(sp)
   24224:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24228:	d0a00917 	ldw	r2,-32732(gp)
   2422c:	10000326 	beq	r2,zero,2423c <alt_get_errno+0x24>
   24230:	d0a00917 	ldw	r2,-32732(gp)
   24234:	103ee83a 	callr	r2
   24238:	00000106 	br	24240 <alt_get_errno+0x28>
   2423c:	d0a01404 	addi	r2,gp,-32688
}
   24240:	e037883a 	mov	sp,fp
   24244:	dfc00117 	ldw	ra,4(sp)
   24248:	df000017 	ldw	fp,0(sp)
   2424c:	dec00204 	addi	sp,sp,8
   24250:	f800283a 	ret

00024254 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   24254:	defffa04 	addi	sp,sp,-24
   24258:	dfc00515 	stw	ra,20(sp)
   2425c:	df000415 	stw	fp,16(sp)
   24260:	df000404 	addi	fp,sp,16
   24264:	e13ffe15 	stw	r4,-8(fp)
   24268:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   2426c:	e0bffe17 	ldw	r2,-8(fp)
   24270:	10000326 	beq	r2,zero,24280 <alt_dev_llist_insert+0x2c>
   24274:	e0bffe17 	ldw	r2,-8(fp)
   24278:	10800217 	ldw	r2,8(r2)
   2427c:	1000061e 	bne	r2,zero,24298 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   24280:	00242180 	call	24218 <alt_get_errno>
   24284:	1007883a 	mov	r3,r2
   24288:	00800584 	movi	r2,22
   2428c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   24290:	00bffa84 	movi	r2,-22
   24294:	00001306 	br	242e4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   24298:	e0bffe17 	ldw	r2,-8(fp)
   2429c:	e0ffff17 	ldw	r3,-4(fp)
   242a0:	e0fffc15 	stw	r3,-16(fp)
   242a4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   242a8:	e0bffd17 	ldw	r2,-12(fp)
   242ac:	e0fffc17 	ldw	r3,-16(fp)
   242b0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   242b4:	e0bffc17 	ldw	r2,-16(fp)
   242b8:	10c00017 	ldw	r3,0(r2)
   242bc:	e0bffd17 	ldw	r2,-12(fp)
   242c0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   242c4:	e0bffc17 	ldw	r2,-16(fp)
   242c8:	10800017 	ldw	r2,0(r2)
   242cc:	e0fffd17 	ldw	r3,-12(fp)
   242d0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   242d4:	e0bffc17 	ldw	r2,-16(fp)
   242d8:	e0fffd17 	ldw	r3,-12(fp)
   242dc:	10c00015 	stw	r3,0(r2)

  return 0;  
   242e0:	0005883a 	mov	r2,zero
}
   242e4:	e037883a 	mov	sp,fp
   242e8:	dfc00117 	ldw	ra,4(sp)
   242ec:	df000017 	ldw	fp,0(sp)
   242f0:	dec00204 	addi	sp,sp,8
   242f4:	f800283a 	ret

000242f8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   242f8:	defffd04 	addi	sp,sp,-12
   242fc:	dfc00215 	stw	ra,8(sp)
   24300:	df000115 	stw	fp,4(sp)
   24304:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   24308:	008000b4 	movhi	r2,2
   2430c:	10939a04 	addi	r2,r2,20072
   24310:	e0bfff15 	stw	r2,-4(fp)
   24314:	00000606 	br	24330 <_do_ctors+0x38>
        (*ctor) (); 
   24318:	e0bfff17 	ldw	r2,-4(fp)
   2431c:	10800017 	ldw	r2,0(r2)
   24320:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   24324:	e0bfff17 	ldw	r2,-4(fp)
   24328:	10bfff04 	addi	r2,r2,-4
   2432c:	e0bfff15 	stw	r2,-4(fp)
   24330:	e0ffff17 	ldw	r3,-4(fp)
   24334:	008000b4 	movhi	r2,2
   24338:	10939b04 	addi	r2,r2,20076
   2433c:	18bff62e 	bgeu	r3,r2,24318 <_do_ctors+0x20>
        (*ctor) (); 
}
   24340:	0001883a 	nop
   24344:	e037883a 	mov	sp,fp
   24348:	dfc00117 	ldw	ra,4(sp)
   2434c:	df000017 	ldw	fp,0(sp)
   24350:	dec00204 	addi	sp,sp,8
   24354:	f800283a 	ret

00024358 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   24358:	defffd04 	addi	sp,sp,-12
   2435c:	dfc00215 	stw	ra,8(sp)
   24360:	df000115 	stw	fp,4(sp)
   24364:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   24368:	008000b4 	movhi	r2,2
   2436c:	10939a04 	addi	r2,r2,20072
   24370:	e0bfff15 	stw	r2,-4(fp)
   24374:	00000606 	br	24390 <_do_dtors+0x38>
        (*dtor) (); 
   24378:	e0bfff17 	ldw	r2,-4(fp)
   2437c:	10800017 	ldw	r2,0(r2)
   24380:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   24384:	e0bfff17 	ldw	r2,-4(fp)
   24388:	10bfff04 	addi	r2,r2,-4
   2438c:	e0bfff15 	stw	r2,-4(fp)
   24390:	e0ffff17 	ldw	r3,-4(fp)
   24394:	008000b4 	movhi	r2,2
   24398:	10939b04 	addi	r2,r2,20076
   2439c:	18bff62e 	bgeu	r3,r2,24378 <_do_dtors+0x20>
        (*dtor) (); 
}
   243a0:	0001883a 	nop
   243a4:	e037883a 	mov	sp,fp
   243a8:	dfc00117 	ldw	ra,4(sp)
   243ac:	df000017 	ldw	fp,0(sp)
   243b0:	dec00204 	addi	sp,sp,8
   243b4:	f800283a 	ret

000243b8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   243b8:	deffff04 	addi	sp,sp,-4
   243bc:	df000015 	stw	fp,0(sp)
   243c0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   243c4:	0001883a 	nop
   243c8:	e037883a 	mov	sp,fp
   243cc:	df000017 	ldw	fp,0(sp)
   243d0:	dec00104 	addi	sp,sp,4
   243d4:	f800283a 	ret

000243d8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   243d8:	defff804 	addi	sp,sp,-32
   243dc:	dfc00715 	stw	ra,28(sp)
   243e0:	df000615 	stw	fp,24(sp)
   243e4:	dc000515 	stw	r16,20(sp)
   243e8:	df000604 	addi	fp,sp,24
   243ec:	e13ffb15 	stw	r4,-20(fp)
   243f0:	e17ffc15 	stw	r5,-16(fp)
   243f4:	e1bffd15 	stw	r6,-12(fp)
   243f8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   243fc:	e1bffe17 	ldw	r6,-8(fp)
   24400:	e17ffd17 	ldw	r5,-12(fp)
   24404:	e13ffc17 	ldw	r4,-16(fp)
   24408:	00246600 	call	24660 <open>
   2440c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   24410:	e0bffa17 	ldw	r2,-24(fp)
   24414:	10002216 	blt	r2,zero,244a0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   24418:	04000134 	movhi	r16,4
   2441c:	84022c04 	addi	r16,r16,2224
   24420:	e0bffa17 	ldw	r2,-24(fp)
   24424:	01400304 	movi	r5,12
   24428:	1009883a 	mov	r4,r2
   2442c:	00232540 	call	23254 <__mulsi3>
   24430:	8085883a 	add	r2,r16,r2
   24434:	10c00017 	ldw	r3,0(r2)
   24438:	e0bffb17 	ldw	r2,-20(fp)
   2443c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   24440:	04000134 	movhi	r16,4
   24444:	84022c04 	addi	r16,r16,2224
   24448:	e0bffa17 	ldw	r2,-24(fp)
   2444c:	01400304 	movi	r5,12
   24450:	1009883a 	mov	r4,r2
   24454:	00232540 	call	23254 <__mulsi3>
   24458:	8085883a 	add	r2,r16,r2
   2445c:	10800104 	addi	r2,r2,4
   24460:	10c00017 	ldw	r3,0(r2)
   24464:	e0bffb17 	ldw	r2,-20(fp)
   24468:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   2446c:	04000134 	movhi	r16,4
   24470:	84022c04 	addi	r16,r16,2224
   24474:	e0bffa17 	ldw	r2,-24(fp)
   24478:	01400304 	movi	r5,12
   2447c:	1009883a 	mov	r4,r2
   24480:	00232540 	call	23254 <__mulsi3>
   24484:	8085883a 	add	r2,r16,r2
   24488:	10800204 	addi	r2,r2,8
   2448c:	10c00017 	ldw	r3,0(r2)
   24490:	e0bffb17 	ldw	r2,-20(fp)
   24494:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   24498:	e13ffa17 	ldw	r4,-24(fp)
   2449c:	0023b200 	call	23b20 <alt_release_fd>
  }
} 
   244a0:	0001883a 	nop
   244a4:	e6ffff04 	addi	sp,fp,-4
   244a8:	dfc00217 	ldw	ra,8(sp)
   244ac:	df000117 	ldw	fp,4(sp)
   244b0:	dc000017 	ldw	r16,0(sp)
   244b4:	dec00304 	addi	sp,sp,12
   244b8:	f800283a 	ret

000244bc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   244bc:	defffb04 	addi	sp,sp,-20
   244c0:	dfc00415 	stw	ra,16(sp)
   244c4:	df000315 	stw	fp,12(sp)
   244c8:	df000304 	addi	fp,sp,12
   244cc:	e13ffd15 	stw	r4,-12(fp)
   244d0:	e17ffe15 	stw	r5,-8(fp)
   244d4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   244d8:	01c07fc4 	movi	r7,511
   244dc:	01800044 	movi	r6,1
   244e0:	e17ffd17 	ldw	r5,-12(fp)
   244e4:	01000134 	movhi	r4,4
   244e8:	21022f04 	addi	r4,r4,2236
   244ec:	00243d80 	call	243d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   244f0:	01c07fc4 	movi	r7,511
   244f4:	000d883a 	mov	r6,zero
   244f8:	e17ffe17 	ldw	r5,-8(fp)
   244fc:	01000134 	movhi	r4,4
   24500:	21022c04 	addi	r4,r4,2224
   24504:	00243d80 	call	243d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   24508:	01c07fc4 	movi	r7,511
   2450c:	01800044 	movi	r6,1
   24510:	e17fff17 	ldw	r5,-4(fp)
   24514:	01000134 	movhi	r4,4
   24518:	21023204 	addi	r4,r4,2248
   2451c:	00243d80 	call	243d8 <alt_open_fd>
}  
   24520:	0001883a 	nop
   24524:	e037883a 	mov	sp,fp
   24528:	dfc00117 	ldw	ra,4(sp)
   2452c:	df000017 	ldw	fp,0(sp)
   24530:	dec00204 	addi	sp,sp,8
   24534:	f800283a 	ret

00024538 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   24538:	defffe04 	addi	sp,sp,-8
   2453c:	dfc00115 	stw	ra,4(sp)
   24540:	df000015 	stw	fp,0(sp)
   24544:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24548:	d0a00917 	ldw	r2,-32732(gp)
   2454c:	10000326 	beq	r2,zero,2455c <alt_get_errno+0x24>
   24550:	d0a00917 	ldw	r2,-32732(gp)
   24554:	103ee83a 	callr	r2
   24558:	00000106 	br	24560 <alt_get_errno+0x28>
   2455c:	d0a01404 	addi	r2,gp,-32688
}
   24560:	e037883a 	mov	sp,fp
   24564:	dfc00117 	ldw	ra,4(sp)
   24568:	df000017 	ldw	fp,0(sp)
   2456c:	dec00204 	addi	sp,sp,8
   24570:	f800283a 	ret

00024574 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   24574:	defffb04 	addi	sp,sp,-20
   24578:	dfc00415 	stw	ra,16(sp)
   2457c:	df000315 	stw	fp,12(sp)
   24580:	dc000215 	stw	r16,8(sp)
   24584:	df000304 	addi	fp,sp,12
   24588:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   2458c:	e0bffe17 	ldw	r2,-8(fp)
   24590:	10800217 	ldw	r2,8(r2)
   24594:	10d00034 	orhi	r3,r2,16384
   24598:	e0bffe17 	ldw	r2,-8(fp)
   2459c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   245a0:	e03ffd15 	stw	zero,-12(fp)
   245a4:	00002306 	br	24634 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   245a8:	04000134 	movhi	r16,4
   245ac:	84022c04 	addi	r16,r16,2224
   245b0:	e0bffd17 	ldw	r2,-12(fp)
   245b4:	01400304 	movi	r5,12
   245b8:	1009883a 	mov	r4,r2
   245bc:	00232540 	call	23254 <__mulsi3>
   245c0:	8085883a 	add	r2,r16,r2
   245c4:	10c00017 	ldw	r3,0(r2)
   245c8:	e0bffe17 	ldw	r2,-8(fp)
   245cc:	10800017 	ldw	r2,0(r2)
   245d0:	1880151e 	bne	r3,r2,24628 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   245d4:	04000134 	movhi	r16,4
   245d8:	84022c04 	addi	r16,r16,2224
   245dc:	e0bffd17 	ldw	r2,-12(fp)
   245e0:	01400304 	movi	r5,12
   245e4:	1009883a 	mov	r4,r2
   245e8:	00232540 	call	23254 <__mulsi3>
   245ec:	8085883a 	add	r2,r16,r2
   245f0:	10800204 	addi	r2,r2,8
   245f4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   245f8:	10000b0e 	bge	r2,zero,24628 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   245fc:	01400304 	movi	r5,12
   24600:	e13ffd17 	ldw	r4,-12(fp)
   24604:	00232540 	call	23254 <__mulsi3>
   24608:	1007883a 	mov	r3,r2
   2460c:	00800134 	movhi	r2,4
   24610:	10822c04 	addi	r2,r2,2224
   24614:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   24618:	e0bffe17 	ldw	r2,-8(fp)
   2461c:	18800226 	beq	r3,r2,24628 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   24620:	00bffcc4 	movi	r2,-13
   24624:	00000806 	br	24648 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   24628:	e0bffd17 	ldw	r2,-12(fp)
   2462c:	10800044 	addi	r2,r2,1
   24630:	e0bffd15 	stw	r2,-12(fp)
   24634:	d0a00817 	ldw	r2,-32736(gp)
   24638:	1007883a 	mov	r3,r2
   2463c:	e0bffd17 	ldw	r2,-12(fp)
   24640:	18bfd92e 	bgeu	r3,r2,245a8 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   24644:	0005883a 	mov	r2,zero
}
   24648:	e6ffff04 	addi	sp,fp,-4
   2464c:	dfc00217 	ldw	ra,8(sp)
   24650:	df000117 	ldw	fp,4(sp)
   24654:	dc000017 	ldw	r16,0(sp)
   24658:	dec00304 	addi	sp,sp,12
   2465c:	f800283a 	ret

00024660 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   24660:	defff604 	addi	sp,sp,-40
   24664:	dfc00915 	stw	ra,36(sp)
   24668:	df000815 	stw	fp,32(sp)
   2466c:	df000804 	addi	fp,sp,32
   24670:	e13ffd15 	stw	r4,-12(fp)
   24674:	e17ffe15 	stw	r5,-8(fp)
   24678:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   2467c:	00bfffc4 	movi	r2,-1
   24680:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   24684:	00bffb44 	movi	r2,-19
   24688:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   2468c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   24690:	d1600604 	addi	r5,gp,-32744
   24694:	e13ffd17 	ldw	r4,-12(fp)
   24698:	00247e00 	call	247e0 <alt_find_dev>
   2469c:	e0bff815 	stw	r2,-32(fp)
   246a0:	e0bff817 	ldw	r2,-32(fp)
   246a4:	1000051e 	bne	r2,zero,246bc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   246a8:	e13ffd17 	ldw	r4,-12(fp)
   246ac:	00248700 	call	24870 <alt_find_file>
   246b0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   246b4:	00800044 	movi	r2,1
   246b8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   246bc:	e0bff817 	ldw	r2,-32(fp)
   246c0:	10002b26 	beq	r2,zero,24770 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   246c4:	e13ff817 	ldw	r4,-32(fp)
   246c8:	00249780 	call	24978 <alt_get_fd>
   246cc:	e0bff915 	stw	r2,-28(fp)
   246d0:	e0bff917 	ldw	r2,-28(fp)
   246d4:	1000030e 	bge	r2,zero,246e4 <open+0x84>
    {
      status = index;
   246d8:	e0bff917 	ldw	r2,-28(fp)
   246dc:	e0bffa15 	stw	r2,-24(fp)
   246e0:	00002506 	br	24778 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   246e4:	01400304 	movi	r5,12
   246e8:	e13ff917 	ldw	r4,-28(fp)
   246ec:	00232540 	call	23254 <__mulsi3>
   246f0:	1007883a 	mov	r3,r2
   246f4:	00800134 	movhi	r2,4
   246f8:	10822c04 	addi	r2,r2,2224
   246fc:	1885883a 	add	r2,r3,r2
   24700:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   24704:	e0fffe17 	ldw	r3,-8(fp)
   24708:	00900034 	movhi	r2,16384
   2470c:	10bfffc4 	addi	r2,r2,-1
   24710:	1886703a 	and	r3,r3,r2
   24714:	e0bffc17 	ldw	r2,-16(fp)
   24718:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   2471c:	e0bffb17 	ldw	r2,-20(fp)
   24720:	1000051e 	bne	r2,zero,24738 <open+0xd8>
   24724:	e13ffc17 	ldw	r4,-16(fp)
   24728:	00245740 	call	24574 <alt_file_locked>
   2472c:	e0bffa15 	stw	r2,-24(fp)
   24730:	e0bffa17 	ldw	r2,-24(fp)
   24734:	10001016 	blt	r2,zero,24778 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   24738:	e0bff817 	ldw	r2,-32(fp)
   2473c:	10800317 	ldw	r2,12(r2)
   24740:	10000826 	beq	r2,zero,24764 <open+0x104>
   24744:	e0bff817 	ldw	r2,-32(fp)
   24748:	10800317 	ldw	r2,12(r2)
   2474c:	e1ffff17 	ldw	r7,-4(fp)
   24750:	e1bffe17 	ldw	r6,-8(fp)
   24754:	e17ffd17 	ldw	r5,-12(fp)
   24758:	e13ffc17 	ldw	r4,-16(fp)
   2475c:	103ee83a 	callr	r2
   24760:	00000106 	br	24768 <open+0x108>
   24764:	0005883a 	mov	r2,zero
   24768:	e0bffa15 	stw	r2,-24(fp)
   2476c:	00000206 	br	24778 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   24770:	00bffb44 	movi	r2,-19
   24774:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   24778:	e0bffa17 	ldw	r2,-24(fp)
   2477c:	1000090e 	bge	r2,zero,247a4 <open+0x144>
  {
    alt_release_fd (index);  
   24780:	e13ff917 	ldw	r4,-28(fp)
   24784:	0023b200 	call	23b20 <alt_release_fd>
    ALT_ERRNO = -status;
   24788:	00245380 	call	24538 <alt_get_errno>
   2478c:	1007883a 	mov	r3,r2
   24790:	e0bffa17 	ldw	r2,-24(fp)
   24794:	0085c83a 	sub	r2,zero,r2
   24798:	18800015 	stw	r2,0(r3)
    return -1;
   2479c:	00bfffc4 	movi	r2,-1
   247a0:	00000106 	br	247a8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   247a4:	e0bff917 	ldw	r2,-28(fp)
}
   247a8:	e037883a 	mov	sp,fp
   247ac:	dfc00117 	ldw	ra,4(sp)
   247b0:	df000017 	ldw	fp,0(sp)
   247b4:	dec00204 	addi	sp,sp,8
   247b8:	f800283a 	ret

000247bc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   247bc:	deffff04 	addi	sp,sp,-4
   247c0:	df000015 	stw	fp,0(sp)
   247c4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   247c8:	000170fa 	wrctl	ienable,zero
}
   247cc:	0001883a 	nop
   247d0:	e037883a 	mov	sp,fp
   247d4:	df000017 	ldw	fp,0(sp)
   247d8:	dec00104 	addi	sp,sp,4
   247dc:	f800283a 	ret

000247e0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   247e0:	defffa04 	addi	sp,sp,-24
   247e4:	dfc00515 	stw	ra,20(sp)
   247e8:	df000415 	stw	fp,16(sp)
   247ec:	df000404 	addi	fp,sp,16
   247f0:	e13ffe15 	stw	r4,-8(fp)
   247f4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   247f8:	e0bfff17 	ldw	r2,-4(fp)
   247fc:	10800017 	ldw	r2,0(r2)
   24800:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   24804:	e13ffe17 	ldw	r4,-8(fp)
   24808:	00205440 	call	20544 <strlen>
   2480c:	10800044 	addi	r2,r2,1
   24810:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   24814:	00000d06 	br	2484c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   24818:	e0bffc17 	ldw	r2,-16(fp)
   2481c:	10800217 	ldw	r2,8(r2)
   24820:	e0fffd17 	ldw	r3,-12(fp)
   24824:	180d883a 	mov	r6,r3
   24828:	e17ffe17 	ldw	r5,-8(fp)
   2482c:	1009883a 	mov	r4,r2
   24830:	0024b240 	call	24b24 <memcmp>
   24834:	1000021e 	bne	r2,zero,24840 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   24838:	e0bffc17 	ldw	r2,-16(fp)
   2483c:	00000706 	br	2485c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   24840:	e0bffc17 	ldw	r2,-16(fp)
   24844:	10800017 	ldw	r2,0(r2)
   24848:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2484c:	e0fffc17 	ldw	r3,-16(fp)
   24850:	e0bfff17 	ldw	r2,-4(fp)
   24854:	18bff01e 	bne	r3,r2,24818 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   24858:	0005883a 	mov	r2,zero
}
   2485c:	e037883a 	mov	sp,fp
   24860:	dfc00117 	ldw	ra,4(sp)
   24864:	df000017 	ldw	fp,0(sp)
   24868:	dec00204 	addi	sp,sp,8
   2486c:	f800283a 	ret

00024870 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   24870:	defffb04 	addi	sp,sp,-20
   24874:	dfc00415 	stw	ra,16(sp)
   24878:	df000315 	stw	fp,12(sp)
   2487c:	df000304 	addi	fp,sp,12
   24880:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   24884:	d0a00417 	ldw	r2,-32752(gp)
   24888:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2488c:	00003106 	br	24954 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   24890:	e0bffd17 	ldw	r2,-12(fp)
   24894:	10800217 	ldw	r2,8(r2)
   24898:	1009883a 	mov	r4,r2
   2489c:	00205440 	call	20544 <strlen>
   248a0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   248a4:	e0bffd17 	ldw	r2,-12(fp)
   248a8:	10c00217 	ldw	r3,8(r2)
   248ac:	e0bffe17 	ldw	r2,-8(fp)
   248b0:	10bfffc4 	addi	r2,r2,-1
   248b4:	1885883a 	add	r2,r3,r2
   248b8:	10800003 	ldbu	r2,0(r2)
   248bc:	10803fcc 	andi	r2,r2,255
   248c0:	1080201c 	xori	r2,r2,128
   248c4:	10bfe004 	addi	r2,r2,-128
   248c8:	10800bd8 	cmpnei	r2,r2,47
   248cc:	1000031e 	bne	r2,zero,248dc <alt_find_file+0x6c>
    {
      len -= 1;
   248d0:	e0bffe17 	ldw	r2,-8(fp)
   248d4:	10bfffc4 	addi	r2,r2,-1
   248d8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   248dc:	e0bffe17 	ldw	r2,-8(fp)
   248e0:	e0ffff17 	ldw	r3,-4(fp)
   248e4:	1885883a 	add	r2,r3,r2
   248e8:	10800003 	ldbu	r2,0(r2)
   248ec:	10803fcc 	andi	r2,r2,255
   248f0:	1080201c 	xori	r2,r2,128
   248f4:	10bfe004 	addi	r2,r2,-128
   248f8:	10800be0 	cmpeqi	r2,r2,47
   248fc:	1000081e 	bne	r2,zero,24920 <alt_find_file+0xb0>
   24900:	e0bffe17 	ldw	r2,-8(fp)
   24904:	e0ffff17 	ldw	r3,-4(fp)
   24908:	1885883a 	add	r2,r3,r2
   2490c:	10800003 	ldbu	r2,0(r2)
   24910:	10803fcc 	andi	r2,r2,255
   24914:	1080201c 	xori	r2,r2,128
   24918:	10bfe004 	addi	r2,r2,-128
   2491c:	10000a1e 	bne	r2,zero,24948 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   24920:	e0bffd17 	ldw	r2,-12(fp)
   24924:	10800217 	ldw	r2,8(r2)
   24928:	e0fffe17 	ldw	r3,-8(fp)
   2492c:	180d883a 	mov	r6,r3
   24930:	e17fff17 	ldw	r5,-4(fp)
   24934:	1009883a 	mov	r4,r2
   24938:	0024b240 	call	24b24 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2493c:	1000021e 	bne	r2,zero,24948 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   24940:	e0bffd17 	ldw	r2,-12(fp)
   24944:	00000706 	br	24964 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   24948:	e0bffd17 	ldw	r2,-12(fp)
   2494c:	10800017 	ldw	r2,0(r2)
   24950:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   24954:	e0fffd17 	ldw	r3,-12(fp)
   24958:	d0a00404 	addi	r2,gp,-32752
   2495c:	18bfcc1e 	bne	r3,r2,24890 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   24960:	0005883a 	mov	r2,zero
}
   24964:	e037883a 	mov	sp,fp
   24968:	dfc00117 	ldw	ra,4(sp)
   2496c:	df000017 	ldw	fp,0(sp)
   24970:	dec00204 	addi	sp,sp,8
   24974:	f800283a 	ret

00024978 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   24978:	defffa04 	addi	sp,sp,-24
   2497c:	dfc00515 	stw	ra,20(sp)
   24980:	df000415 	stw	fp,16(sp)
   24984:	dc000315 	stw	r16,12(sp)
   24988:	df000404 	addi	fp,sp,16
   2498c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   24990:	00bffa04 	movi	r2,-24
   24994:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   24998:	e03ffc15 	stw	zero,-16(fp)
   2499c:	00001d06 	br	24a14 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   249a0:	04000134 	movhi	r16,4
   249a4:	84022c04 	addi	r16,r16,2224
   249a8:	e0bffc17 	ldw	r2,-16(fp)
   249ac:	01400304 	movi	r5,12
   249b0:	1009883a 	mov	r4,r2
   249b4:	00232540 	call	23254 <__mulsi3>
   249b8:	8085883a 	add	r2,r16,r2
   249bc:	10800017 	ldw	r2,0(r2)
   249c0:	1000111e 	bne	r2,zero,24a08 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   249c4:	04000134 	movhi	r16,4
   249c8:	84022c04 	addi	r16,r16,2224
   249cc:	e0bffc17 	ldw	r2,-16(fp)
   249d0:	01400304 	movi	r5,12
   249d4:	1009883a 	mov	r4,r2
   249d8:	00232540 	call	23254 <__mulsi3>
   249dc:	8085883a 	add	r2,r16,r2
   249e0:	e0fffe17 	ldw	r3,-8(fp)
   249e4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   249e8:	d0e00817 	ldw	r3,-32736(gp)
   249ec:	e0bffc17 	ldw	r2,-16(fp)
   249f0:	1880020e 	bge	r3,r2,249fc <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   249f4:	e0bffc17 	ldw	r2,-16(fp)
   249f8:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   249fc:	e0bffc17 	ldw	r2,-16(fp)
   24a00:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   24a04:	00000606 	br	24a20 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   24a08:	e0bffc17 	ldw	r2,-16(fp)
   24a0c:	10800044 	addi	r2,r2,1
   24a10:	e0bffc15 	stw	r2,-16(fp)
   24a14:	e0bffc17 	ldw	r2,-16(fp)
   24a18:	10800810 	cmplti	r2,r2,32
   24a1c:	103fe01e 	bne	r2,zero,249a0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   24a20:	e0bffd17 	ldw	r2,-12(fp)
}
   24a24:	e6ffff04 	addi	sp,fp,-4
   24a28:	dfc00217 	ldw	ra,8(sp)
   24a2c:	df000117 	ldw	fp,4(sp)
   24a30:	dc000017 	ldw	r16,0(sp)
   24a34:	dec00304 	addi	sp,sp,12
   24a38:	f800283a 	ret

00024a3c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   24a3c:	defffe04 	addi	sp,sp,-8
   24a40:	df000115 	stw	fp,4(sp)
   24a44:	df000104 	addi	fp,sp,4
   24a48:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   24a4c:	e0bfff17 	ldw	r2,-4(fp)
   24a50:	10bffe84 	addi	r2,r2,-6
   24a54:	10c00428 	cmpgeui	r3,r2,16
   24a58:	18001a1e 	bne	r3,zero,24ac4 <alt_exception_cause_generated_bad_addr+0x88>
   24a5c:	100690ba 	slli	r3,r2,2
   24a60:	008000b4 	movhi	r2,2
   24a64:	10929d04 	addi	r2,r2,19060
   24a68:	1885883a 	add	r2,r3,r2
   24a6c:	10800017 	ldw	r2,0(r2)
   24a70:	1000683a 	jmp	r2
   24a74:	00024ab4 	movhi	zero,2346
   24a78:	00024ab4 	movhi	zero,2346
   24a7c:	00024ac4 	movi	zero,2347
   24a80:	00024ac4 	movi	zero,2347
   24a84:	00024ac4 	movi	zero,2347
   24a88:	00024ab4 	movhi	zero,2346
   24a8c:	00024abc 	xorhi	zero,zero,2346
   24a90:	00024ac4 	movi	zero,2347
   24a94:	00024ab4 	movhi	zero,2346
   24a98:	00024ab4 	movhi	zero,2346
   24a9c:	00024ac4 	movi	zero,2347
   24aa0:	00024ab4 	movhi	zero,2346
   24aa4:	00024abc 	xorhi	zero,zero,2346
   24aa8:	00024ac4 	movi	zero,2347
   24aac:	00024ac4 	movi	zero,2347
   24ab0:	00024ab4 	movhi	zero,2346
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   24ab4:	00800044 	movi	r2,1
   24ab8:	00000306 	br	24ac8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   24abc:	0005883a 	mov	r2,zero
   24ac0:	00000106 	br	24ac8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   24ac4:	0005883a 	mov	r2,zero
  }
}
   24ac8:	e037883a 	mov	sp,fp
   24acc:	df000017 	ldw	fp,0(sp)
   24ad0:	dec00104 	addi	sp,sp,4
   24ad4:	f800283a 	ret

00024ad8 <atexit>:
   24ad8:	200b883a 	mov	r5,r4
   24adc:	000f883a 	mov	r7,zero
   24ae0:	000d883a 	mov	r6,zero
   24ae4:	0009883a 	mov	r4,zero
   24ae8:	0024ba01 	jmpi	24ba0 <__register_exitproc>

00024aec <exit>:
   24aec:	defffe04 	addi	sp,sp,-8
   24af0:	000b883a 	mov	r5,zero
   24af4:	dc000015 	stw	r16,0(sp)
   24af8:	dfc00115 	stw	ra,4(sp)
   24afc:	2021883a 	mov	r16,r4
   24b00:	0024cb80 	call	24cb8 <__call_exitprocs>
   24b04:	00800134 	movhi	r2,4
   24b08:	10829704 	addi	r2,r2,2652
   24b0c:	11000017 	ldw	r4,0(r2)
   24b10:	20800f17 	ldw	r2,60(r4)
   24b14:	10000126 	beq	r2,zero,24b1c <exit+0x30>
   24b18:	103ee83a 	callr	r2
   24b1c:	8009883a 	mov	r4,r16
   24b20:	0024e380 	call	24e38 <_exit>

00024b24 <memcmp>:
   24b24:	01c000c4 	movi	r7,3
   24b28:	3980192e 	bgeu	r7,r6,24b90 <memcmp+0x6c>
   24b2c:	2144b03a 	or	r2,r4,r5
   24b30:	11c4703a 	and	r2,r2,r7
   24b34:	10000f26 	beq	r2,zero,24b74 <memcmp+0x50>
   24b38:	20800003 	ldbu	r2,0(r4)
   24b3c:	28c00003 	ldbu	r3,0(r5)
   24b40:	10c0151e 	bne	r2,r3,24b98 <memcmp+0x74>
   24b44:	31bfff84 	addi	r6,r6,-2
   24b48:	01ffffc4 	movi	r7,-1
   24b4c:	00000406 	br	24b60 <memcmp+0x3c>
   24b50:	20800003 	ldbu	r2,0(r4)
   24b54:	28c00003 	ldbu	r3,0(r5)
   24b58:	31bfffc4 	addi	r6,r6,-1
   24b5c:	10c00e1e 	bne	r2,r3,24b98 <memcmp+0x74>
   24b60:	21000044 	addi	r4,r4,1
   24b64:	29400044 	addi	r5,r5,1
   24b68:	31fff91e 	bne	r6,r7,24b50 <memcmp+0x2c>
   24b6c:	0005883a 	mov	r2,zero
   24b70:	f800283a 	ret
   24b74:	20c00017 	ldw	r3,0(r4)
   24b78:	28800017 	ldw	r2,0(r5)
   24b7c:	18bfee1e 	bne	r3,r2,24b38 <memcmp+0x14>
   24b80:	31bfff04 	addi	r6,r6,-4
   24b84:	21000104 	addi	r4,r4,4
   24b88:	29400104 	addi	r5,r5,4
   24b8c:	39bff936 	bltu	r7,r6,24b74 <memcmp+0x50>
   24b90:	303fe91e 	bne	r6,zero,24b38 <memcmp+0x14>
   24b94:	003ff506 	br	24b6c <memcmp+0x48>
   24b98:	10c5c83a 	sub	r2,r2,r3
   24b9c:	f800283a 	ret

00024ba0 <__register_exitproc>:
   24ba0:	defffa04 	addi	sp,sp,-24
   24ba4:	dc000315 	stw	r16,12(sp)
   24ba8:	04000134 	movhi	r16,4
   24bac:	84029704 	addi	r16,r16,2652
   24bb0:	80c00017 	ldw	r3,0(r16)
   24bb4:	dc400415 	stw	r17,16(sp)
   24bb8:	dfc00515 	stw	ra,20(sp)
   24bbc:	18805217 	ldw	r2,328(r3)
   24bc0:	2023883a 	mov	r17,r4
   24bc4:	10003726 	beq	r2,zero,24ca4 <__register_exitproc+0x104>
   24bc8:	10c00117 	ldw	r3,4(r2)
   24bcc:	010007c4 	movi	r4,31
   24bd0:	20c00e16 	blt	r4,r3,24c0c <__register_exitproc+0x6c>
   24bd4:	1a000044 	addi	r8,r3,1
   24bd8:	8800221e 	bne	r17,zero,24c64 <__register_exitproc+0xc4>
   24bdc:	18c00084 	addi	r3,r3,2
   24be0:	18c7883a 	add	r3,r3,r3
   24be4:	18c7883a 	add	r3,r3,r3
   24be8:	12000115 	stw	r8,4(r2)
   24bec:	10c7883a 	add	r3,r2,r3
   24bf0:	19400015 	stw	r5,0(r3)
   24bf4:	0005883a 	mov	r2,zero
   24bf8:	dfc00517 	ldw	ra,20(sp)
   24bfc:	dc400417 	ldw	r17,16(sp)
   24c00:	dc000317 	ldw	r16,12(sp)
   24c04:	dec00604 	addi	sp,sp,24
   24c08:	f800283a 	ret
   24c0c:	00800034 	movhi	r2,0
   24c10:	10800004 	addi	r2,r2,0
   24c14:	10002626 	beq	r2,zero,24cb0 <__register_exitproc+0x110>
   24c18:	01006404 	movi	r4,400
   24c1c:	d9400015 	stw	r5,0(sp)
   24c20:	d9800115 	stw	r6,4(sp)
   24c24:	d9c00215 	stw	r7,8(sp)
   24c28:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   24c2c:	d9400017 	ldw	r5,0(sp)
   24c30:	d9800117 	ldw	r6,4(sp)
   24c34:	d9c00217 	ldw	r7,8(sp)
   24c38:	10001d26 	beq	r2,zero,24cb0 <__register_exitproc+0x110>
   24c3c:	81000017 	ldw	r4,0(r16)
   24c40:	10000115 	stw	zero,4(r2)
   24c44:	02000044 	movi	r8,1
   24c48:	22405217 	ldw	r9,328(r4)
   24c4c:	0007883a 	mov	r3,zero
   24c50:	12400015 	stw	r9,0(r2)
   24c54:	20805215 	stw	r2,328(r4)
   24c58:	10006215 	stw	zero,392(r2)
   24c5c:	10006315 	stw	zero,396(r2)
   24c60:	883fde26 	beq	r17,zero,24bdc <__register_exitproc+0x3c>
   24c64:	18c9883a 	add	r4,r3,r3
   24c68:	2109883a 	add	r4,r4,r4
   24c6c:	1109883a 	add	r4,r2,r4
   24c70:	21802215 	stw	r6,136(r4)
   24c74:	01800044 	movi	r6,1
   24c78:	12406217 	ldw	r9,392(r2)
   24c7c:	30cc983a 	sll	r6,r6,r3
   24c80:	4992b03a 	or	r9,r9,r6
   24c84:	12406215 	stw	r9,392(r2)
   24c88:	21c04215 	stw	r7,264(r4)
   24c8c:	01000084 	movi	r4,2
   24c90:	893fd21e 	bne	r17,r4,24bdc <__register_exitproc+0x3c>
   24c94:	11006317 	ldw	r4,396(r2)
   24c98:	218cb03a 	or	r6,r4,r6
   24c9c:	11806315 	stw	r6,396(r2)
   24ca0:	003fce06 	br	24bdc <__register_exitproc+0x3c>
   24ca4:	18805304 	addi	r2,r3,332
   24ca8:	18805215 	stw	r2,328(r3)
   24cac:	003fc606 	br	24bc8 <__register_exitproc+0x28>
   24cb0:	00bfffc4 	movi	r2,-1
   24cb4:	003fd006 	br	24bf8 <__register_exitproc+0x58>

00024cb8 <__call_exitprocs>:
   24cb8:	defff504 	addi	sp,sp,-44
   24cbc:	df000915 	stw	fp,36(sp)
   24cc0:	dd400615 	stw	r21,24(sp)
   24cc4:	dc800315 	stw	r18,12(sp)
   24cc8:	dfc00a15 	stw	ra,40(sp)
   24ccc:	ddc00815 	stw	r23,32(sp)
   24cd0:	dd800715 	stw	r22,28(sp)
   24cd4:	dd000515 	stw	r20,20(sp)
   24cd8:	dcc00415 	stw	r19,16(sp)
   24cdc:	dc400215 	stw	r17,8(sp)
   24ce0:	dc000115 	stw	r16,4(sp)
   24ce4:	d9000015 	stw	r4,0(sp)
   24ce8:	2839883a 	mov	fp,r5
   24cec:	04800044 	movi	r18,1
   24cf0:	057fffc4 	movi	r21,-1
   24cf4:	00800134 	movhi	r2,4
   24cf8:	10829704 	addi	r2,r2,2652
   24cfc:	12000017 	ldw	r8,0(r2)
   24d00:	45005217 	ldw	r20,328(r8)
   24d04:	44c05204 	addi	r19,r8,328
   24d08:	a0001c26 	beq	r20,zero,24d7c <__call_exitprocs+0xc4>
   24d0c:	a0800117 	ldw	r2,4(r20)
   24d10:	15ffffc4 	addi	r23,r2,-1
   24d14:	b8000d16 	blt	r23,zero,24d4c <__call_exitprocs+0x94>
   24d18:	14000044 	addi	r16,r2,1
   24d1c:	8421883a 	add	r16,r16,r16
   24d20:	8421883a 	add	r16,r16,r16
   24d24:	84402004 	addi	r17,r16,128
   24d28:	a463883a 	add	r17,r20,r17
   24d2c:	a421883a 	add	r16,r20,r16
   24d30:	e0001e26 	beq	fp,zero,24dac <__call_exitprocs+0xf4>
   24d34:	80804017 	ldw	r2,256(r16)
   24d38:	e0801c26 	beq	fp,r2,24dac <__call_exitprocs+0xf4>
   24d3c:	bdffffc4 	addi	r23,r23,-1
   24d40:	843fff04 	addi	r16,r16,-4
   24d44:	8c7fff04 	addi	r17,r17,-4
   24d48:	bd7ff91e 	bne	r23,r21,24d30 <__call_exitprocs+0x78>
   24d4c:	00800034 	movhi	r2,0
   24d50:	10800004 	addi	r2,r2,0
   24d54:	10000926 	beq	r2,zero,24d7c <__call_exitprocs+0xc4>
   24d58:	a0800117 	ldw	r2,4(r20)
   24d5c:	1000301e 	bne	r2,zero,24e20 <__call_exitprocs+0x168>
   24d60:	a0800017 	ldw	r2,0(r20)
   24d64:	10003226 	beq	r2,zero,24e30 <__call_exitprocs+0x178>
   24d68:	a009883a 	mov	r4,r20
   24d6c:	98800015 	stw	r2,0(r19)
   24d70:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   24d74:	9d000017 	ldw	r20,0(r19)
   24d78:	a03fe41e 	bne	r20,zero,24d0c <__call_exitprocs+0x54>
   24d7c:	dfc00a17 	ldw	ra,40(sp)
   24d80:	df000917 	ldw	fp,36(sp)
   24d84:	ddc00817 	ldw	r23,32(sp)
   24d88:	dd800717 	ldw	r22,28(sp)
   24d8c:	dd400617 	ldw	r21,24(sp)
   24d90:	dd000517 	ldw	r20,20(sp)
   24d94:	dcc00417 	ldw	r19,16(sp)
   24d98:	dc800317 	ldw	r18,12(sp)
   24d9c:	dc400217 	ldw	r17,8(sp)
   24da0:	dc000117 	ldw	r16,4(sp)
   24da4:	dec00b04 	addi	sp,sp,44
   24da8:	f800283a 	ret
   24dac:	a0800117 	ldw	r2,4(r20)
   24db0:	80c00017 	ldw	r3,0(r16)
   24db4:	10bfffc4 	addi	r2,r2,-1
   24db8:	15c01426 	beq	r2,r23,24e0c <__call_exitprocs+0x154>
   24dbc:	80000015 	stw	zero,0(r16)
   24dc0:	183fde26 	beq	r3,zero,24d3c <__call_exitprocs+0x84>
   24dc4:	95c8983a 	sll	r4,r18,r23
   24dc8:	a0806217 	ldw	r2,392(r20)
   24dcc:	a5800117 	ldw	r22,4(r20)
   24dd0:	2084703a 	and	r2,r4,r2
   24dd4:	10000b26 	beq	r2,zero,24e04 <__call_exitprocs+0x14c>
   24dd8:	a0806317 	ldw	r2,396(r20)
   24ddc:	2088703a 	and	r4,r4,r2
   24de0:	20000c1e 	bne	r4,zero,24e14 <__call_exitprocs+0x15c>
   24de4:	89400017 	ldw	r5,0(r17)
   24de8:	d9000017 	ldw	r4,0(sp)
   24dec:	183ee83a 	callr	r3
   24df0:	a0800117 	ldw	r2,4(r20)
   24df4:	15bfbf1e 	bne	r2,r22,24cf4 <__call_exitprocs+0x3c>
   24df8:	98800017 	ldw	r2,0(r19)
   24dfc:	153fcf26 	beq	r2,r20,24d3c <__call_exitprocs+0x84>
   24e00:	003fbc06 	br	24cf4 <__call_exitprocs+0x3c>
   24e04:	183ee83a 	callr	r3
   24e08:	003ff906 	br	24df0 <__call_exitprocs+0x138>
   24e0c:	a5c00115 	stw	r23,4(r20)
   24e10:	003feb06 	br	24dc0 <__call_exitprocs+0x108>
   24e14:	89000017 	ldw	r4,0(r17)
   24e18:	183ee83a 	callr	r3
   24e1c:	003ff406 	br	24df0 <__call_exitprocs+0x138>
   24e20:	a0800017 	ldw	r2,0(r20)
   24e24:	a027883a 	mov	r19,r20
   24e28:	1029883a 	mov	r20,r2
   24e2c:	003fb606 	br	24d08 <__call_exitprocs+0x50>
   24e30:	0005883a 	mov	r2,zero
   24e34:	003ffb06 	br	24e24 <__call_exitprocs+0x16c>

00024e38 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   24e38:	defffd04 	addi	sp,sp,-12
   24e3c:	df000215 	stw	fp,8(sp)
   24e40:	df000204 	addi	fp,sp,8
   24e44:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   24e48:	0001883a 	nop
   24e4c:	e0bfff17 	ldw	r2,-4(fp)
   24e50:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   24e54:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   24e58:	10000226 	beq	r2,zero,24e64 <_exit+0x2c>
    ALT_SIM_FAIL();
   24e5c:	002af070 	cmpltui	zero,zero,43969
   24e60:	00000106 	br	24e68 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   24e64:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   24e68:	003fff06 	br	24e68 <_exit+0x30>
