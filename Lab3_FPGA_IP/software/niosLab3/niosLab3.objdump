
niosLab3.elf:     file format elf32-littlenios2
niosLab3.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x0000167c memsz 0x0000167c flags r-x
    LOAD off    0x00003000 vaddr 0x00008000 paddr 0x0001169c align 2**12
         filesz 0x00000650 memsz 0x00000660 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  00003650  2**0
                  CONTENTS
  2 .text         0000167c  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000038  00008000  0001169c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000618  00008038  000116d4  00003038  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00008650  00011cec  00003650  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_ram   00000000  00008660  00008660  00003650  2**0
                  CONTENTS
  7 .onchip_rom   00000000  00011cec  00011cec  00003650  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00003650  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000470  00000000  00000000  00003678  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00005cc6  00000000  00000000  00003ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001de8  00000000  00000000  000097ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001ff0  00000000  00000000  0000b596  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000007fc  00000000  00000000  0000d588  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000013bb  00000000  00000000  0000dd84  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000a6b  00000000  00000000  0000f13f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0000fbac  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000118  00000000  00000000  0000fbf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000112da  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000112dd  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000112e9  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000112ea  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  000112eb  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  000112f6  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  00011301  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000008  00000000  00000000  0001130c  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000034  00000000  00000000  00011314  2**0
                  CONTENTS, READONLY
 27 .jdi          00004e8b  00000000  00000000  00011348  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0003f0a5  00000000  00000000  000161d3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
00008000 l    d  .rodata	00000000 .rodata
00008038 l    d  .rwdata	00000000 .rwdata
00008650 l    d  .bss	00000000 .bss
00008660 l    d  .onchip_ram	00000000 .onchip_ram
00011cec l    d  .onchip_rom	00000000 .onchip_rom
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../niosLab3_bsp//obj/HAL/src/crt0.o
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
000100bc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00010254 l     F .text	00000034 alt_dev_reg
00008038 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
0001068c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000107c0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000107ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000109ac l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00010b0c l     F .text	0000003c alt_get_errno
00010b48 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0000820c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
000101a8 g     F .text	0000007c alt_main
000116d4 g       *ABS*	00000000 __flash_rwdata_start
00010e14 g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
0000865c g     O .bss	00000004 errno
00008654 g     O .bss	00000004 alt_argv
00010630 g       *ABS*	00000000 _gp
00010224 g     F .text	00000030 usleep
0000808c g     O .rwdata	00000180 alt_fd_list
00010e38 g     F .text	00000090 alt_find_dev
00010a90 g     F .text	0000007c alt_io_redirect
0001169c g       *ABS*	00000000 __DTOR_END__
000103b4 g     F .text	000000ec altera_avalon_jtag_uart_read
00011584 g     F .text	00000064 .hidden __udivsi3
00008640 g     O .rwdata	00000004 alt_max_fd
00008648 g     O .rwdata	00000004 _global_impure_ptr
00008660 g       *ABS*	00000000 __bss_end
00008064 g     O .rwdata	00000028 alt_dev_null
000107a0 g     F .text	00000020 alt_dcache_flush_all
00008650 g       *ABS*	00000000 __ram_rwdata_end
00008638 g     O .rwdata	00000008 alt_dev_list
00008038 g       *ABS*	00000000 __ram_rodata_end
000115e8 g     F .text	00000058 .hidden __umodsi3
00008660 g       *ABS*	00000000 end
0001169c g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
000104a0 g     F .text	00000094 altera_avalon_jtag_uart_write
0001130c g     F .text	00000180 __call_exitprocs
00010020 g     F .text	0000003c _start
000102c0 g     F .text	00000034 alt_sys_init
000111f4 g     F .text	00000118 __register_exitproc
00011640 g     F .text	00000028 .hidden __mulsi3
00008038 g       *ABS*	00000000 __ram_rwdata_start
00008000 g       *ABS*	00000000 __ram_rodata_start
000102f4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00010fd0 g     F .text	000000c4 alt_get_fd
00010534 g     F .text	00000158 alt_busy_sleep
000110e0 g     F .text	0000007c memcmp
00008660 g       *ABS*	00000000 __alt_stack_base
00010ec8 g     F .text	00000108 alt_find_file
00010828 g     F .text	000000a4 alt_dev_llist_insert
00008650 g       *ABS*	00000000 __bss_start
0001005c g     F .text	00000060 main
00008658 g     O .bss	00000004 alt_envp
00010354 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00008644 g     O .rwdata	00000004 alt_errno
0001148c g     F .text	00000084 .hidden __divsi3
0001169c g       *ABS*	00000000 __CTOR_END__
0001169c g       *ABS*	00000000 __flash_rodata_start
0001169c g       *ABS*	00000000 __DTOR_LIST__
00010000 g       *ABS*	00000000 __alt_mem_onchip_rom
00010288 g     F .text	00000038 alt_irq_init
00010d90 g     F .text	00000084 alt_release_fd
00011094 g     F .text	00000014 atexit
0000864c g     O .rwdata	00000004 _impure_ptr
00008650 g     O .bss	00000004 alt_argc
0001092c g     F .text	00000060 _do_dtors
00008630 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00008650 g       *ABS*	00000000 _edata
00008660 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
000110a8 g     F .text	00000038 exit
00011510 g     F .text	00000074 .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00008000 g       *ABS*	00000000 __alt_mem_onchip_ram
00011668 g     F .text	00000034 _exit
0001115c g     F .text	00000098 strlen
00010c34 g     F .text	0000015c open
0001098c g     F .text	00000020 alt_icache_flush_all
000108cc g     F .text	00000060 _do_ctors
000106c8 g     F .text	000000d8 close
00010124 g     F .text	00000084 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6818c14 	ori	gp,gp,1584
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
   10034:	10a19414 	ori	r2,r2,34384

    movhi r3, %hi(__bss_end)
   10038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
   1003c:	18e19814 	ori	r3,r3,34400

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	00101240 	call	10124 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	00101a80 	call	101a8 <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <alt_after_alt_main>

0001005c <main>:
#define SIM

// LED Peripheral
#define REG_DATA_OFFSET 1

int main(void){
   1005c:	defffc04 	addi	sp,sp,-16
   10060:	dfc00315 	stw	ra,12(sp)
   10064:	df000215 	stw	fp,8(sp)
   10068:	df000204 	addi	fp,sp,8
  unsigned int led = 0;
   1006c:	e03ffe15 	stw	zero,-8(fp)
  unsigned int *p_led = (unsigned int *) PERIPHERAL_LED_0_BASE;
   10070:	008000b4 	movhi	r2,2
   10074:	10a40004 	addi	r2,r2,-28672
   10078:	e0bfff15 	stw	r2,-4(fp)
  printf("Embarcados++ \n");

#endif

  while(1){
      if (led < 4){
   1007c:	e0bffe17 	ldw	r2,-8(fp)
   10080:	10800128 	cmpgeui	r2,r2,4
   10084:	10000b1e 	bne	r2,zero,100b4 <main+0x58>
          *(p_led+REG_DATA_OFFSET) = (0x1 << led++);
   10088:	e0bfff17 	ldw	r2,-4(fp)
   1008c:	10c00104 	addi	r3,r2,4
   10090:	e0bffe17 	ldw	r2,-8(fp)
   10094:	11000044 	addi	r4,r2,1
   10098:	e13ffe15 	stw	r4,-8(fp)
   1009c:	01000044 	movi	r4,1
   100a0:	2084983a 	sll	r2,r4,r2
   100a4:	18800015 	stw	r2,0(r3)
#ifndef SIM
          usleep(500000); // remover durante a simulação
#else
          usleep(1);
   100a8:	01000044 	movi	r4,1
   100ac:	00102240 	call	10224 <usleep>
   100b0:	003ff206 	br	1007c <main+0x20>
#endif
      }
      else{
          led = 0;
   100b4:	e03ffe15 	stw	zero,-8(fp)
      }
  };
   100b8:	003ff006 	br	1007c <main+0x20>

000100bc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   100bc:	defffc04 	addi	sp,sp,-16
   100c0:	df000315 	stw	fp,12(sp)
   100c4:	df000304 	addi	fp,sp,12
   100c8:	e13ffd15 	stw	r4,-12(fp)
   100cc:	e17ffe15 	stw	r5,-8(fp)
   100d0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   100d4:	e0fffe17 	ldw	r3,-8(fp)
   100d8:	e0bffd17 	ldw	r2,-12(fp)
   100dc:	18800c26 	beq	r3,r2,10110 <alt_load_section+0x54>
  {
    while( to != end )
   100e0:	00000806 	br	10104 <alt_load_section+0x48>
    {
      *to++ = *from++;
   100e4:	e0bffe17 	ldw	r2,-8(fp)
   100e8:	10c00104 	addi	r3,r2,4
   100ec:	e0fffe15 	stw	r3,-8(fp)
   100f0:	e0fffd17 	ldw	r3,-12(fp)
   100f4:	19000104 	addi	r4,r3,4
   100f8:	e13ffd15 	stw	r4,-12(fp)
   100fc:	18c00017 	ldw	r3,0(r3)
   10100:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   10104:	e0fffe17 	ldw	r3,-8(fp)
   10108:	e0bfff17 	ldw	r2,-4(fp)
   1010c:	18bff51e 	bne	r3,r2,100e4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   10110:	0001883a 	nop
   10114:	e037883a 	mov	sp,fp
   10118:	df000017 	ldw	fp,0(sp)
   1011c:	dec00104 	addi	sp,sp,4
   10120:	f800283a 	ret

00010124 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10124:	defffe04 	addi	sp,sp,-8
   10128:	dfc00115 	stw	ra,4(sp)
   1012c:	df000015 	stw	fp,0(sp)
   10130:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   10134:	01800074 	movhi	r6,1
   10138:	31a19404 	addi	r6,r6,-31152
   1013c:	01400074 	movhi	r5,1
   10140:	29600e04 	addi	r5,r5,-32712
   10144:	01000074 	movhi	r4,1
   10148:	2105b504 	addi	r4,r4,5844
   1014c:	00100bc0 	call	100bc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   10150:	01800074 	movhi	r6,1
   10154:	31800804 	addi	r6,r6,32
   10158:	01400074 	movhi	r5,1
   1015c:	29400804 	addi	r5,r5,32
   10160:	01000074 	movhi	r4,1
   10164:	21000804 	addi	r4,r4,32
   10168:	00100bc0 	call	100bc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1016c:	01800074 	movhi	r6,1
   10170:	31a00e04 	addi	r6,r6,-32712
   10174:	01400074 	movhi	r5,1
   10178:	29600004 	addi	r5,r5,-32768
   1017c:	01000074 	movhi	r4,1
   10180:	2105a704 	addi	r4,r4,5788
   10184:	00100bc0 	call	100bc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10188:	00107a00 	call	107a0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   1018c:	001098c0 	call	1098c <alt_icache_flush_all>
}
   10190:	0001883a 	nop
   10194:	e037883a 	mov	sp,fp
   10198:	dfc00117 	ldw	ra,4(sp)
   1019c:	df000017 	ldw	fp,0(sp)
   101a0:	dec00204 	addi	sp,sp,8
   101a4:	f800283a 	ret

000101a8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   101a8:	defffd04 	addi	sp,sp,-12
   101ac:	dfc00215 	stw	ra,8(sp)
   101b0:	df000115 	stw	fp,4(sp)
   101b4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   101b8:	0009883a 	mov	r4,zero
   101bc:	00102880 	call	10288 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   101c0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   101c4:	00102c00 	call	102c0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   101c8:	01800074 	movhi	r6,1
   101cc:	31a00004 	addi	r6,r6,-32768
   101d0:	01400074 	movhi	r5,1
   101d4:	29600004 	addi	r5,r5,-32768
   101d8:	01000074 	movhi	r4,1
   101dc:	21200004 	addi	r4,r4,-32768
   101e0:	0010a900 	call	10a90 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   101e4:	00108cc0 	call	108cc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   101e8:	01000074 	movhi	r4,1
   101ec:	21024b04 	addi	r4,r4,2348
   101f0:	00110940 	call	11094 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   101f4:	d0a00817 	ldw	r2,-32736(gp)
   101f8:	d0e00917 	ldw	r3,-32732(gp)
   101fc:	d1200a17 	ldw	r4,-32728(gp)
   10200:	200d883a 	mov	r6,r4
   10204:	180b883a 	mov	r5,r3
   10208:	1009883a 	mov	r4,r2
   1020c:	001005c0 	call	1005c <main>
   10210:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   10214:	01000044 	movi	r4,1
   10218:	00106c80 	call	106c8 <close>
  exit (result);
   1021c:	e13fff17 	ldw	r4,-4(fp)
   10220:	00110a80 	call	110a8 <exit>

00010224 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   10224:	defffd04 	addi	sp,sp,-12
   10228:	dfc00215 	stw	ra,8(sp)
   1022c:	df000115 	stw	fp,4(sp)
   10230:	df000104 	addi	fp,sp,4
   10234:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   10238:	e13fff17 	ldw	r4,-4(fp)
   1023c:	00105340 	call	10534 <alt_busy_sleep>
}
   10240:	e037883a 	mov	sp,fp
   10244:	dfc00117 	ldw	ra,4(sp)
   10248:	df000017 	ldw	fp,0(sp)
   1024c:	dec00204 	addi	sp,sp,8
   10250:	f800283a 	ret

00010254 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   10254:	defffd04 	addi	sp,sp,-12
   10258:	dfc00215 	stw	ra,8(sp)
   1025c:	df000115 	stw	fp,4(sp)
   10260:	df000104 	addi	fp,sp,4
   10264:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   10268:	d1600204 	addi	r5,gp,-32760
   1026c:	e13fff17 	ldw	r4,-4(fp)
   10270:	00108280 	call	10828 <alt_dev_llist_insert>
}
   10274:	e037883a 	mov	sp,fp
   10278:	dfc00117 	ldw	ra,4(sp)
   1027c:	df000017 	ldw	fp,0(sp)
   10280:	dec00204 	addi	sp,sp,8
   10284:	f800283a 	ret

00010288 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10288:	defffd04 	addi	sp,sp,-12
   1028c:	dfc00215 	stw	ra,8(sp)
   10290:	df000115 	stw	fp,4(sp)
   10294:	df000104 	addi	fp,sp,4
   10298:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   1029c:	0010e140 	call	10e14 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   102a0:	00800044 	movi	r2,1
   102a4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   102a8:	0001883a 	nop
   102ac:	e037883a 	mov	sp,fp
   102b0:	dfc00117 	ldw	ra,4(sp)
   102b4:	df000017 	ldw	fp,0(sp)
   102b8:	dec00204 	addi	sp,sp,8
   102bc:	f800283a 	ret

000102c0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   102c0:	defffe04 	addi	sp,sp,-8
   102c4:	dfc00115 	stw	ra,4(sp)
   102c8:	df000015 	stw	fp,0(sp)
   102cc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   102d0:	01000074 	movhi	r4,1
   102d4:	21200e04 	addi	r4,r4,-32712
   102d8:	00102540 	call	10254 <alt_dev_reg>
}
   102dc:	0001883a 	nop
   102e0:	e037883a 	mov	sp,fp
   102e4:	dfc00117 	ldw	ra,4(sp)
   102e8:	df000017 	ldw	fp,0(sp)
   102ec:	dec00204 	addi	sp,sp,8
   102f0:	f800283a 	ret

000102f4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   102f4:	defffa04 	addi	sp,sp,-24
   102f8:	dfc00515 	stw	ra,20(sp)
   102fc:	df000415 	stw	fp,16(sp)
   10300:	df000404 	addi	fp,sp,16
   10304:	e13ffd15 	stw	r4,-12(fp)
   10308:	e17ffe15 	stw	r5,-8(fp)
   1030c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10310:	e0bffd17 	ldw	r2,-12(fp)
   10314:	10800017 	ldw	r2,0(r2)
   10318:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1031c:	e0bffc17 	ldw	r2,-16(fp)
   10320:	10c00a04 	addi	r3,r2,40
   10324:	e0bffd17 	ldw	r2,-12(fp)
   10328:	10800217 	ldw	r2,8(r2)
   1032c:	100f883a 	mov	r7,r2
   10330:	e1bfff17 	ldw	r6,-4(fp)
   10334:	e17ffe17 	ldw	r5,-8(fp)
   10338:	1809883a 	mov	r4,r3
   1033c:	00103b40 	call	103b4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   10340:	e037883a 	mov	sp,fp
   10344:	dfc00117 	ldw	ra,4(sp)
   10348:	df000017 	ldw	fp,0(sp)
   1034c:	dec00204 	addi	sp,sp,8
   10350:	f800283a 	ret

00010354 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   10354:	defffa04 	addi	sp,sp,-24
   10358:	dfc00515 	stw	ra,20(sp)
   1035c:	df000415 	stw	fp,16(sp)
   10360:	df000404 	addi	fp,sp,16
   10364:	e13ffd15 	stw	r4,-12(fp)
   10368:	e17ffe15 	stw	r5,-8(fp)
   1036c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10370:	e0bffd17 	ldw	r2,-12(fp)
   10374:	10800017 	ldw	r2,0(r2)
   10378:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1037c:	e0bffc17 	ldw	r2,-16(fp)
   10380:	10c00a04 	addi	r3,r2,40
   10384:	e0bffd17 	ldw	r2,-12(fp)
   10388:	10800217 	ldw	r2,8(r2)
   1038c:	100f883a 	mov	r7,r2
   10390:	e1bfff17 	ldw	r6,-4(fp)
   10394:	e17ffe17 	ldw	r5,-8(fp)
   10398:	1809883a 	mov	r4,r3
   1039c:	00104a00 	call	104a0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   103a0:	e037883a 	mov	sp,fp
   103a4:	dfc00117 	ldw	ra,4(sp)
   103a8:	df000017 	ldw	fp,0(sp)
   103ac:	dec00204 	addi	sp,sp,8
   103b0:	f800283a 	ret

000103b4 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   103b4:	defff704 	addi	sp,sp,-36
   103b8:	df000815 	stw	fp,32(sp)
   103bc:	df000804 	addi	fp,sp,32
   103c0:	e13ffc15 	stw	r4,-16(fp)
   103c4:	e17ffd15 	stw	r5,-12(fp)
   103c8:	e1bffe15 	stw	r6,-8(fp)
   103cc:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   103d0:	e0bffc17 	ldw	r2,-16(fp)
   103d4:	10800017 	ldw	r2,0(r2)
   103d8:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   103dc:	e0bffd17 	ldw	r2,-12(fp)
   103e0:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   103e4:	e0bffe17 	ldw	r2,-8(fp)
   103e8:	e0fffd17 	ldw	r3,-12(fp)
   103ec:	1885883a 	add	r2,r3,r2
   103f0:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   103f4:	00001206 	br	10440 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   103f8:	e0bff917 	ldw	r2,-28(fp)
   103fc:	10800037 	ldwio	r2,0(r2)
   10400:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   10404:	e0bffb17 	ldw	r2,-20(fp)
   10408:	10a0000c 	andi	r2,r2,32768
   1040c:	10000626 	beq	r2,zero,10428 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   10410:	e0bff817 	ldw	r2,-32(fp)
   10414:	10c00044 	addi	r3,r2,1
   10418:	e0fff815 	stw	r3,-32(fp)
   1041c:	e0fffb17 	ldw	r3,-20(fp)
   10420:	10c00005 	stb	r3,0(r2)
   10424:	00000606 	br	10440 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   10428:	e0fff817 	ldw	r3,-32(fp)
   1042c:	e0bffd17 	ldw	r2,-12(fp)
   10430:	1880071e 	bne	r3,r2,10450 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   10434:	e0bfff17 	ldw	r2,-4(fp)
   10438:	1090000c 	andi	r2,r2,16384
   1043c:	1000061e 	bne	r2,zero,10458 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   10440:	e0fff817 	ldw	r3,-32(fp)
   10444:	e0bffa17 	ldw	r2,-24(fp)
   10448:	18bfeb36 	bltu	r3,r2,103f8 <altera_avalon_jtag_uart_read+0x44>
   1044c:	00000306 	br	1045c <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   10450:	0001883a 	nop
   10454:	00000106 	br	1045c <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   10458:	0001883a 	nop
    
  }

  if (ptr != buffer)
   1045c:	e0fff817 	ldw	r3,-32(fp)
   10460:	e0bffd17 	ldw	r2,-12(fp)
   10464:	18800426 	beq	r3,r2,10478 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   10468:	e0fff817 	ldw	r3,-32(fp)
   1046c:	e0bffd17 	ldw	r2,-12(fp)
   10470:	1885c83a 	sub	r2,r3,r2
   10474:	00000606 	br	10490 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   10478:	e0bfff17 	ldw	r2,-4(fp)
   1047c:	1090000c 	andi	r2,r2,16384
   10480:	10000226 	beq	r2,zero,1048c <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   10484:	00bffd44 	movi	r2,-11
   10488:	00000106 	br	10490 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   1048c:	00bffec4 	movi	r2,-5
}
   10490:	e037883a 	mov	sp,fp
   10494:	df000017 	ldw	fp,0(sp)
   10498:	dec00104 	addi	sp,sp,4
   1049c:	f800283a 	ret

000104a0 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   104a0:	defff904 	addi	sp,sp,-28
   104a4:	df000615 	stw	fp,24(sp)
   104a8:	df000604 	addi	fp,sp,24
   104ac:	e13ffc15 	stw	r4,-16(fp)
   104b0:	e17ffd15 	stw	r5,-12(fp)
   104b4:	e1bffe15 	stw	r6,-8(fp)
   104b8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   104bc:	e0bffc17 	ldw	r2,-16(fp)
   104c0:	10800017 	ldw	r2,0(r2)
   104c4:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   104c8:	e0bffe17 	ldw	r2,-8(fp)
   104cc:	e0fffd17 	ldw	r3,-12(fp)
   104d0:	1885883a 	add	r2,r3,r2
   104d4:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   104d8:	00000e06 	br	10514 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   104dc:	e0bffa17 	ldw	r2,-24(fp)
   104e0:	10800104 	addi	r2,r2,4
   104e4:	10800037 	ldwio	r2,0(r2)
   104e8:	10bfffec 	andhi	r2,r2,65535
   104ec:	10000926 	beq	r2,zero,10514 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   104f0:	e0fffa17 	ldw	r3,-24(fp)
   104f4:	e0bffd17 	ldw	r2,-12(fp)
   104f8:	11000044 	addi	r4,r2,1
   104fc:	e13ffd15 	stw	r4,-12(fp)
   10500:	10800003 	ldbu	r2,0(r2)
   10504:	10803fcc 	andi	r2,r2,255
   10508:	1080201c 	xori	r2,r2,128
   1050c:	10bfe004 	addi	r2,r2,-128
   10510:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   10514:	e0fffd17 	ldw	r3,-12(fp)
   10518:	e0bffb17 	ldw	r2,-20(fp)
   1051c:	18bfef36 	bltu	r3,r2,104dc <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   10520:	e0bffe17 	ldw	r2,-8(fp)
}
   10524:	e037883a 	mov	sp,fp
   10528:	df000017 	ldw	fp,0(sp)
   1052c:	dec00104 	addi	sp,sp,4
   10530:	f800283a 	ret

00010534 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10534:	defffa04 	addi	sp,sp,-24
   10538:	dfc00515 	stw	ra,20(sp)
   1053c:	df000415 	stw	fp,16(sp)
   10540:	df000404 	addi	fp,sp,16
   10544:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   10548:	00800244 	movi	r2,9
   1054c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   10550:	014003f4 	movhi	r5,15
   10554:	29509004 	addi	r5,r5,16960
   10558:	e13ffd17 	ldw	r4,-12(fp)
   1055c:	00116400 	call	11640 <__mulsi3>
   10560:	100b883a 	mov	r5,r2
   10564:	0100bef4 	movhi	r4,763
   10568:	213c2004 	addi	r4,r4,-3968
   1056c:	00115840 	call	11584 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10570:	100b883a 	mov	r5,r2
   10574:	01200034 	movhi	r4,32768
   10578:	213fffc4 	addi	r4,r4,-1
   1057c:	00115840 	call	11584 <__udivsi3>
   10580:	100b883a 	mov	r5,r2
   10584:	e13fff17 	ldw	r4,-4(fp)
   10588:	00115840 	call	11584 <__udivsi3>
   1058c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   10590:	e0bffe17 	ldw	r2,-8(fp)
   10594:	10002a26 	beq	r2,zero,10640 <_gp+0x10>
  {
    for(i=0;i<big_loops;i++)
   10598:	e03ffc15 	stw	zero,-16(fp)
   1059c:	00001706 	br	105fc <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   105a0:	00a00034 	movhi	r2,32768
   105a4:	10bfffc4 	addi	r2,r2,-1
   105a8:	10bfffc4 	addi	r2,r2,-1
   105ac:	103ffe1e 	bne	r2,zero,105a8 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   105b0:	014003f4 	movhi	r5,15
   105b4:	29509004 	addi	r5,r5,16960
   105b8:	e13ffd17 	ldw	r4,-12(fp)
   105bc:	00116400 	call	11640 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   105c0:	100b883a 	mov	r5,r2
   105c4:	0100bef4 	movhi	r4,763
   105c8:	213c2004 	addi	r4,r4,-3968
   105cc:	00115840 	call	11584 <__udivsi3>
   105d0:	100b883a 	mov	r5,r2
   105d4:	01200034 	movhi	r4,32768
   105d8:	213fffc4 	addi	r4,r4,-1
   105dc:	00115840 	call	11584 <__udivsi3>
   105e0:	1007883a 	mov	r3,r2
   105e4:	e0bfff17 	ldw	r2,-4(fp)
   105e8:	10c5c83a 	sub	r2,r2,r3
   105ec:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   105f0:	e0bffc17 	ldw	r2,-16(fp)
   105f4:	10800044 	addi	r2,r2,1
   105f8:	e0bffc15 	stw	r2,-16(fp)
   105fc:	e0fffc17 	ldw	r3,-16(fp)
   10600:	e0bffe17 	ldw	r2,-8(fp)
   10604:	18bfe616 	blt	r3,r2,105a0 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10608:	014003f4 	movhi	r5,15
   1060c:	29509004 	addi	r5,r5,16960
   10610:	e13ffd17 	ldw	r4,-12(fp)
   10614:	00116400 	call	11640 <__mulsi3>
   10618:	100b883a 	mov	r5,r2
   1061c:	0100bef4 	movhi	r4,763
   10620:	213c2004 	addi	r4,r4,-3968
   10624:	00115840 	call	11584 <__udivsi3>
   10628:	e17fff17 	ldw	r5,-4(fp)
   1062c:	1009883a 	mov	r4,r2
   10630:	00116400 	call	11640 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10634:	10bfffc4 	addi	r2,r2,-1
   10638:	103ffe1e 	bne	r2,zero,10634 <_gp+0x4>
   1063c:	00000d06 	br	10674 <_gp+0x44>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10640:	014003f4 	movhi	r5,15
   10644:	29509004 	addi	r5,r5,16960
   10648:	e13ffd17 	ldw	r4,-12(fp)
   1064c:	00116400 	call	11640 <__mulsi3>
   10650:	100b883a 	mov	r5,r2
   10654:	0100bef4 	movhi	r4,763
   10658:	213c2004 	addi	r4,r4,-3968
   1065c:	00115840 	call	11584 <__udivsi3>
   10660:	e17fff17 	ldw	r5,-4(fp)
   10664:	1009883a 	mov	r4,r2
   10668:	00116400 	call	11640 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   1066c:	10bfffc4 	addi	r2,r2,-1
   10670:	00bffe16 	blt	zero,r2,1066c <_gp+0x3c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   10674:	0005883a 	mov	r2,zero
}
   10678:	e037883a 	mov	sp,fp
   1067c:	dfc00117 	ldw	ra,4(sp)
   10680:	df000017 	ldw	fp,0(sp)
   10684:	dec00204 	addi	sp,sp,8
   10688:	f800283a 	ret

0001068c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1068c:	defffe04 	addi	sp,sp,-8
   10690:	dfc00115 	stw	ra,4(sp)
   10694:	df000015 	stw	fp,0(sp)
   10698:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1069c:	d0a00517 	ldw	r2,-32748(gp)
   106a0:	10000326 	beq	r2,zero,106b0 <alt_get_errno+0x24>
   106a4:	d0a00517 	ldw	r2,-32748(gp)
   106a8:	103ee83a 	callr	r2
   106ac:	00000106 	br	106b4 <alt_get_errno+0x28>
   106b0:	d0a00b04 	addi	r2,gp,-32724
}
   106b4:	e037883a 	mov	sp,fp
   106b8:	dfc00117 	ldw	ra,4(sp)
   106bc:	df000017 	ldw	fp,0(sp)
   106c0:	dec00204 	addi	sp,sp,8
   106c4:	f800283a 	ret

000106c8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   106c8:	defffb04 	addi	sp,sp,-20
   106cc:	dfc00415 	stw	ra,16(sp)
   106d0:	df000315 	stw	fp,12(sp)
   106d4:	df000304 	addi	fp,sp,12
   106d8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   106dc:	e0bfff17 	ldw	r2,-4(fp)
   106e0:	10000816 	blt	r2,zero,10704 <close+0x3c>
   106e4:	01400304 	movi	r5,12
   106e8:	e13fff17 	ldw	r4,-4(fp)
   106ec:	00116400 	call	11640 <__mulsi3>
   106f0:	1007883a 	mov	r3,r2
   106f4:	00800074 	movhi	r2,1
   106f8:	10a02304 	addi	r2,r2,-32628
   106fc:	1885883a 	add	r2,r3,r2
   10700:	00000106 	br	10708 <close+0x40>
   10704:	0005883a 	mov	r2,zero
   10708:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   1070c:	e0bffd17 	ldw	r2,-12(fp)
   10710:	10001926 	beq	r2,zero,10778 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   10714:	e0bffd17 	ldw	r2,-12(fp)
   10718:	10800017 	ldw	r2,0(r2)
   1071c:	10800417 	ldw	r2,16(r2)
   10720:	10000626 	beq	r2,zero,1073c <close+0x74>
   10724:	e0bffd17 	ldw	r2,-12(fp)
   10728:	10800017 	ldw	r2,0(r2)
   1072c:	10800417 	ldw	r2,16(r2)
   10730:	e13ffd17 	ldw	r4,-12(fp)
   10734:	103ee83a 	callr	r2
   10738:	00000106 	br	10740 <close+0x78>
   1073c:	0005883a 	mov	r2,zero
   10740:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   10744:	e13fff17 	ldw	r4,-4(fp)
   10748:	0010d900 	call	10d90 <alt_release_fd>
    if (rval < 0)
   1074c:	e0bffe17 	ldw	r2,-8(fp)
   10750:	1000070e 	bge	r2,zero,10770 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   10754:	001068c0 	call	1068c <alt_get_errno>
   10758:	1007883a 	mov	r3,r2
   1075c:	e0bffe17 	ldw	r2,-8(fp)
   10760:	0085c83a 	sub	r2,zero,r2
   10764:	18800015 	stw	r2,0(r3)
      return -1;
   10768:	00bfffc4 	movi	r2,-1
   1076c:	00000706 	br	1078c <close+0xc4>
    }
    return 0;
   10770:	0005883a 	mov	r2,zero
   10774:	00000506 	br	1078c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   10778:	001068c0 	call	1068c <alt_get_errno>
   1077c:	1007883a 	mov	r3,r2
   10780:	00801444 	movi	r2,81
   10784:	18800015 	stw	r2,0(r3)
    return -1;
   10788:	00bfffc4 	movi	r2,-1
  }
}
   1078c:	e037883a 	mov	sp,fp
   10790:	dfc00117 	ldw	ra,4(sp)
   10794:	df000017 	ldw	fp,0(sp)
   10798:	dec00204 	addi	sp,sp,8
   1079c:	f800283a 	ret

000107a0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   107a0:	deffff04 	addi	sp,sp,-4
   107a4:	df000015 	stw	fp,0(sp)
   107a8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   107ac:	0001883a 	nop
   107b0:	e037883a 	mov	sp,fp
   107b4:	df000017 	ldw	fp,0(sp)
   107b8:	dec00104 	addi	sp,sp,4
   107bc:	f800283a 	ret

000107c0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   107c0:	defffc04 	addi	sp,sp,-16
   107c4:	df000315 	stw	fp,12(sp)
   107c8:	df000304 	addi	fp,sp,12
   107cc:	e13ffd15 	stw	r4,-12(fp)
   107d0:	e17ffe15 	stw	r5,-8(fp)
   107d4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   107d8:	e0bfff17 	ldw	r2,-4(fp)
}
   107dc:	e037883a 	mov	sp,fp
   107e0:	df000017 	ldw	fp,0(sp)
   107e4:	dec00104 	addi	sp,sp,4
   107e8:	f800283a 	ret

000107ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   107ec:	defffe04 	addi	sp,sp,-8
   107f0:	dfc00115 	stw	ra,4(sp)
   107f4:	df000015 	stw	fp,0(sp)
   107f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   107fc:	d0a00517 	ldw	r2,-32748(gp)
   10800:	10000326 	beq	r2,zero,10810 <alt_get_errno+0x24>
   10804:	d0a00517 	ldw	r2,-32748(gp)
   10808:	103ee83a 	callr	r2
   1080c:	00000106 	br	10814 <alt_get_errno+0x28>
   10810:	d0a00b04 	addi	r2,gp,-32724
}
   10814:	e037883a 	mov	sp,fp
   10818:	dfc00117 	ldw	ra,4(sp)
   1081c:	df000017 	ldw	fp,0(sp)
   10820:	dec00204 	addi	sp,sp,8
   10824:	f800283a 	ret

00010828 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10828:	defffa04 	addi	sp,sp,-24
   1082c:	dfc00515 	stw	ra,20(sp)
   10830:	df000415 	stw	fp,16(sp)
   10834:	df000404 	addi	fp,sp,16
   10838:	e13ffe15 	stw	r4,-8(fp)
   1083c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10840:	e0bffe17 	ldw	r2,-8(fp)
   10844:	10000326 	beq	r2,zero,10854 <alt_dev_llist_insert+0x2c>
   10848:	e0bffe17 	ldw	r2,-8(fp)
   1084c:	10800217 	ldw	r2,8(r2)
   10850:	1000061e 	bne	r2,zero,1086c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   10854:	00107ec0 	call	107ec <alt_get_errno>
   10858:	1007883a 	mov	r3,r2
   1085c:	00800584 	movi	r2,22
   10860:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   10864:	00bffa84 	movi	r2,-22
   10868:	00001306 	br	108b8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1086c:	e0bffe17 	ldw	r2,-8(fp)
   10870:	e0ffff17 	ldw	r3,-4(fp)
   10874:	e0fffc15 	stw	r3,-16(fp)
   10878:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1087c:	e0bffd17 	ldw	r2,-12(fp)
   10880:	e0fffc17 	ldw	r3,-16(fp)
   10884:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10888:	e0bffc17 	ldw	r2,-16(fp)
   1088c:	10c00017 	ldw	r3,0(r2)
   10890:	e0bffd17 	ldw	r2,-12(fp)
   10894:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10898:	e0bffc17 	ldw	r2,-16(fp)
   1089c:	10800017 	ldw	r2,0(r2)
   108a0:	e0fffd17 	ldw	r3,-12(fp)
   108a4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   108a8:	e0bffc17 	ldw	r2,-16(fp)
   108ac:	e0fffd17 	ldw	r3,-12(fp)
   108b0:	10c00015 	stw	r3,0(r2)

  return 0;  
   108b4:	0005883a 	mov	r2,zero
}
   108b8:	e037883a 	mov	sp,fp
   108bc:	dfc00117 	ldw	ra,4(sp)
   108c0:	df000017 	ldw	fp,0(sp)
   108c4:	dec00204 	addi	sp,sp,8
   108c8:	f800283a 	ret

000108cc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   108cc:	defffd04 	addi	sp,sp,-12
   108d0:	dfc00215 	stw	ra,8(sp)
   108d4:	df000115 	stw	fp,4(sp)
   108d8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   108dc:	00800074 	movhi	r2,1
   108e0:	1085a604 	addi	r2,r2,5784
   108e4:	e0bfff15 	stw	r2,-4(fp)
   108e8:	00000606 	br	10904 <_do_ctors+0x38>
        (*ctor) (); 
   108ec:	e0bfff17 	ldw	r2,-4(fp)
   108f0:	10800017 	ldw	r2,0(r2)
   108f4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   108f8:	e0bfff17 	ldw	r2,-4(fp)
   108fc:	10bfff04 	addi	r2,r2,-4
   10900:	e0bfff15 	stw	r2,-4(fp)
   10904:	e0ffff17 	ldw	r3,-4(fp)
   10908:	00800074 	movhi	r2,1
   1090c:	1085a704 	addi	r2,r2,5788
   10910:	18bff62e 	bgeu	r3,r2,108ec <_do_ctors+0x20>
        (*ctor) (); 
}
   10914:	0001883a 	nop
   10918:	e037883a 	mov	sp,fp
   1091c:	dfc00117 	ldw	ra,4(sp)
   10920:	df000017 	ldw	fp,0(sp)
   10924:	dec00204 	addi	sp,sp,8
   10928:	f800283a 	ret

0001092c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1092c:	defffd04 	addi	sp,sp,-12
   10930:	dfc00215 	stw	ra,8(sp)
   10934:	df000115 	stw	fp,4(sp)
   10938:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1093c:	00800074 	movhi	r2,1
   10940:	1085a604 	addi	r2,r2,5784
   10944:	e0bfff15 	stw	r2,-4(fp)
   10948:	00000606 	br	10964 <_do_dtors+0x38>
        (*dtor) (); 
   1094c:	e0bfff17 	ldw	r2,-4(fp)
   10950:	10800017 	ldw	r2,0(r2)
   10954:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10958:	e0bfff17 	ldw	r2,-4(fp)
   1095c:	10bfff04 	addi	r2,r2,-4
   10960:	e0bfff15 	stw	r2,-4(fp)
   10964:	e0ffff17 	ldw	r3,-4(fp)
   10968:	00800074 	movhi	r2,1
   1096c:	1085a704 	addi	r2,r2,5788
   10970:	18bff62e 	bgeu	r3,r2,1094c <_do_dtors+0x20>
        (*dtor) (); 
}
   10974:	0001883a 	nop
   10978:	e037883a 	mov	sp,fp
   1097c:	dfc00117 	ldw	ra,4(sp)
   10980:	df000017 	ldw	fp,0(sp)
   10984:	dec00204 	addi	sp,sp,8
   10988:	f800283a 	ret

0001098c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1098c:	deffff04 	addi	sp,sp,-4
   10990:	df000015 	stw	fp,0(sp)
   10994:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   10998:	0001883a 	nop
   1099c:	e037883a 	mov	sp,fp
   109a0:	df000017 	ldw	fp,0(sp)
   109a4:	dec00104 	addi	sp,sp,4
   109a8:	f800283a 	ret

000109ac <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   109ac:	defff804 	addi	sp,sp,-32
   109b0:	dfc00715 	stw	ra,28(sp)
   109b4:	df000615 	stw	fp,24(sp)
   109b8:	dc000515 	stw	r16,20(sp)
   109bc:	df000604 	addi	fp,sp,24
   109c0:	e13ffb15 	stw	r4,-20(fp)
   109c4:	e17ffc15 	stw	r5,-16(fp)
   109c8:	e1bffd15 	stw	r6,-12(fp)
   109cc:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   109d0:	e1bffe17 	ldw	r6,-8(fp)
   109d4:	e17ffd17 	ldw	r5,-12(fp)
   109d8:	e13ffc17 	ldw	r4,-16(fp)
   109dc:	0010c340 	call	10c34 <open>
   109e0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   109e4:	e0bffa17 	ldw	r2,-24(fp)
   109e8:	10002216 	blt	r2,zero,10a74 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   109ec:	04000074 	movhi	r16,1
   109f0:	84202304 	addi	r16,r16,-32628
   109f4:	e0bffa17 	ldw	r2,-24(fp)
   109f8:	01400304 	movi	r5,12
   109fc:	1009883a 	mov	r4,r2
   10a00:	00116400 	call	11640 <__mulsi3>
   10a04:	8085883a 	add	r2,r16,r2
   10a08:	10c00017 	ldw	r3,0(r2)
   10a0c:	e0bffb17 	ldw	r2,-20(fp)
   10a10:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   10a14:	04000074 	movhi	r16,1
   10a18:	84202304 	addi	r16,r16,-32628
   10a1c:	e0bffa17 	ldw	r2,-24(fp)
   10a20:	01400304 	movi	r5,12
   10a24:	1009883a 	mov	r4,r2
   10a28:	00116400 	call	11640 <__mulsi3>
   10a2c:	8085883a 	add	r2,r16,r2
   10a30:	10800104 	addi	r2,r2,4
   10a34:	10c00017 	ldw	r3,0(r2)
   10a38:	e0bffb17 	ldw	r2,-20(fp)
   10a3c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   10a40:	04000074 	movhi	r16,1
   10a44:	84202304 	addi	r16,r16,-32628
   10a48:	e0bffa17 	ldw	r2,-24(fp)
   10a4c:	01400304 	movi	r5,12
   10a50:	1009883a 	mov	r4,r2
   10a54:	00116400 	call	11640 <__mulsi3>
   10a58:	8085883a 	add	r2,r16,r2
   10a5c:	10800204 	addi	r2,r2,8
   10a60:	10c00017 	ldw	r3,0(r2)
   10a64:	e0bffb17 	ldw	r2,-20(fp)
   10a68:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   10a6c:	e13ffa17 	ldw	r4,-24(fp)
   10a70:	0010d900 	call	10d90 <alt_release_fd>
  }
} 
   10a74:	0001883a 	nop
   10a78:	e6ffff04 	addi	sp,fp,-4
   10a7c:	dfc00217 	ldw	ra,8(sp)
   10a80:	df000117 	ldw	fp,4(sp)
   10a84:	dc000017 	ldw	r16,0(sp)
   10a88:	dec00304 	addi	sp,sp,12
   10a8c:	f800283a 	ret

00010a90 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   10a90:	defffb04 	addi	sp,sp,-20
   10a94:	dfc00415 	stw	ra,16(sp)
   10a98:	df000315 	stw	fp,12(sp)
   10a9c:	df000304 	addi	fp,sp,12
   10aa0:	e13ffd15 	stw	r4,-12(fp)
   10aa4:	e17ffe15 	stw	r5,-8(fp)
   10aa8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   10aac:	01c07fc4 	movi	r7,511
   10ab0:	01800044 	movi	r6,1
   10ab4:	e17ffd17 	ldw	r5,-12(fp)
   10ab8:	01000074 	movhi	r4,1
   10abc:	21202604 	addi	r4,r4,-32616
   10ac0:	00109ac0 	call	109ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   10ac4:	01c07fc4 	movi	r7,511
   10ac8:	000d883a 	mov	r6,zero
   10acc:	e17ffe17 	ldw	r5,-8(fp)
   10ad0:	01000074 	movhi	r4,1
   10ad4:	21202304 	addi	r4,r4,-32628
   10ad8:	00109ac0 	call	109ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   10adc:	01c07fc4 	movi	r7,511
   10ae0:	01800044 	movi	r6,1
   10ae4:	e17fff17 	ldw	r5,-4(fp)
   10ae8:	01000074 	movhi	r4,1
   10aec:	21202904 	addi	r4,r4,-32604
   10af0:	00109ac0 	call	109ac <alt_open_fd>
}  
   10af4:	0001883a 	nop
   10af8:	e037883a 	mov	sp,fp
   10afc:	dfc00117 	ldw	ra,4(sp)
   10b00:	df000017 	ldw	fp,0(sp)
   10b04:	dec00204 	addi	sp,sp,8
   10b08:	f800283a 	ret

00010b0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10b0c:	defffe04 	addi	sp,sp,-8
   10b10:	dfc00115 	stw	ra,4(sp)
   10b14:	df000015 	stw	fp,0(sp)
   10b18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10b1c:	d0a00517 	ldw	r2,-32748(gp)
   10b20:	10000326 	beq	r2,zero,10b30 <alt_get_errno+0x24>
   10b24:	d0a00517 	ldw	r2,-32748(gp)
   10b28:	103ee83a 	callr	r2
   10b2c:	00000106 	br	10b34 <alt_get_errno+0x28>
   10b30:	d0a00b04 	addi	r2,gp,-32724
}
   10b34:	e037883a 	mov	sp,fp
   10b38:	dfc00117 	ldw	ra,4(sp)
   10b3c:	df000017 	ldw	fp,0(sp)
   10b40:	dec00204 	addi	sp,sp,8
   10b44:	f800283a 	ret

00010b48 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   10b48:	defffb04 	addi	sp,sp,-20
   10b4c:	dfc00415 	stw	ra,16(sp)
   10b50:	df000315 	stw	fp,12(sp)
   10b54:	dc000215 	stw	r16,8(sp)
   10b58:	df000304 	addi	fp,sp,12
   10b5c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   10b60:	e0bffe17 	ldw	r2,-8(fp)
   10b64:	10800217 	ldw	r2,8(r2)
   10b68:	10d00034 	orhi	r3,r2,16384
   10b6c:	e0bffe17 	ldw	r2,-8(fp)
   10b70:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10b74:	e03ffd15 	stw	zero,-12(fp)
   10b78:	00002306 	br	10c08 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10b7c:	04000074 	movhi	r16,1
   10b80:	84202304 	addi	r16,r16,-32628
   10b84:	e0bffd17 	ldw	r2,-12(fp)
   10b88:	01400304 	movi	r5,12
   10b8c:	1009883a 	mov	r4,r2
   10b90:	00116400 	call	11640 <__mulsi3>
   10b94:	8085883a 	add	r2,r16,r2
   10b98:	10c00017 	ldw	r3,0(r2)
   10b9c:	e0bffe17 	ldw	r2,-8(fp)
   10ba0:	10800017 	ldw	r2,0(r2)
   10ba4:	1880151e 	bne	r3,r2,10bfc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10ba8:	04000074 	movhi	r16,1
   10bac:	84202304 	addi	r16,r16,-32628
   10bb0:	e0bffd17 	ldw	r2,-12(fp)
   10bb4:	01400304 	movi	r5,12
   10bb8:	1009883a 	mov	r4,r2
   10bbc:	00116400 	call	11640 <__mulsi3>
   10bc0:	8085883a 	add	r2,r16,r2
   10bc4:	10800204 	addi	r2,r2,8
   10bc8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10bcc:	10000b0e 	bge	r2,zero,10bfc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   10bd0:	01400304 	movi	r5,12
   10bd4:	e13ffd17 	ldw	r4,-12(fp)
   10bd8:	00116400 	call	11640 <__mulsi3>
   10bdc:	1007883a 	mov	r3,r2
   10be0:	00800074 	movhi	r2,1
   10be4:	10a02304 	addi	r2,r2,-32628
   10be8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10bec:	e0bffe17 	ldw	r2,-8(fp)
   10bf0:	18800226 	beq	r3,r2,10bfc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   10bf4:	00bffcc4 	movi	r2,-13
   10bf8:	00000806 	br	10c1c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10bfc:	e0bffd17 	ldw	r2,-12(fp)
   10c00:	10800044 	addi	r2,r2,1
   10c04:	e0bffd15 	stw	r2,-12(fp)
   10c08:	d0a00417 	ldw	r2,-32752(gp)
   10c0c:	1007883a 	mov	r3,r2
   10c10:	e0bffd17 	ldw	r2,-12(fp)
   10c14:	18bfd92e 	bgeu	r3,r2,10b7c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   10c18:	0005883a 	mov	r2,zero
}
   10c1c:	e6ffff04 	addi	sp,fp,-4
   10c20:	dfc00217 	ldw	ra,8(sp)
   10c24:	df000117 	ldw	fp,4(sp)
   10c28:	dc000017 	ldw	r16,0(sp)
   10c2c:	dec00304 	addi	sp,sp,12
   10c30:	f800283a 	ret

00010c34 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   10c34:	defff604 	addi	sp,sp,-40
   10c38:	dfc00915 	stw	ra,36(sp)
   10c3c:	df000815 	stw	fp,32(sp)
   10c40:	df000804 	addi	fp,sp,32
   10c44:	e13ffd15 	stw	r4,-12(fp)
   10c48:	e17ffe15 	stw	r5,-8(fp)
   10c4c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   10c50:	00bfffc4 	movi	r2,-1
   10c54:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   10c58:	00bffb44 	movi	r2,-19
   10c5c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   10c60:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   10c64:	d1600204 	addi	r5,gp,-32760
   10c68:	e13ffd17 	ldw	r4,-12(fp)
   10c6c:	0010e380 	call	10e38 <alt_find_dev>
   10c70:	e0bff815 	stw	r2,-32(fp)
   10c74:	e0bff817 	ldw	r2,-32(fp)
   10c78:	1000051e 	bne	r2,zero,10c90 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   10c7c:	e13ffd17 	ldw	r4,-12(fp)
   10c80:	0010ec80 	call	10ec8 <alt_find_file>
   10c84:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   10c88:	00800044 	movi	r2,1
   10c8c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   10c90:	e0bff817 	ldw	r2,-32(fp)
   10c94:	10002b26 	beq	r2,zero,10d44 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   10c98:	e13ff817 	ldw	r4,-32(fp)
   10c9c:	0010fd00 	call	10fd0 <alt_get_fd>
   10ca0:	e0bff915 	stw	r2,-28(fp)
   10ca4:	e0bff917 	ldw	r2,-28(fp)
   10ca8:	1000030e 	bge	r2,zero,10cb8 <open+0x84>
    {
      status = index;
   10cac:	e0bff917 	ldw	r2,-28(fp)
   10cb0:	e0bffa15 	stw	r2,-24(fp)
   10cb4:	00002506 	br	10d4c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   10cb8:	01400304 	movi	r5,12
   10cbc:	e13ff917 	ldw	r4,-28(fp)
   10cc0:	00116400 	call	11640 <__mulsi3>
   10cc4:	1007883a 	mov	r3,r2
   10cc8:	00800074 	movhi	r2,1
   10ccc:	10a02304 	addi	r2,r2,-32628
   10cd0:	1885883a 	add	r2,r3,r2
   10cd4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   10cd8:	e0fffe17 	ldw	r3,-8(fp)
   10cdc:	00900034 	movhi	r2,16384
   10ce0:	10bfffc4 	addi	r2,r2,-1
   10ce4:	1886703a 	and	r3,r3,r2
   10ce8:	e0bffc17 	ldw	r2,-16(fp)
   10cec:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   10cf0:	e0bffb17 	ldw	r2,-20(fp)
   10cf4:	1000051e 	bne	r2,zero,10d0c <open+0xd8>
   10cf8:	e13ffc17 	ldw	r4,-16(fp)
   10cfc:	0010b480 	call	10b48 <alt_file_locked>
   10d00:	e0bffa15 	stw	r2,-24(fp)
   10d04:	e0bffa17 	ldw	r2,-24(fp)
   10d08:	10001016 	blt	r2,zero,10d4c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   10d0c:	e0bff817 	ldw	r2,-32(fp)
   10d10:	10800317 	ldw	r2,12(r2)
   10d14:	10000826 	beq	r2,zero,10d38 <open+0x104>
   10d18:	e0bff817 	ldw	r2,-32(fp)
   10d1c:	10800317 	ldw	r2,12(r2)
   10d20:	e1ffff17 	ldw	r7,-4(fp)
   10d24:	e1bffe17 	ldw	r6,-8(fp)
   10d28:	e17ffd17 	ldw	r5,-12(fp)
   10d2c:	e13ffc17 	ldw	r4,-16(fp)
   10d30:	103ee83a 	callr	r2
   10d34:	00000106 	br	10d3c <open+0x108>
   10d38:	0005883a 	mov	r2,zero
   10d3c:	e0bffa15 	stw	r2,-24(fp)
   10d40:	00000206 	br	10d4c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   10d44:	00bffb44 	movi	r2,-19
   10d48:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   10d4c:	e0bffa17 	ldw	r2,-24(fp)
   10d50:	1000090e 	bge	r2,zero,10d78 <open+0x144>
  {
    alt_release_fd (index);  
   10d54:	e13ff917 	ldw	r4,-28(fp)
   10d58:	0010d900 	call	10d90 <alt_release_fd>
    ALT_ERRNO = -status;
   10d5c:	0010b0c0 	call	10b0c <alt_get_errno>
   10d60:	1007883a 	mov	r3,r2
   10d64:	e0bffa17 	ldw	r2,-24(fp)
   10d68:	0085c83a 	sub	r2,zero,r2
   10d6c:	18800015 	stw	r2,0(r3)
    return -1;
   10d70:	00bfffc4 	movi	r2,-1
   10d74:	00000106 	br	10d7c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   10d78:	e0bff917 	ldw	r2,-28(fp)
}
   10d7c:	e037883a 	mov	sp,fp
   10d80:	dfc00117 	ldw	ra,4(sp)
   10d84:	df000017 	ldw	fp,0(sp)
   10d88:	dec00204 	addi	sp,sp,8
   10d8c:	f800283a 	ret

00010d90 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   10d90:	defffc04 	addi	sp,sp,-16
   10d94:	dfc00315 	stw	ra,12(sp)
   10d98:	df000215 	stw	fp,8(sp)
   10d9c:	dc000115 	stw	r16,4(sp)
   10da0:	df000204 	addi	fp,sp,8
   10da4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   10da8:	e0bffe17 	ldw	r2,-8(fp)
   10dac:	108000d0 	cmplti	r2,r2,3
   10db0:	1000111e 	bne	r2,zero,10df8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   10db4:	04000074 	movhi	r16,1
   10db8:	84202304 	addi	r16,r16,-32628
   10dbc:	e0bffe17 	ldw	r2,-8(fp)
   10dc0:	01400304 	movi	r5,12
   10dc4:	1009883a 	mov	r4,r2
   10dc8:	00116400 	call	11640 <__mulsi3>
   10dcc:	8085883a 	add	r2,r16,r2
   10dd0:	10800204 	addi	r2,r2,8
   10dd4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   10dd8:	04000074 	movhi	r16,1
   10ddc:	84202304 	addi	r16,r16,-32628
   10de0:	e0bffe17 	ldw	r2,-8(fp)
   10de4:	01400304 	movi	r5,12
   10de8:	1009883a 	mov	r4,r2
   10dec:	00116400 	call	11640 <__mulsi3>
   10df0:	8085883a 	add	r2,r16,r2
   10df4:	10000015 	stw	zero,0(r2)
  }
}
   10df8:	0001883a 	nop
   10dfc:	e6ffff04 	addi	sp,fp,-4
   10e00:	dfc00217 	ldw	ra,8(sp)
   10e04:	df000117 	ldw	fp,4(sp)
   10e08:	dc000017 	ldw	r16,0(sp)
   10e0c:	dec00304 	addi	sp,sp,12
   10e10:	f800283a 	ret

00010e14 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   10e14:	deffff04 	addi	sp,sp,-4
   10e18:	df000015 	stw	fp,0(sp)
   10e1c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   10e20:	000170fa 	wrctl	ienable,zero
}
   10e24:	0001883a 	nop
   10e28:	e037883a 	mov	sp,fp
   10e2c:	df000017 	ldw	fp,0(sp)
   10e30:	dec00104 	addi	sp,sp,4
   10e34:	f800283a 	ret

00010e38 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   10e38:	defffa04 	addi	sp,sp,-24
   10e3c:	dfc00515 	stw	ra,20(sp)
   10e40:	df000415 	stw	fp,16(sp)
   10e44:	df000404 	addi	fp,sp,16
   10e48:	e13ffe15 	stw	r4,-8(fp)
   10e4c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   10e50:	e0bfff17 	ldw	r2,-4(fp)
   10e54:	10800017 	ldw	r2,0(r2)
   10e58:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   10e5c:	e13ffe17 	ldw	r4,-8(fp)
   10e60:	001115c0 	call	1115c <strlen>
   10e64:	10800044 	addi	r2,r2,1
   10e68:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10e6c:	00000d06 	br	10ea4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   10e70:	e0bffc17 	ldw	r2,-16(fp)
   10e74:	10800217 	ldw	r2,8(r2)
   10e78:	e0fffd17 	ldw	r3,-12(fp)
   10e7c:	180d883a 	mov	r6,r3
   10e80:	e17ffe17 	ldw	r5,-8(fp)
   10e84:	1009883a 	mov	r4,r2
   10e88:	00110e00 	call	110e0 <memcmp>
   10e8c:	1000021e 	bne	r2,zero,10e98 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   10e90:	e0bffc17 	ldw	r2,-16(fp)
   10e94:	00000706 	br	10eb4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   10e98:	e0bffc17 	ldw	r2,-16(fp)
   10e9c:	10800017 	ldw	r2,0(r2)
   10ea0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10ea4:	e0fffc17 	ldw	r3,-16(fp)
   10ea8:	e0bfff17 	ldw	r2,-4(fp)
   10eac:	18bff01e 	bne	r3,r2,10e70 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   10eb0:	0005883a 	mov	r2,zero
}
   10eb4:	e037883a 	mov	sp,fp
   10eb8:	dfc00117 	ldw	ra,4(sp)
   10ebc:	df000017 	ldw	fp,0(sp)
   10ec0:	dec00204 	addi	sp,sp,8
   10ec4:	f800283a 	ret

00010ec8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   10ec8:	defffb04 	addi	sp,sp,-20
   10ecc:	dfc00415 	stw	ra,16(sp)
   10ed0:	df000315 	stw	fp,12(sp)
   10ed4:	df000304 	addi	fp,sp,12
   10ed8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   10edc:	d0a00017 	ldw	r2,-32768(gp)
   10ee0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10ee4:	00003106 	br	10fac <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   10ee8:	e0bffd17 	ldw	r2,-12(fp)
   10eec:	10800217 	ldw	r2,8(r2)
   10ef0:	1009883a 	mov	r4,r2
   10ef4:	001115c0 	call	1115c <strlen>
   10ef8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   10efc:	e0bffd17 	ldw	r2,-12(fp)
   10f00:	10c00217 	ldw	r3,8(r2)
   10f04:	e0bffe17 	ldw	r2,-8(fp)
   10f08:	10bfffc4 	addi	r2,r2,-1
   10f0c:	1885883a 	add	r2,r3,r2
   10f10:	10800003 	ldbu	r2,0(r2)
   10f14:	10803fcc 	andi	r2,r2,255
   10f18:	1080201c 	xori	r2,r2,128
   10f1c:	10bfe004 	addi	r2,r2,-128
   10f20:	10800bd8 	cmpnei	r2,r2,47
   10f24:	1000031e 	bne	r2,zero,10f34 <alt_find_file+0x6c>
    {
      len -= 1;
   10f28:	e0bffe17 	ldw	r2,-8(fp)
   10f2c:	10bfffc4 	addi	r2,r2,-1
   10f30:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10f34:	e0bffe17 	ldw	r2,-8(fp)
   10f38:	e0ffff17 	ldw	r3,-4(fp)
   10f3c:	1885883a 	add	r2,r3,r2
   10f40:	10800003 	ldbu	r2,0(r2)
   10f44:	10803fcc 	andi	r2,r2,255
   10f48:	1080201c 	xori	r2,r2,128
   10f4c:	10bfe004 	addi	r2,r2,-128
   10f50:	10800be0 	cmpeqi	r2,r2,47
   10f54:	1000081e 	bne	r2,zero,10f78 <alt_find_file+0xb0>
   10f58:	e0bffe17 	ldw	r2,-8(fp)
   10f5c:	e0ffff17 	ldw	r3,-4(fp)
   10f60:	1885883a 	add	r2,r3,r2
   10f64:	10800003 	ldbu	r2,0(r2)
   10f68:	10803fcc 	andi	r2,r2,255
   10f6c:	1080201c 	xori	r2,r2,128
   10f70:	10bfe004 	addi	r2,r2,-128
   10f74:	10000a1e 	bne	r2,zero,10fa0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   10f78:	e0bffd17 	ldw	r2,-12(fp)
   10f7c:	10800217 	ldw	r2,8(r2)
   10f80:	e0fffe17 	ldw	r3,-8(fp)
   10f84:	180d883a 	mov	r6,r3
   10f88:	e17fff17 	ldw	r5,-4(fp)
   10f8c:	1009883a 	mov	r4,r2
   10f90:	00110e00 	call	110e0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10f94:	1000021e 	bne	r2,zero,10fa0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   10f98:	e0bffd17 	ldw	r2,-12(fp)
   10f9c:	00000706 	br	10fbc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   10fa0:	e0bffd17 	ldw	r2,-12(fp)
   10fa4:	10800017 	ldw	r2,0(r2)
   10fa8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10fac:	e0fffd17 	ldw	r3,-12(fp)
   10fb0:	d0a00004 	addi	r2,gp,-32768
   10fb4:	18bfcc1e 	bne	r3,r2,10ee8 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   10fb8:	0005883a 	mov	r2,zero
}
   10fbc:	e037883a 	mov	sp,fp
   10fc0:	dfc00117 	ldw	ra,4(sp)
   10fc4:	df000017 	ldw	fp,0(sp)
   10fc8:	dec00204 	addi	sp,sp,8
   10fcc:	f800283a 	ret

00010fd0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   10fd0:	defffa04 	addi	sp,sp,-24
   10fd4:	dfc00515 	stw	ra,20(sp)
   10fd8:	df000415 	stw	fp,16(sp)
   10fdc:	dc000315 	stw	r16,12(sp)
   10fe0:	df000404 	addi	fp,sp,16
   10fe4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   10fe8:	00bffa04 	movi	r2,-24
   10fec:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10ff0:	e03ffc15 	stw	zero,-16(fp)
   10ff4:	00001d06 	br	1106c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   10ff8:	04000074 	movhi	r16,1
   10ffc:	84202304 	addi	r16,r16,-32628
   11000:	e0bffc17 	ldw	r2,-16(fp)
   11004:	01400304 	movi	r5,12
   11008:	1009883a 	mov	r4,r2
   1100c:	00116400 	call	11640 <__mulsi3>
   11010:	8085883a 	add	r2,r16,r2
   11014:	10800017 	ldw	r2,0(r2)
   11018:	1000111e 	bne	r2,zero,11060 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   1101c:	04000074 	movhi	r16,1
   11020:	84202304 	addi	r16,r16,-32628
   11024:	e0bffc17 	ldw	r2,-16(fp)
   11028:	01400304 	movi	r5,12
   1102c:	1009883a 	mov	r4,r2
   11030:	00116400 	call	11640 <__mulsi3>
   11034:	8085883a 	add	r2,r16,r2
   11038:	e0fffe17 	ldw	r3,-8(fp)
   1103c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   11040:	d0e00417 	ldw	r3,-32752(gp)
   11044:	e0bffc17 	ldw	r2,-16(fp)
   11048:	1880020e 	bge	r3,r2,11054 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   1104c:	e0bffc17 	ldw	r2,-16(fp)
   11050:	d0a00415 	stw	r2,-32752(gp)
      }
      rc = i;
   11054:	e0bffc17 	ldw	r2,-16(fp)
   11058:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   1105c:	00000606 	br	11078 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11060:	e0bffc17 	ldw	r2,-16(fp)
   11064:	10800044 	addi	r2,r2,1
   11068:	e0bffc15 	stw	r2,-16(fp)
   1106c:	e0bffc17 	ldw	r2,-16(fp)
   11070:	10800810 	cmplti	r2,r2,32
   11074:	103fe01e 	bne	r2,zero,10ff8 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   11078:	e0bffd17 	ldw	r2,-12(fp)
}
   1107c:	e6ffff04 	addi	sp,fp,-4
   11080:	dfc00217 	ldw	ra,8(sp)
   11084:	df000117 	ldw	fp,4(sp)
   11088:	dc000017 	ldw	r16,0(sp)
   1108c:	dec00304 	addi	sp,sp,12
   11090:	f800283a 	ret

00011094 <atexit>:
   11094:	200b883a 	mov	r5,r4
   11098:	000f883a 	mov	r7,zero
   1109c:	000d883a 	mov	r6,zero
   110a0:	0009883a 	mov	r4,zero
   110a4:	00111f41 	jmpi	111f4 <__register_exitproc>

000110a8 <exit>:
   110a8:	defffe04 	addi	sp,sp,-8
   110ac:	000b883a 	mov	r5,zero
   110b0:	dc000015 	stw	r16,0(sp)
   110b4:	dfc00115 	stw	ra,4(sp)
   110b8:	2021883a 	mov	r16,r4
   110bc:	001130c0 	call	1130c <__call_exitprocs>
   110c0:	00800074 	movhi	r2,1
   110c4:	10a19204 	addi	r2,r2,-31160
   110c8:	11000017 	ldw	r4,0(r2)
   110cc:	20800f17 	ldw	r2,60(r4)
   110d0:	10000126 	beq	r2,zero,110d8 <exit+0x30>
   110d4:	103ee83a 	callr	r2
   110d8:	8009883a 	mov	r4,r16
   110dc:	00116680 	call	11668 <_exit>

000110e0 <memcmp>:
   110e0:	01c000c4 	movi	r7,3
   110e4:	3980192e 	bgeu	r7,r6,1114c <memcmp+0x6c>
   110e8:	2144b03a 	or	r2,r4,r5
   110ec:	11c4703a 	and	r2,r2,r7
   110f0:	10000f26 	beq	r2,zero,11130 <memcmp+0x50>
   110f4:	20800003 	ldbu	r2,0(r4)
   110f8:	28c00003 	ldbu	r3,0(r5)
   110fc:	10c0151e 	bne	r2,r3,11154 <memcmp+0x74>
   11100:	31bfff84 	addi	r6,r6,-2
   11104:	01ffffc4 	movi	r7,-1
   11108:	00000406 	br	1111c <memcmp+0x3c>
   1110c:	20800003 	ldbu	r2,0(r4)
   11110:	28c00003 	ldbu	r3,0(r5)
   11114:	31bfffc4 	addi	r6,r6,-1
   11118:	10c00e1e 	bne	r2,r3,11154 <memcmp+0x74>
   1111c:	21000044 	addi	r4,r4,1
   11120:	29400044 	addi	r5,r5,1
   11124:	31fff91e 	bne	r6,r7,1110c <memcmp+0x2c>
   11128:	0005883a 	mov	r2,zero
   1112c:	f800283a 	ret
   11130:	20c00017 	ldw	r3,0(r4)
   11134:	28800017 	ldw	r2,0(r5)
   11138:	18bfee1e 	bne	r3,r2,110f4 <memcmp+0x14>
   1113c:	31bfff04 	addi	r6,r6,-4
   11140:	21000104 	addi	r4,r4,4
   11144:	29400104 	addi	r5,r5,4
   11148:	39bff936 	bltu	r7,r6,11130 <memcmp+0x50>
   1114c:	303fe91e 	bne	r6,zero,110f4 <memcmp+0x14>
   11150:	003ff506 	br	11128 <memcmp+0x48>
   11154:	10c5c83a 	sub	r2,r2,r3
   11158:	f800283a 	ret

0001115c <strlen>:
   1115c:	208000cc 	andi	r2,r4,3
   11160:	10002026 	beq	r2,zero,111e4 <strlen+0x88>
   11164:	20800007 	ldb	r2,0(r4)
   11168:	10002026 	beq	r2,zero,111ec <strlen+0x90>
   1116c:	2005883a 	mov	r2,r4
   11170:	00000206 	br	1117c <strlen+0x20>
   11174:	10c00007 	ldb	r3,0(r2)
   11178:	18001826 	beq	r3,zero,111dc <strlen+0x80>
   1117c:	10800044 	addi	r2,r2,1
   11180:	10c000cc 	andi	r3,r2,3
   11184:	183ffb1e 	bne	r3,zero,11174 <strlen+0x18>
   11188:	10c00017 	ldw	r3,0(r2)
   1118c:	01ffbff4 	movhi	r7,65279
   11190:	39ffbfc4 	addi	r7,r7,-257
   11194:	00ca303a 	nor	r5,zero,r3
   11198:	01a02074 	movhi	r6,32897
   1119c:	19c7883a 	add	r3,r3,r7
   111a0:	31a02004 	addi	r6,r6,-32640
   111a4:	1946703a 	and	r3,r3,r5
   111a8:	1986703a 	and	r3,r3,r6
   111ac:	1800091e 	bne	r3,zero,111d4 <strlen+0x78>
   111b0:	10800104 	addi	r2,r2,4
   111b4:	10c00017 	ldw	r3,0(r2)
   111b8:	19cb883a 	add	r5,r3,r7
   111bc:	00c6303a 	nor	r3,zero,r3
   111c0:	28c6703a 	and	r3,r5,r3
   111c4:	1986703a 	and	r3,r3,r6
   111c8:	183ff926 	beq	r3,zero,111b0 <strlen+0x54>
   111cc:	00000106 	br	111d4 <strlen+0x78>
   111d0:	10800044 	addi	r2,r2,1
   111d4:	10c00007 	ldb	r3,0(r2)
   111d8:	183ffd1e 	bne	r3,zero,111d0 <strlen+0x74>
   111dc:	1105c83a 	sub	r2,r2,r4
   111e0:	f800283a 	ret
   111e4:	2005883a 	mov	r2,r4
   111e8:	003fe706 	br	11188 <strlen+0x2c>
   111ec:	0005883a 	mov	r2,zero
   111f0:	f800283a 	ret

000111f4 <__register_exitproc>:
   111f4:	defffa04 	addi	sp,sp,-24
   111f8:	dc000315 	stw	r16,12(sp)
   111fc:	04000074 	movhi	r16,1
   11200:	84219204 	addi	r16,r16,-31160
   11204:	80c00017 	ldw	r3,0(r16)
   11208:	dc400415 	stw	r17,16(sp)
   1120c:	dfc00515 	stw	ra,20(sp)
   11210:	18805217 	ldw	r2,328(r3)
   11214:	2023883a 	mov	r17,r4
   11218:	10003726 	beq	r2,zero,112f8 <__register_exitproc+0x104>
   1121c:	10c00117 	ldw	r3,4(r2)
   11220:	010007c4 	movi	r4,31
   11224:	20c00e16 	blt	r4,r3,11260 <__register_exitproc+0x6c>
   11228:	1a000044 	addi	r8,r3,1
   1122c:	8800221e 	bne	r17,zero,112b8 <__register_exitproc+0xc4>
   11230:	18c00084 	addi	r3,r3,2
   11234:	18c7883a 	add	r3,r3,r3
   11238:	18c7883a 	add	r3,r3,r3
   1123c:	12000115 	stw	r8,4(r2)
   11240:	10c7883a 	add	r3,r2,r3
   11244:	19400015 	stw	r5,0(r3)
   11248:	0005883a 	mov	r2,zero
   1124c:	dfc00517 	ldw	ra,20(sp)
   11250:	dc400417 	ldw	r17,16(sp)
   11254:	dc000317 	ldw	r16,12(sp)
   11258:	dec00604 	addi	sp,sp,24
   1125c:	f800283a 	ret
   11260:	00800034 	movhi	r2,0
   11264:	10800004 	addi	r2,r2,0
   11268:	10002626 	beq	r2,zero,11304 <__register_exitproc+0x110>
   1126c:	01006404 	movi	r4,400
   11270:	d9400015 	stw	r5,0(sp)
   11274:	d9800115 	stw	r6,4(sp)
   11278:	d9c00215 	stw	r7,8(sp)
   1127c:	00000000 	call	0 <__alt_mem_onchip_ram-0x8000>
   11280:	d9400017 	ldw	r5,0(sp)
   11284:	d9800117 	ldw	r6,4(sp)
   11288:	d9c00217 	ldw	r7,8(sp)
   1128c:	10001d26 	beq	r2,zero,11304 <__register_exitproc+0x110>
   11290:	81000017 	ldw	r4,0(r16)
   11294:	10000115 	stw	zero,4(r2)
   11298:	02000044 	movi	r8,1
   1129c:	22405217 	ldw	r9,328(r4)
   112a0:	0007883a 	mov	r3,zero
   112a4:	12400015 	stw	r9,0(r2)
   112a8:	20805215 	stw	r2,328(r4)
   112ac:	10006215 	stw	zero,392(r2)
   112b0:	10006315 	stw	zero,396(r2)
   112b4:	883fde26 	beq	r17,zero,11230 <__register_exitproc+0x3c>
   112b8:	18c9883a 	add	r4,r3,r3
   112bc:	2109883a 	add	r4,r4,r4
   112c0:	1109883a 	add	r4,r2,r4
   112c4:	21802215 	stw	r6,136(r4)
   112c8:	01800044 	movi	r6,1
   112cc:	12406217 	ldw	r9,392(r2)
   112d0:	30cc983a 	sll	r6,r6,r3
   112d4:	4992b03a 	or	r9,r9,r6
   112d8:	12406215 	stw	r9,392(r2)
   112dc:	21c04215 	stw	r7,264(r4)
   112e0:	01000084 	movi	r4,2
   112e4:	893fd21e 	bne	r17,r4,11230 <__register_exitproc+0x3c>
   112e8:	11006317 	ldw	r4,396(r2)
   112ec:	218cb03a 	or	r6,r4,r6
   112f0:	11806315 	stw	r6,396(r2)
   112f4:	003fce06 	br	11230 <__register_exitproc+0x3c>
   112f8:	18805304 	addi	r2,r3,332
   112fc:	18805215 	stw	r2,328(r3)
   11300:	003fc606 	br	1121c <__register_exitproc+0x28>
   11304:	00bfffc4 	movi	r2,-1
   11308:	003fd006 	br	1124c <__register_exitproc+0x58>

0001130c <__call_exitprocs>:
   1130c:	defff504 	addi	sp,sp,-44
   11310:	df000915 	stw	fp,36(sp)
   11314:	dd400615 	stw	r21,24(sp)
   11318:	dc800315 	stw	r18,12(sp)
   1131c:	dfc00a15 	stw	ra,40(sp)
   11320:	ddc00815 	stw	r23,32(sp)
   11324:	dd800715 	stw	r22,28(sp)
   11328:	dd000515 	stw	r20,20(sp)
   1132c:	dcc00415 	stw	r19,16(sp)
   11330:	dc400215 	stw	r17,8(sp)
   11334:	dc000115 	stw	r16,4(sp)
   11338:	d9000015 	stw	r4,0(sp)
   1133c:	2839883a 	mov	fp,r5
   11340:	04800044 	movi	r18,1
   11344:	057fffc4 	movi	r21,-1
   11348:	00800074 	movhi	r2,1
   1134c:	10a19204 	addi	r2,r2,-31160
   11350:	12000017 	ldw	r8,0(r2)
   11354:	45005217 	ldw	r20,328(r8)
   11358:	44c05204 	addi	r19,r8,328
   1135c:	a0001c26 	beq	r20,zero,113d0 <__call_exitprocs+0xc4>
   11360:	a0800117 	ldw	r2,4(r20)
   11364:	15ffffc4 	addi	r23,r2,-1
   11368:	b8000d16 	blt	r23,zero,113a0 <__call_exitprocs+0x94>
   1136c:	14000044 	addi	r16,r2,1
   11370:	8421883a 	add	r16,r16,r16
   11374:	8421883a 	add	r16,r16,r16
   11378:	84402004 	addi	r17,r16,128
   1137c:	a463883a 	add	r17,r20,r17
   11380:	a421883a 	add	r16,r20,r16
   11384:	e0001e26 	beq	fp,zero,11400 <__call_exitprocs+0xf4>
   11388:	80804017 	ldw	r2,256(r16)
   1138c:	e0801c26 	beq	fp,r2,11400 <__call_exitprocs+0xf4>
   11390:	bdffffc4 	addi	r23,r23,-1
   11394:	843fff04 	addi	r16,r16,-4
   11398:	8c7fff04 	addi	r17,r17,-4
   1139c:	bd7ff91e 	bne	r23,r21,11384 <__call_exitprocs+0x78>
   113a0:	00800034 	movhi	r2,0
   113a4:	10800004 	addi	r2,r2,0
   113a8:	10000926 	beq	r2,zero,113d0 <__call_exitprocs+0xc4>
   113ac:	a0800117 	ldw	r2,4(r20)
   113b0:	1000301e 	bne	r2,zero,11474 <__call_exitprocs+0x168>
   113b4:	a0800017 	ldw	r2,0(r20)
   113b8:	10003226 	beq	r2,zero,11484 <__call_exitprocs+0x178>
   113bc:	a009883a 	mov	r4,r20
   113c0:	98800015 	stw	r2,0(r19)
   113c4:	00000000 	call	0 <__alt_mem_onchip_ram-0x8000>
   113c8:	9d000017 	ldw	r20,0(r19)
   113cc:	a03fe41e 	bne	r20,zero,11360 <__call_exitprocs+0x54>
   113d0:	dfc00a17 	ldw	ra,40(sp)
   113d4:	df000917 	ldw	fp,36(sp)
   113d8:	ddc00817 	ldw	r23,32(sp)
   113dc:	dd800717 	ldw	r22,28(sp)
   113e0:	dd400617 	ldw	r21,24(sp)
   113e4:	dd000517 	ldw	r20,20(sp)
   113e8:	dcc00417 	ldw	r19,16(sp)
   113ec:	dc800317 	ldw	r18,12(sp)
   113f0:	dc400217 	ldw	r17,8(sp)
   113f4:	dc000117 	ldw	r16,4(sp)
   113f8:	dec00b04 	addi	sp,sp,44
   113fc:	f800283a 	ret
   11400:	a0800117 	ldw	r2,4(r20)
   11404:	80c00017 	ldw	r3,0(r16)
   11408:	10bfffc4 	addi	r2,r2,-1
   1140c:	15c01426 	beq	r2,r23,11460 <__call_exitprocs+0x154>
   11410:	80000015 	stw	zero,0(r16)
   11414:	183fde26 	beq	r3,zero,11390 <__call_exitprocs+0x84>
   11418:	95c8983a 	sll	r4,r18,r23
   1141c:	a0806217 	ldw	r2,392(r20)
   11420:	a5800117 	ldw	r22,4(r20)
   11424:	2084703a 	and	r2,r4,r2
   11428:	10000b26 	beq	r2,zero,11458 <__call_exitprocs+0x14c>
   1142c:	a0806317 	ldw	r2,396(r20)
   11430:	2088703a 	and	r4,r4,r2
   11434:	20000c1e 	bne	r4,zero,11468 <__call_exitprocs+0x15c>
   11438:	89400017 	ldw	r5,0(r17)
   1143c:	d9000017 	ldw	r4,0(sp)
   11440:	183ee83a 	callr	r3
   11444:	a0800117 	ldw	r2,4(r20)
   11448:	15bfbf1e 	bne	r2,r22,11348 <__call_exitprocs+0x3c>
   1144c:	98800017 	ldw	r2,0(r19)
   11450:	153fcf26 	beq	r2,r20,11390 <__call_exitprocs+0x84>
   11454:	003fbc06 	br	11348 <__call_exitprocs+0x3c>
   11458:	183ee83a 	callr	r3
   1145c:	003ff906 	br	11444 <__call_exitprocs+0x138>
   11460:	a5c00115 	stw	r23,4(r20)
   11464:	003feb06 	br	11414 <__call_exitprocs+0x108>
   11468:	89000017 	ldw	r4,0(r17)
   1146c:	183ee83a 	callr	r3
   11470:	003ff406 	br	11444 <__call_exitprocs+0x138>
   11474:	a0800017 	ldw	r2,0(r20)
   11478:	a027883a 	mov	r19,r20
   1147c:	1029883a 	mov	r20,r2
   11480:	003fb606 	br	1135c <__call_exitprocs+0x50>
   11484:	0005883a 	mov	r2,zero
   11488:	003ffb06 	br	11478 <__call_exitprocs+0x16c>

0001148c <__divsi3>:
   1148c:	20001b16 	blt	r4,zero,114fc <__divsi3+0x70>
   11490:	000f883a 	mov	r7,zero
   11494:	28001616 	blt	r5,zero,114f0 <__divsi3+0x64>
   11498:	200d883a 	mov	r6,r4
   1149c:	29001a2e 	bgeu	r5,r4,11508 <__divsi3+0x7c>
   114a0:	00800804 	movi	r2,32
   114a4:	00c00044 	movi	r3,1
   114a8:	00000106 	br	114b0 <__divsi3+0x24>
   114ac:	10000d26 	beq	r2,zero,114e4 <__divsi3+0x58>
   114b0:	294b883a 	add	r5,r5,r5
   114b4:	10bfffc4 	addi	r2,r2,-1
   114b8:	18c7883a 	add	r3,r3,r3
   114bc:	293ffb36 	bltu	r5,r4,114ac <__divsi3+0x20>
   114c0:	0005883a 	mov	r2,zero
   114c4:	18000726 	beq	r3,zero,114e4 <__divsi3+0x58>
   114c8:	0005883a 	mov	r2,zero
   114cc:	31400236 	bltu	r6,r5,114d8 <__divsi3+0x4c>
   114d0:	314dc83a 	sub	r6,r6,r5
   114d4:	10c4b03a 	or	r2,r2,r3
   114d8:	1806d07a 	srli	r3,r3,1
   114dc:	280ad07a 	srli	r5,r5,1
   114e0:	183ffa1e 	bne	r3,zero,114cc <__divsi3+0x40>
   114e4:	38000126 	beq	r7,zero,114ec <__divsi3+0x60>
   114e8:	0085c83a 	sub	r2,zero,r2
   114ec:	f800283a 	ret
   114f0:	014bc83a 	sub	r5,zero,r5
   114f4:	39c0005c 	xori	r7,r7,1
   114f8:	003fe706 	br	11498 <__divsi3+0xc>
   114fc:	0109c83a 	sub	r4,zero,r4
   11500:	01c00044 	movi	r7,1
   11504:	003fe306 	br	11494 <__divsi3+0x8>
   11508:	00c00044 	movi	r3,1
   1150c:	003fee06 	br	114c8 <__divsi3+0x3c>

00011510 <__modsi3>:
   11510:	20001716 	blt	r4,zero,11570 <__modsi3+0x60>
   11514:	000f883a 	mov	r7,zero
   11518:	2005883a 	mov	r2,r4
   1151c:	28001216 	blt	r5,zero,11568 <__modsi3+0x58>
   11520:	2900162e 	bgeu	r5,r4,1157c <__modsi3+0x6c>
   11524:	01800804 	movi	r6,32
   11528:	00c00044 	movi	r3,1
   1152c:	00000106 	br	11534 <__modsi3+0x24>
   11530:	30000a26 	beq	r6,zero,1155c <__modsi3+0x4c>
   11534:	294b883a 	add	r5,r5,r5
   11538:	31bfffc4 	addi	r6,r6,-1
   1153c:	18c7883a 	add	r3,r3,r3
   11540:	293ffb36 	bltu	r5,r4,11530 <__modsi3+0x20>
   11544:	18000526 	beq	r3,zero,1155c <__modsi3+0x4c>
   11548:	1806d07a 	srli	r3,r3,1
   1154c:	11400136 	bltu	r2,r5,11554 <__modsi3+0x44>
   11550:	1145c83a 	sub	r2,r2,r5
   11554:	280ad07a 	srli	r5,r5,1
   11558:	183ffb1e 	bne	r3,zero,11548 <__modsi3+0x38>
   1155c:	38000126 	beq	r7,zero,11564 <__modsi3+0x54>
   11560:	0085c83a 	sub	r2,zero,r2
   11564:	f800283a 	ret
   11568:	014bc83a 	sub	r5,zero,r5
   1156c:	003fec06 	br	11520 <__modsi3+0x10>
   11570:	0109c83a 	sub	r4,zero,r4
   11574:	01c00044 	movi	r7,1
   11578:	003fe706 	br	11518 <__modsi3+0x8>
   1157c:	00c00044 	movi	r3,1
   11580:	003ff106 	br	11548 <__modsi3+0x38>

00011584 <__udivsi3>:
   11584:	200d883a 	mov	r6,r4
   11588:	2900152e 	bgeu	r5,r4,115e0 <__udivsi3+0x5c>
   1158c:	28001416 	blt	r5,zero,115e0 <__udivsi3+0x5c>
   11590:	00800804 	movi	r2,32
   11594:	00c00044 	movi	r3,1
   11598:	00000206 	br	115a4 <__udivsi3+0x20>
   1159c:	10000e26 	beq	r2,zero,115d8 <__udivsi3+0x54>
   115a0:	28000516 	blt	r5,zero,115b8 <__udivsi3+0x34>
   115a4:	294b883a 	add	r5,r5,r5
   115a8:	10bfffc4 	addi	r2,r2,-1
   115ac:	18c7883a 	add	r3,r3,r3
   115b0:	293ffa36 	bltu	r5,r4,1159c <__udivsi3+0x18>
   115b4:	18000826 	beq	r3,zero,115d8 <__udivsi3+0x54>
   115b8:	0005883a 	mov	r2,zero
   115bc:	31400236 	bltu	r6,r5,115c8 <__udivsi3+0x44>
   115c0:	314dc83a 	sub	r6,r6,r5
   115c4:	10c4b03a 	or	r2,r2,r3
   115c8:	1806d07a 	srli	r3,r3,1
   115cc:	280ad07a 	srli	r5,r5,1
   115d0:	183ffa1e 	bne	r3,zero,115bc <__udivsi3+0x38>
   115d4:	f800283a 	ret
   115d8:	0005883a 	mov	r2,zero
   115dc:	f800283a 	ret
   115e0:	00c00044 	movi	r3,1
   115e4:	003ff406 	br	115b8 <__udivsi3+0x34>

000115e8 <__umodsi3>:
   115e8:	2005883a 	mov	r2,r4
   115ec:	2900122e 	bgeu	r5,r4,11638 <__umodsi3+0x50>
   115f0:	28001116 	blt	r5,zero,11638 <__umodsi3+0x50>
   115f4:	01800804 	movi	r6,32
   115f8:	00c00044 	movi	r3,1
   115fc:	00000206 	br	11608 <__umodsi3+0x20>
   11600:	30000c26 	beq	r6,zero,11634 <__umodsi3+0x4c>
   11604:	28000516 	blt	r5,zero,1161c <__umodsi3+0x34>
   11608:	294b883a 	add	r5,r5,r5
   1160c:	31bfffc4 	addi	r6,r6,-1
   11610:	18c7883a 	add	r3,r3,r3
   11614:	293ffa36 	bltu	r5,r4,11600 <__umodsi3+0x18>
   11618:	18000626 	beq	r3,zero,11634 <__umodsi3+0x4c>
   1161c:	1806d07a 	srli	r3,r3,1
   11620:	11400136 	bltu	r2,r5,11628 <__umodsi3+0x40>
   11624:	1145c83a 	sub	r2,r2,r5
   11628:	280ad07a 	srli	r5,r5,1
   1162c:	183ffb1e 	bne	r3,zero,1161c <__umodsi3+0x34>
   11630:	f800283a 	ret
   11634:	f800283a 	ret
   11638:	00c00044 	movi	r3,1
   1163c:	003ff706 	br	1161c <__umodsi3+0x34>

00011640 <__mulsi3>:
   11640:	0005883a 	mov	r2,zero
   11644:	20000726 	beq	r4,zero,11664 <__mulsi3+0x24>
   11648:	20c0004c 	andi	r3,r4,1
   1164c:	2008d07a 	srli	r4,r4,1
   11650:	18000126 	beq	r3,zero,11658 <__mulsi3+0x18>
   11654:	1145883a 	add	r2,r2,r5
   11658:	294b883a 	add	r5,r5,r5
   1165c:	203ffa1e 	bne	r4,zero,11648 <__mulsi3+0x8>
   11660:	f800283a 	ret
   11664:	f800283a 	ret

00011668 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   11668:	defffd04 	addi	sp,sp,-12
   1166c:	df000215 	stw	fp,8(sp)
   11670:	df000204 	addi	fp,sp,8
   11674:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   11678:	0001883a 	nop
   1167c:	e0bfff17 	ldw	r2,-4(fp)
   11680:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   11684:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   11688:	10000226 	beq	r2,zero,11694 <_exit+0x2c>
    ALT_SIM_FAIL();
   1168c:	002af070 	cmpltui	zero,zero,43969
   11690:	00000106 	br	11698 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   11694:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   11698:	003fff06 	br	11698 <_exit+0x30>
